/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={2503:(e,t,s)=>{"use strict";function r(e,t,s){return(t="symbol"==typeof(r=function(e,t){if("object"!=typeof e||!e)return e;var s=e[Symbol.toPrimitive];if(void 0!==s){var r=s.call(e,"string");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(t))?r:r+"")in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e;var r}function a(e){return null!=e}function i(e){const t=e.pathVariables;var s=e.uriTemplate;for(const e in t){const r=encodeURIComponent(`${t[e]}`);s=s.replace(`{${e}}`,`${r}`)}return`${s}${function(e){var t;const s=function(e){const t=new URLSearchParams(e);for(const[s,r]of Object.entries(e))Array.isArray(r)&&(t.delete(s),r.filter(Boolean).forEach((e=>t.append(s,e))));return t.toString()}((t=e,Object.keys(t).reduce(((e,s)=>{const r=t[s];if(Array.isArray(r)){const t=r.filter(a);return t.length?{...e,[s]:t}:e}return a(r)?{...e,[s]:r}:e}),{})));return""===s?"":`?${s}`}(e.queryParams||{})}`}s.r(t),s.d(t,{ApiRoot:()=>Dr,ByProjectKeyApiClientsByIDRequestBuilder:()=>u,ByProjectKeyApiClientsRequestBuilder:()=>c,ByProjectKeyAsAssociateByAssociateIdBusinessUnitsByIDRequestBuilder:()=>p,ByProjectKeyAsAssociateByAssociateIdBusinessUnitsKeyByKeyRequestBuilder:()=>g,ByProjectKeyAsAssociateByAssociateIdBusinessUnitsRequestBuilder:()=>d,ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyApprovalFlowsByIDRequestBuilder:()=>l,ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyApprovalFlowsRequestBuilder:()=>y,ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyApprovalRulesByIDRequestBuilder:()=>A,ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyApprovalRulesKeyByKeyRequestBuilder:()=>b,ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyApprovalRulesRequestBuilder:()=>m,ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsByIDRequestBuilder:()=>f,ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsKeyByKeyRequestBuilder:()=>w,ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsReplicateRequestBuilder:()=>q,ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsRequestBuilder:()=>U,ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyOrdersByIDRequestBuilder:()=>C,ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyOrdersOrderNumberByOrderNumberRequestBuilder:()=>R,ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyOrdersQuotesRequestBuilder:()=>x,ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyOrdersRequestBuilder:()=>T,ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuoteRequestsByIDRequestBuilder:()=>E,ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuoteRequestsKeyByKeyRequestBuilder:()=>K,ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuoteRequestsRequestBuilder:()=>j,ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuotesByIDRequestBuilder:()=>B,ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuotesKeyByKeyRequestBuilder:()=>k,ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuotesRequestBuilder:()=>P,ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyRequestBuilder:()=>v,ByProjectKeyAsAssociateByAssociateIdRequestBuilder:()=>_,ByProjectKeyAsAssociateRequestBuilder:()=>I,ByProjectKeyAssociateRolesByIDRequestBuilder:()=>V,ByProjectKeyAssociateRolesKeyByKeyRequestBuilder:()=>D,ByProjectKeyAssociateRolesRequestBuilder:()=>S,ByProjectKeyAttributeGroupsByIDRequestBuilder:()=>M,ByProjectKeyAttributeGroupsKeyByKeyRequestBuilder:()=>O,ByProjectKeyAttributeGroupsRequestBuilder:()=>L,ByProjectKeyBusinessUnitsByIDRequestBuilder:()=>G,ByProjectKeyBusinessUnitsKeyByKeyRequestBuilder:()=>H,ByProjectKeyBusinessUnitsRequestBuilder:()=>F,ByProjectKeyCartDiscountsByIDRequestBuilder:()=>N,ByProjectKeyCartDiscountsKeyByKeyRequestBuilder:()=>z,ByProjectKeyCartDiscountsRequestBuilder:()=>$,ByProjectKeyCartsByIDRequestBuilder:()=>Y,ByProjectKeyCartsCustomerIdByCustomerIdRequestBuilder:()=>Q,ByProjectKeyCartsKeyByKeyRequestBuilder:()=>Z,ByProjectKeyCartsReplicateRequestBuilder:()=>W,ByProjectKeyCartsRequestBuilder:()=>J,ByProjectKeyCategoriesByIDRequestBuilder:()=>X,ByProjectKeyCategoriesKeyByKeyRequestBuilder:()=>ee,ByProjectKeyCategoriesRequestBuilder:()=>te,ByProjectKeyChannelsByIDRequestBuilder:()=>se,ByProjectKeyChannelsRequestBuilder:()=>re,ByProjectKeyCustomObjectsByContainerByKeyRequestBuilder:()=>ae,ByProjectKeyCustomObjectsByContainerRequestBuilder:()=>ie,ByProjectKeyCustomObjectsRequestBuilder:()=>ne,ByProjectKeyCustomerGroupsByIDRequestBuilder:()=>oe,ByProjectKeyCustomerGroupsKeyByKeyRequestBuilder:()=>he,ByProjectKeyCustomerGroupsRequestBuilder:()=>ue,ByProjectKeyCustomersByIDRequestBuilder:()=>ye,ByProjectKeyCustomersEmailConfirmRequestBuilder:()=>ce,ByProjectKeyCustomersEmailTokenByEmailTokenRequestBuilder:()=>Ae,ByProjectKeyCustomersEmailTokenRequestBuilder:()=>pe,ByProjectKeyCustomersKeyByKeyRequestBuilder:()=>be,ByProjectKeyCustomersPasswordRequestBuilder:()=>de,ByProjectKeyCustomersPasswordResetRequestBuilder:()=>le,ByProjectKeyCustomersPasswordTokenByPasswordTokenRequestBuilder:()=>me,ByProjectKeyCustomersPasswordTokenRequestBuilder:()=>ge,ByProjectKeyCustomersRequestBuilder:()=>qe,ByProjectKeyDiscountCodesByIDRequestBuilder:()=>fe,ByProjectKeyDiscountCodesKeyByKeyRequestBuilder:()=>we,ByProjectKeyDiscountCodesRequestBuilder:()=>Ue,ByProjectKeyExtensionsByIDRequestBuilder:()=>xe,ByProjectKeyExtensionsKeyByKeyRequestBuilder:()=>Ce,ByProjectKeyExtensionsRequestBuilder:()=>Re,ByProjectKeyGraphqlRequestBuilder:()=>Te,ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyMeCustomersRequestBuilder:()=>Ee,ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyMeRequestBuilder:()=>Ke,ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyRequestBuilder:()=>je,ByProjectKeyInStoreKeyByStoreKeyCartDiscountsByIDRequestBuilder:()=>Be,ByProjectKeyInStoreKeyByStoreKeyCartDiscountsKeyByKeyRequestBuilder:()=>ke,ByProjectKeyInStoreKeyByStoreKeyCartDiscountsRequestBuilder:()=>Pe,ByProjectKeyInStoreKeyByStoreKeyCartsByIDRequestBuilder:()=>_e,ByProjectKeyInStoreKeyByStoreKeyCartsCustomerIdByCustomerIdRequestBuilder:()=>Ie,ByProjectKeyInStoreKeyByStoreKeyCartsKeyByKeyRequestBuilder:()=>Ve,ByProjectKeyInStoreKeyByStoreKeyCartsReplicateRequestBuilder:()=>ve,ByProjectKeyInStoreKeyByStoreKeyCartsRequestBuilder:()=>De,ByProjectKeyInStoreKeyByStoreKeyCustomersByIDRequestBuilder:()=>He,ByProjectKeyInStoreKeyByStoreKeyCustomersEmailConfirmRequestBuilder:()=>Se,ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenByEmailTokenRequestBuilder:()=>Fe,ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenRequestBuilder:()=>Me,ByProjectKeyInStoreKeyByStoreKeyCustomersKeyByKeyRequestBuilder:()=>Ne,ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordRequestBuilder:()=>Le,ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordResetRequestBuilder:()=>Ge,ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenByPasswordTokenRequestBuilder:()=>ze,ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenRequestBuilder:()=>Oe,ByProjectKeyInStoreKeyByStoreKeyCustomersRequestBuilder:()=>$e,ByProjectKeyInStoreKeyByStoreKeyLoginRequestBuilder:()=>We,ByProjectKeyInStoreKeyByStoreKeyMeActiveCartRequestBuilder:()=>o,ByProjectKeyInStoreKeyByStoreKeyMeCartsByIDRequestBuilder:()=>Ye,ByProjectKeyInStoreKeyByStoreKeyMeCartsRequestBuilder:()=>Qe,ByProjectKeyInStoreKeyByStoreKeyMeEmailConfirmRequestBuilder:()=>Ze,ByProjectKeyInStoreKeyByStoreKeyMeLoginRequestBuilder:()=>Je,ByProjectKeyInStoreKeyByStoreKeyMeOrdersByIDRequestBuilder:()=>Xe,ByProjectKeyInStoreKeyByStoreKeyMeOrdersRequestBuilder:()=>et,ByProjectKeyInStoreKeyByStoreKeyMePasswordRequestBuilder:()=>st,ByProjectKeyInStoreKeyByStoreKeyMePasswordResetRequestBuilder:()=>tt,ByProjectKeyInStoreKeyByStoreKeyMeRequestBuilder:()=>ot,ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsByIDRequestBuilder:()=>rt,ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsKeyByKeyRequestBuilder:()=>at,ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsRequestBuilder:()=>it,ByProjectKeyInStoreKeyByStoreKeyMeSignupRequestBuilder:()=>nt,ByProjectKeyInStoreKeyByStoreKeyOrdersByIDRequestBuilder:()=>ht,ByProjectKeyInStoreKeyByStoreKeyOrdersOrderNumberByOrderNumberRequestBuilder:()=>ut,ByProjectKeyInStoreKeyByStoreKeyOrdersRequestBuilder:()=>ct,ByProjectKeyInStoreKeyByStoreKeyProductProjectionsByIDRequestBuilder:()=>pt,ByProjectKeyInStoreKeyByStoreKeyProductProjectionsKeyByKeyRequestBuilder:()=>gt,ByProjectKeyInStoreKeyByStoreKeyProductProjectionsRequestBuilder:()=>dt,ByProjectKeyInStoreKeyByStoreKeyProductSelectionAssignmentsRequestBuilder:()=>lt,ByProjectKeyInStoreKeyByStoreKeyProductTailoringRequestBuilder:()=>yt,ByProjectKeyInStoreKeyByStoreKeyProductsByProductIDProductTailoringRequestBuilder:()=>At,ByProjectKeyInStoreKeyByStoreKeyProductsByProductIDRequestBuilder:()=>bt,ByProjectKeyInStoreKeyByStoreKeyProductsKeyByProductKeyProductTailoringRequestBuilder:()=>mt,ByProjectKeyInStoreKeyByStoreKeyProductsKeyByProductKeyRequestBuilder:()=>qt,ByProjectKeyInStoreKeyByStoreKeyProductsRequestBuilder:()=>ft,ByProjectKeyInStoreKeyByStoreKeyRequestBuilder:()=>Tt,ByProjectKeyInStoreKeyByStoreKeyShippingMethodsMatchingCartRequestBuilder:()=>wt,ByProjectKeyInStoreKeyByStoreKeyShippingMethodsRequestBuilder:()=>Ut,ByProjectKeyInStoreKeyByStoreKeyShoppingListsByIDRequestBuilder:()=>xt,ByProjectKeyInStoreKeyByStoreKeyShoppingListsKeyByKeyRequestBuilder:()=>Ct,ByProjectKeyInStoreKeyByStoreKeyShoppingListsRequestBuilder:()=>Rt,ByProjectKeyInventoryByIDRequestBuilder:()=>Et,ByProjectKeyInventoryKeyByKeyRequestBuilder:()=>Kt,ByProjectKeyInventoryRequestBuilder:()=>jt,ByProjectKeyLoginRequestBuilder:()=>Bt,ByProjectKeyMeActiveCartRequestBuilder:()=>h,ByProjectKeyMeBusinessUnitsByIDRequestBuilder:()=>kt,ByProjectKeyMeBusinessUnitsKeyByKeyRequestBuilder:()=>Pt,ByProjectKeyMeBusinessUnitsRequestBuilder:()=>vt,ByProjectKeyMeCartsByIDRequestBuilder:()=>It,ByProjectKeyMeCartsKeyByKeyRequestBuilder:()=>Vt,ByProjectKeyMeCartsReplicateRequestBuilder:()=>_t,ByProjectKeyMeCartsRequestBuilder:()=>Dt,ByProjectKeyMeEmailConfirmRequestBuilder:()=>St,ByProjectKeyMeLoginRequestBuilder:()=>Mt,ByProjectKeyMeOrdersByIDRequestBuilder:()=>Lt,ByProjectKeyMeOrdersQuotesRequestBuilder:()=>Ot,ByProjectKeyMeOrdersRequestBuilder:()=>Gt,ByProjectKeyMePasswordRequestBuilder:()=>Ft,ByProjectKeyMePasswordResetRequestBuilder:()=>Ht,ByProjectKeyMePaymentsByIDRequestBuilder:()=>Nt,ByProjectKeyMePaymentsRequestBuilder:()=>zt,ByProjectKeyMeQuoteRequestsByIDRequestBuilder:()=>$t,ByProjectKeyMeQuoteRequestsKeyByKeyRequestBuilder:()=>Wt,ByProjectKeyMeQuoteRequestsRequestBuilder:()=>Yt,ByProjectKeyMeQuotesByIDRequestBuilder:()=>Qt,ByProjectKeyMeQuotesKeyByKeyRequestBuilder:()=>Zt,ByProjectKeyMeQuotesRequestBuilder:()=>Jt,ByProjectKeyMeRequestBuilder:()=>rs,ByProjectKeyMeShoppingListsByIDRequestBuilder:()=>Xt,ByProjectKeyMeShoppingListsKeyByKeyRequestBuilder:()=>es,ByProjectKeyMeShoppingListsRequestBuilder:()=>ts,ByProjectKeyMeSignupRequestBuilder:()=>ss,ByProjectKeyMessagesByIDRequestBuilder:()=>as,ByProjectKeyMessagesRequestBuilder:()=>is,ByProjectKeyOrdersByIDRequestBuilder:()=>ds,ByProjectKeyOrdersEditsByIDApplyRequestBuilder:()=>ns,ByProjectKeyOrdersEditsByIDRequestBuilder:()=>os,ByProjectKeyOrdersEditsKeyByKeyRequestBuilder:()=>hs,ByProjectKeyOrdersEditsRequestBuilder:()=>us,ByProjectKeyOrdersImportRequestBuilder:()=>cs,ByProjectKeyOrdersOrderNumberByOrderNumberRequestBuilder:()=>ls,ByProjectKeyOrdersQuotesRequestBuilder:()=>ps,ByProjectKeyOrdersRequestBuilder:()=>ys,ByProjectKeyOrdersSearchRequestBuilder:()=>gs,ByProjectKeyPaymentsByIDRequestBuilder:()=>As,ByProjectKeyPaymentsKeyByKeyRequestBuilder:()=>bs,ByProjectKeyPaymentsRequestBuilder:()=>ms,ByProjectKeyProductDiscountsByIDRequestBuilder:()=>fs,ByProjectKeyProductDiscountsKeyByKeyRequestBuilder:()=>ws,ByProjectKeyProductDiscountsMatchingRequestBuilder:()=>qs,ByProjectKeyProductDiscountsRequestBuilder:()=>Us,ByProjectKeyProductProjectionsByIDRequestBuilder:()=>Rs,ByProjectKeyProductProjectionsKeyByKeyRequestBuilder:()=>Ts,ByProjectKeyProductProjectionsRequestBuilder:()=>Es,ByProjectKeyProductProjectionsSearchRequestBuilder:()=>xs,ByProjectKeyProductProjectionsSuggestRequestBuilder:()=>Cs,ByProjectKeyProductSelectionsByIDProductsRequestBuilder:()=>Ks,ByProjectKeyProductSelectionsByIDRequestBuilder:()=>js,ByProjectKeyProductSelectionsKeyByKeyProductsRequestBuilder:()=>Bs,ByProjectKeyProductSelectionsKeyByKeyRequestBuilder:()=>ks,ByProjectKeyProductSelectionsRequestBuilder:()=>Ps,ByProjectKeyProductTailoringByIDRequestBuilder:()=>vs,ByProjectKeyProductTailoringKeyByKeyRequestBuilder:()=>_s,ByProjectKeyProductTailoringRequestBuilder:()=>Is,ByProjectKeyProductTypesByIDRequestBuilder:()=>Vs,ByProjectKeyProductTypesKeyByKeyRequestBuilder:()=>Ds,ByProjectKeyProductTypesRequestBuilder:()=>Ss,ByProjectKeyProductsByIDImagesRequestBuilder:()=>Os,ByProjectKeyProductsByIDProductSelectionsRequestBuilder:()=>Ls,ByProjectKeyProductsByIDRequestBuilder:()=>Gs,ByProjectKeyProductsKeyByKeyProductSelectionsRequestBuilder:()=>Hs,ByProjectKeyProductsKeyByKeyRequestBuilder:()=>Fs,ByProjectKeyProductsRequestBuilder:()=>Ns,ByProjectKeyProductsSearchRequestBuilder:()=>Ms,ByProjectKeyQuoteRequestsByIDRequestBuilder:()=>zs,ByProjectKeyQuoteRequestsKeyByKeyRequestBuilder:()=>$s,ByProjectKeyQuoteRequestsRequestBuilder:()=>Ws,ByProjectKeyQuotesByIDRequestBuilder:()=>Ys,ByProjectKeyQuotesKeyByKeyRequestBuilder:()=>Qs,ByProjectKeyQuotesRequestBuilder:()=>Zs,ByProjectKeyRequestBuilder:()=>Vr,ByProjectKeyReviewsByIDRequestBuilder:()=>Js,ByProjectKeyReviewsKeyByKeyRequestBuilder:()=>Xs,ByProjectKeyReviewsRequestBuilder:()=>er,ByProjectKeyShippingMethodsByIDRequestBuilder:()=>ir,ByProjectKeyShippingMethodsKeyByKeyRequestBuilder:()=>nr,ByProjectKeyShippingMethodsMatchingCartLocationRequestBuilder:()=>tr,ByProjectKeyShippingMethodsMatchingCartRequestBuilder:()=>sr,ByProjectKeyShippingMethodsMatchingLocationRequestBuilder:()=>rr,ByProjectKeyShippingMethodsMatchingOrdereditRequestBuilder:()=>ar,ByProjectKeyShippingMethodsRequestBuilder:()=>or,ByProjectKeyShoppingListsByIDRequestBuilder:()=>hr,ByProjectKeyShoppingListsKeyByKeyRequestBuilder:()=>ur,ByProjectKeyShoppingListsRequestBuilder:()=>cr,ByProjectKeyStagedQuotesByIDRequestBuilder:()=>pr,ByProjectKeyStagedQuotesKeyByKeyRequestBuilder:()=>gr,ByProjectKeyStagedQuotesRequestBuilder:()=>dr,ByProjectKeyStandalonePricesByIDRequestBuilder:()=>lr,ByProjectKeyStandalonePricesKeyByKeyRequestBuilder:()=>yr,ByProjectKeyStandalonePricesRequestBuilder:()=>Ar,ByProjectKeyStatesByIDRequestBuilder:()=>br,ByProjectKeyStatesKeyByKeyRequestBuilder:()=>mr,ByProjectKeyStatesRequestBuilder:()=>qr,ByProjectKeyStoresByIDRequestBuilder:()=>fr,ByProjectKeyStoresKeyByKeyRequestBuilder:()=>wr,ByProjectKeyStoresRequestBuilder:()=>Ur,ByProjectKeySubscriptionsByIDHealthRequestBuilder:()=>xr,ByProjectKeySubscriptionsByIDRequestBuilder:()=>Cr,ByProjectKeySubscriptionsKeyByKeyRequestBuilder:()=>Rr,ByProjectKeySubscriptionsRequestBuilder:()=>Tr,ByProjectKeyTaxCategoriesByIDRequestBuilder:()=>Er,ByProjectKeyTaxCategoriesKeyByKeyRequestBuilder:()=>Kr,ByProjectKeyTaxCategoriesRequestBuilder:()=>jr,ByProjectKeyTypesByIDRequestBuilder:()=>Br,ByProjectKeyTypesKeyByKeyRequestBuilder:()=>kr,ByProjectKeyTypesRequestBuilder:()=>Pr,ByProjectKeyZonesByIDRequestBuilder:()=>vr,ByProjectKeyZonesKeyByKeyRequestBuilder:()=>_r,ByProjectKeyZonesRequestBuilder:()=>Ir,createApiBuilderFromCtpClient:()=>Lr,createExecutorFromMiddlewares:()=>Sr});class n{constructor(e,t){this.requestExecutor=t,r(this,"request",void 0),this.request={...e,uri:i(e)}}clientRequest(){return this.request}execute(){return this.requestExecutor(this.request)}}class o{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/in-store/key={storeKey}/me/active-cart",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/in-store/key={storeKey}/me/active-cart",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}}class h{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/me/active-cart",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/me/active-cart",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}}class u{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/api-clients/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/api-clients/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/api-clients/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}}class c{constructor(e){this.args=e}withId(e){return new u({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/api-clients",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/api-clients",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/api-clients",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class p{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/as-associate/{associateId}/business-units/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/as-associate/{associateId}/business-units/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/as-associate/{associateId}/business-units/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class g{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/as-associate/{associateId}/business-units/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/as-associate/{associateId}/business-units/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/as-associate/{associateId}/business-units/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class d{constructor(e){this.args=e}withKey(e){return new g({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new p({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/as-associate/{associateId}/business-units",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/as-associate/{associateId}/business-units",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/as-associate/{associateId}/business-units",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class l{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/approval-flows/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/approval-flows/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class y{constructor(e){this.args=e}withId(e){return new l({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/approval-flows",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class A{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/approval-rules/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/approval-rules/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class b{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/approval-rules/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/approval-rules/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class m{constructor(e){this.args=e}withId(e){return new A({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withKey(e){return new b({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/approval-rules",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/approval-rules",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class q{constructor(e){this.args=e}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/replicate",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class f{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class w{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class U{constructor(e){this.args=e}withKey(e){return new w({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new f({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}replicate(){return new q({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class x{constructor(e){this.args=e}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders/quotes",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class C{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class R{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders/order-number={orderNumber}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders/order-number={orderNumber}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders/order-number={orderNumber}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class T{constructor(e){this.args=e}orderQuote(){return new x({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withOrderNumber(e){return new R({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new C({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class E{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class K{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class j{constructor(e){this.args=e}withKey(e){return new K({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new E({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class B{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class k{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class P{constructor(e){this.args=e}withKey(e){return new k({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new B({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class v{constructor(e){this.args=e}approvalRules(){return new m({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}approvalFlows(){return new y({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}carts(){return new U({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}orders(){return new T({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}quotes(){return new P({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}quoteRequests(){return new j({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}}class _{constructor(e){this.args=e}businessUnits(){return new d({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}inBusinessUnitKeyWithBusinessUnitKeyValue(e){return new v({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}}class I{constructor(e){this.args=e}withAssociateIdValue(e){return new _({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}}class V{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/associate-roles/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/associate-roles/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/associate-roles/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/associate-roles/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class D{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/associate-roles/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/associate-roles/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/associate-roles/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/associate-roles/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class S{constructor(e){this.args=e}withKey(e){return new D({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new V({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/associate-roles",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/associate-roles",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/associate-roles",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class M{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/attribute-groups/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/attribute-groups/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/attribute-groups/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/attribute-groups/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class O{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/attribute-groups/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/attribute-groups/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/attribute-groups/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/attribute-groups/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class L{constructor(e){this.args=e}withKey(e){return new O({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new M({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/attribute-groups",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/attribute-groups",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/attribute-groups",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class G{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/business-units/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/business-units/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/business-units/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/business-units/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class H{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/business-units/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/business-units/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/business-units/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/business-units/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class F{constructor(e){this.args=e}withKey(e){return new H({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new G({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/business-units",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/business-units",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/business-units",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class N{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/cart-discounts/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/cart-discounts/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/cart-discounts/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/cart-discounts/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class z{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/cart-discounts/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/cart-discounts/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/cart-discounts/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/cart-discounts/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class ${constructor(e){this.args=e}withKey(e){return new z({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new N({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/cart-discounts",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/cart-discounts",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/cart-discounts",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class W{constructor(e){this.args=e}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/carts/replicate",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class Y{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/carts/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/carts/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/carts/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/carts/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Q{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/carts/customer-id={customerId}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/carts/customer-id={customerId}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}}class Z{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/carts/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/carts/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/carts/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/carts/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class J{constructor(e){this.args=e}replicate(){return new W({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withCustomerId(e){return new Q({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withKey(e){return new Z({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new Y({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/carts",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/carts",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/carts",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class X{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/categories/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/categories/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/categories/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/categories/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class ee{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/categories/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/categories/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/categories/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/categories/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class te{constructor(e){this.args=e}withKey(e){return new ee({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new X({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/categories",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/categories",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/categories",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class se{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/channels/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/channels/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/channels/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/channels/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class re{constructor(e){this.args=e}withId(e){return new se({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/channels",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/channels",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/channels",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class ae{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/custom-objects/{container}/{key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/custom-objects/{container}/{key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class ie{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/custom-objects/{container}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class ne{constructor(e){this.args=e}withContainerAndKey(e){return new ae({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withContainer(e){return new ie({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/custom-objects",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/custom-objects",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/custom-objects",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class oe{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/customer-groups/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/customer-groups/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/customer-groups/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/customer-groups/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class he{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/customer-groups/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/customer-groups/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/customer-groups/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/customer-groups/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class ue{constructor(e){this.args=e}withKey(e){return new he({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new oe({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/customer-groups",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/customer-groups",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/customer-groups",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class ce{constructor(e){this.args=e}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/customers/email/confirm",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class pe{constructor(e){this.args=e}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/customers/email-token",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class ge{constructor(e){this.args=e}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/customers/password-token",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class de{constructor(e){this.args=e}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/customers/password",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class le{constructor(e){this.args=e}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/customers/password/reset",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class ye{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/customers/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/customers/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/customers/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/customers/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Ae{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/customers/email-token={emailToken}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class be{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/customers/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/customers/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/customers/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/customers/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class me{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/customers/password-token={passwordToken}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class qe{constructor(e){this.args=e}withPasswordToken(e){return new me({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withEmailToken(e){return new Ae({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}emailToken(){return new pe({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}emailConfirm(){return new ce({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}password(){return new de({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}passwordReset(){return new le({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}passwordToken(){return new ge({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withKey(e){return new be({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new ye({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/customers",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/customers",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/customers",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class fe{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/discount-codes/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/discount-codes/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/discount-codes/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/discount-codes/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class we{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/discount-codes/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/discount-codes/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/discount-codes/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/discount-codes/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Ue{constructor(e){this.args=e}withId(e){return new fe({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withKey(e){return new we({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/discount-codes",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/discount-codes",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/discount-codes",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class xe{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/extensions/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/extensions/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/extensions/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/extensions/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Ce{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/extensions/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/extensions/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/extensions/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/extensions/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Re{constructor(e){this.args=e}withKey(e){return new Ce({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new xe({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/extensions",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/extensions",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/extensions",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class Te{constructor(e){this.args=e}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/graphql",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/graphql",...e?.headers},body:e?.body},this.args.executeRequest)}}class Ee{constructor(e){this.args=e}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-business-unit/key={businessUnitKey}/me/customers",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class Ke{constructor(e){this.args=e}customers(){return new Ee({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}}class je{constructor(e){this.args=e}me(){return new Ke({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}}class Be{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/in-store/key={storeKey}/cart-discounts/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/in-store/key={storeKey}/cart-discounts/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/cart-discounts/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/in-store/key={storeKey}/cart-discounts/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class ke{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/in-store/key={storeKey}/cart-discounts/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/in-store/key={storeKey}/cart-discounts/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/cart-discounts/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/in-store/key={storeKey}/cart-discounts/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Pe{constructor(e){this.args=e}withKey(e){return new ke({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new Be({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/in-store/key={storeKey}/cart-discounts",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/in-store/key={storeKey}/cart-discounts",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/cart-discounts",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class ve{constructor(e){this.args=e}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/carts/replicate",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class _e{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/in-store/key={storeKey}/carts/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/in-store/key={storeKey}/carts/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/carts/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/in-store/key={storeKey}/carts/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Ie{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/in-store/key={storeKey}/carts/customer-id={customerId}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/in-store/key={storeKey}/carts/customer-id={customerId}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}}class Ve{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/in-store/key={storeKey}/carts/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/in-store/key={storeKey}/carts/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/carts/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/in-store/key={storeKey}/carts/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class De{constructor(e){this.args=e}withCustomerId(e){return new Ie({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withKey(e){return new Ve({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}replicate(){return new ve({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new _e({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/in-store/key={storeKey}/carts",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/in-store/key={storeKey}/carts",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/carts",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class Se{constructor(e){this.args=e}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/customers/email/confirm",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class Me{constructor(e){this.args=e}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/customers/email-token",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class Oe{constructor(e){this.args=e}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/customers/password-token",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class Le{constructor(e){this.args=e}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/customers/password",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class Ge{constructor(e){this.args=e}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/customers/password/reset",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class He{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/in-store/key={storeKey}/customers/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/in-store/key={storeKey}/customers/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/customers/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/in-store/key={storeKey}/customers/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Fe{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/in-store/key={storeKey}/customers/email-token={emailToken}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Ne{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/in-store/key={storeKey}/customers/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/in-store/key={storeKey}/customers/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/customers/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/in-store/key={storeKey}/customers/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class ze{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/in-store/key={storeKey}/customers/password-token={passwordToken}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class $e{constructor(e){this.args=e}withPasswordToken(e){return new ze({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withEmailToken(e){return new Fe({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}emailToken(){return new Me({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}emailConfirm(){return new Se({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}password(){return new Le({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}passwordReset(){return new Ge({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}passwordToken(){return new Oe({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withKey(e){return new Ne({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new He({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/in-store/key={storeKey}/customers",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/in-store/key={storeKey}/customers",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/customers",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class We{constructor(e){this.args=e}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/login",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class Ye{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/in-store/key={storeKey}/me/carts/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/in-store/key={storeKey}/me/carts/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/me/carts/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/in-store/key={storeKey}/me/carts/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Qe{constructor(e){this.args=e}withId(e){return new Ye({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/in-store/key={storeKey}/me/carts",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/in-store/key={storeKey}/me/carts",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/me/carts",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class Ze{constructor(e){this.args=e}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/me/email/confirm",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class Je{constructor(e){this.args=e}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/me/login",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class Xe{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/in-store/key={storeKey}/me/orders/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/in-store/key={storeKey}/me/orders/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}}class et{constructor(e){this.args=e}withId(e){return new Xe({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/in-store/key={storeKey}/me/orders",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/in-store/key={storeKey}/me/orders",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/me/orders",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class tt{constructor(e){this.args=e}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/me/password/reset",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class st{constructor(e){this.args=e}reset(){return new tt({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/me/password",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class rt{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/in-store/key={storeKey}/me/shopping-lists/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/in-store/key={storeKey}/me/shopping-lists/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/me/shopping-lists/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/in-store/key={storeKey}/me/shopping-lists/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class at{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/in-store/key={storeKey}/me/shopping-lists/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/in-store/key={storeKey}/me/shopping-lists/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/me/shopping-lists/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/in-store/key={storeKey}/me/shopping-lists/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class it{constructor(e){this.args=e}withKey(e){return new at({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new rt({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/in-store/key={storeKey}/me/shopping-lists",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/in-store/key={storeKey}/me/shopping-lists",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/me/shopping-lists",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class nt{constructor(e){this.args=e}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/me/signup",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class ot{constructor(e){this.args=e}carts(){return new Qe({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}orders(){return new et({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}activeCart(){return new o({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}shoppingLists(){return new it({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}emailConfirm(){return new Ze({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}password(){return new st({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}signup(){return new nt({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}login(){return new Je({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/in-store/key={storeKey}/me",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/me",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/in-store/key={storeKey}/me",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class ht{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/in-store/key={storeKey}/orders/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/in-store/key={storeKey}/orders/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/orders/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/in-store/key={storeKey}/orders/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class ut{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/in-store/key={storeKey}/orders/order-number={orderNumber}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/in-store/key={storeKey}/orders/order-number={orderNumber}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/orders/order-number={orderNumber}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/in-store/key={storeKey}/orders/order-number={orderNumber}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class ct{constructor(e){this.args=e}withOrderNumber(e){return new ut({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new ht({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/in-store/key={storeKey}/orders",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/in-store/key={storeKey}/orders",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/orders",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class pt{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/in-store/key={storeKey}/product-projections/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/in-store/key={storeKey}/product-projections/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}}class gt{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/in-store/key={storeKey}/product-projections/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/in-store/key={storeKey}/product-projections/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}}class dt{constructor(e){this.args=e}withKey(e){return new gt({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new pt({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}}class lt{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/in-store/key={storeKey}/product-selection-assignments",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class yt{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/in-store/key={storeKey}/product-tailoring",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/product-tailoring",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class At{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/in-store/key={storeKey}/products/{productID}/product-tailoring",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/products/{productID}/product-tailoring",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/in-store/key={storeKey}/products/{productID}/product-tailoring",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class bt{constructor(e){this.args=e}productTailoring(){return new At({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}}class mt{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/in-store/key={storeKey}/products/key={productKey}/product-tailoring",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/products/key={productKey}/product-tailoring",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/in-store/key={storeKey}/products/key={productKey}/product-tailoring",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class qt{constructor(e){this.args=e}productTailoring(){return new mt({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}}class ft{constructor(e){this.args=e}withProductId(e){return new bt({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withProductKey(e){return new qt({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}}class wt{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/in-store/key={storeKey}/shipping-methods/matching-cart",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/in-store/key={storeKey}/shipping-methods/matching-cart",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Ut{constructor(e){this.args=e}matchingCart(){return new wt({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}}class xt{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/in-store/key={storeKey}/shopping-lists/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/in-store/key={storeKey}/shopping-lists/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/shopping-lists/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/in-store/key={storeKey}/shopping-lists/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Ct{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/in-store/key={storeKey}/shopping-lists/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/in-store/key={storeKey}/shopping-lists/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/shopping-lists/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/in-store/key={storeKey}/shopping-lists/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Rt{constructor(e){this.args=e}withKey(e){return new Ct({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new xt({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/in-store/key={storeKey}/shopping-lists",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/in-store/key={storeKey}/shopping-lists",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/in-store/key={storeKey}/shopping-lists",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class Tt{constructor(e){this.args=e}carts(){return new De({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}orders(){return new ct({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}me(){return new ot({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}customers(){return new $e({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}login(){return new We({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}shippingMethods(){return new Ut({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}shoppingLists(){return new Rt({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}productProjections(){return new dt({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}productSelectionAssignments(){return new lt({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}cartDiscounts(){return new Pe({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}productTailoring(){return new yt({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}products(){return new ft({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}}class Et{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/inventory/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/inventory/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/inventory/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/inventory/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Kt{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/inventory/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/inventory/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/inventory/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/inventory/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class jt{constructor(e){this.args=e}withId(e){return new Et({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withKey(e){return new Kt({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/inventory",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/inventory",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/inventory",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class Bt{constructor(e){this.args=e}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/login",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class kt{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/me/business-units/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/me/business-units/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/me/business-units/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/me/business-units/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Pt{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/me/business-units/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/me/business-units/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/me/business-units/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/me/business-units/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class vt{constructor(e){this.args=e}withId(e){return new kt({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withKey(e){return new Pt({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/me/business-units",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/me/business-units",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/me/business-units",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class _t{constructor(e){this.args=e}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/me/carts/replicate",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class It{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/me/carts/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/me/carts/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/me/carts/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/me/carts/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Vt{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/me/carts/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/me/carts/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/me/carts/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/me/carts/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Dt{constructor(e){this.args=e}withKey(e){return new Vt({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new It({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}replicate(){return new _t({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/me/carts",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/me/carts",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/me/carts",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class St{constructor(e){this.args=e}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/me/email/confirm",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class Mt{constructor(e){this.args=e}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/me/login",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class Ot{constructor(e){this.args=e}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/me/orders/quotes",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class Lt{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/me/orders/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/me/orders/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}}class Gt{constructor(e){this.args=e}withId(e){return new Lt({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}orderQuote(){return new Ot({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/me/orders",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/me/orders",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/me/orders",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class Ht{constructor(e){this.args=e}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/me/password/reset",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class Ft{constructor(e){this.args=e}reset(){return new Ht({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/me/password",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class Nt{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/me/payments/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/me/payments/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/me/payments/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/me/payments/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class zt{constructor(e){this.args=e}withId(e){return new Nt({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/me/payments",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/me/payments",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/me/payments",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class $t{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/me/quote-requests/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/me/quote-requests/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/me/quote-requests/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/me/quote-requests/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Wt{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/me/quote-requests/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/me/quote-requests/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/me/quote-requests/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/me/quote-requests/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Yt{constructor(e){this.args=e}withId(e){return new $t({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withKey(e){return new Wt({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/me/quote-requests",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/me/quote-requests",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/me/quote-requests",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class Qt{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/me/quotes/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/me/quotes/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/me/quotes/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class Zt{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/me/quotes/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/me/quotes/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/me/quotes/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class Jt{constructor(e){this.args=e}withId(e){return new Qt({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withKey(e){return new Zt({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/me/quotes",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/me/quotes",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Xt{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/me/shopping-lists/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/me/shopping-lists/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/me/shopping-lists/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/me/shopping-lists/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class es{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/me/shopping-lists/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/me/shopping-lists/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/me/shopping-lists/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/me/shopping-lists/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class ts{constructor(e){this.args=e}withId(e){return new Xt({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withKey(e){return new es({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/me/shopping-lists",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/me/shopping-lists",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/me/shopping-lists",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class ss{constructor(e){this.args=e}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/me/signup",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class rs{constructor(e){this.args=e}emailConfirm(){return new St({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}password(){return new Ft({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}signup(){return new ss({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}login(){return new Mt({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}activeCart(){return new h({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}businessUnits(){return new vt({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}carts(){return new Dt({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}orders(){return new Gt({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}payments(){return new zt({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}quoteRequests(){return new Yt({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}quotes(){return new Jt({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}shoppingLists(){return new ts({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/me",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/me",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/me",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class as{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/messages/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/messages/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}}class is{constructor(e){this.args=e}withId(e){return new as({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/messages",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/messages",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class ns{constructor(e){this.args=e}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/orders/edits/{ID}/apply",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class os{constructor(e){this.args=e}apply(){return new ns({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/orders/edits/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/orders/edits/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/orders/edits/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/orders/edits/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class hs{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/orders/edits/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/orders/edits/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/orders/edits/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/orders/edits/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class us{constructor(e){this.args=e}withKey(e){return new hs({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new os({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/orders/edits",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/orders/edits",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/orders/edits",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class cs{constructor(e){this.args=e}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/orders/import",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class ps{constructor(e){this.args=e}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/orders/quotes",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class gs{constructor(e){this.args=e}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/orders/search",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/orders/search",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}}class ds{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/orders/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/orders/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/orders/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/orders/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class ls{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/orders/order-number={orderNumber}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/orders/order-number={orderNumber}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/orders/order-number={orderNumber}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/orders/order-number={orderNumber}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class ys{constructor(e){this.args=e}importOrder(){return new cs({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}orderQuote(){return new ps({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withOrderNumber(e){return new ls({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}edits(){return new us({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new ds({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}search(){return new gs({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/orders",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/orders",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/orders",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class As{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/payments/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/payments/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/payments/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/payments/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class bs{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/payments/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/payments/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/payments/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/payments/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class ms{constructor(e){this.args=e}withKey(e){return new bs({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new As({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/payments",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/payments",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/payments",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class qs{constructor(e){this.args=e}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/product-discounts/matching",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class fs{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/product-discounts/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/product-discounts/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/product-discounts/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/product-discounts/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class ws{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/product-discounts/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/product-discounts/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/product-discounts/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/product-discounts/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Us{constructor(e){this.args=e}matching(){return new qs({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withKey(e){return new ws({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new fs({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/product-discounts",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/product-discounts",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/product-discounts",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class xs{constructor(e){this.args=e}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/product-projections/search",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/x-www-form-urlencoded",...e?.headers},body:e?.body},this.args.executeRequest)}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/product-projections/search",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Cs{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/product-projections/suggest",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Rs{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/product-projections/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/product-projections/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}}class Ts{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/product-projections/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/product-projections/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}}class Es{constructor(e){this.args=e}search(){return new xs({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}suggest(){return new Cs({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withKey(e){return new Ts({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new Rs({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/product-projections",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/product-projections",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Ks{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/product-selections/{ID}/products",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class js{constructor(e){this.args=e}products(){return new Ks({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/product-selections/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/product-selections/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/product-selections/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/product-selections/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Bs{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/product-selections/key={key}/products",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class ks{constructor(e){this.args=e}products(){return new Bs({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/product-selections/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/product-selections/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/product-selections/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/product-selections/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Ps{constructor(e){this.args=e}withKey(e){return new ks({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new js({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/product-selections",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/product-selections",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/product-selections",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class vs{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/product-tailoring/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/product-tailoring/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/product-tailoring/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class _s{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/product-tailoring/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/product-tailoring/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/product-tailoring/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Is{constructor(e){this.args=e}withKey(e){return new _s({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new vs({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/product-tailoring",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/product-tailoring",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class Vs{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/product-types/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/product-types/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/product-types/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/product-types/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Ds{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/product-types/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/product-types/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/product-types/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/product-types/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Ss{constructor(e){this.args=e}withKey(e){return new Ds({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new Vs({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/product-types",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/product-types",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/product-types",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class Ms{constructor(e){this.args=e}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/products/search",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class Os{constructor(e){this.args=e}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/products/{ID}/images",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class Ls{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/products/{ID}/product-selections",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Gs{constructor(e){this.args=e}images(){return new Os({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}productSelections(){return new Ls({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/products/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/products/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/products/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/products/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Hs{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/products/key={key}/product-selections",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Fs{constructor(e){this.args=e}productSelections(){return new Hs({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/products/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/products/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/products/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/products/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Ns{constructor(e){this.args=e}withKey(e){return new Fs({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new Gs({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}search(){return new Ms({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/products",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/products",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/products",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class zs{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/quote-requests/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/quote-requests/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/quote-requests/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/quote-requests/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class $s{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/quote-requests/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/quote-requests/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/quote-requests/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/quote-requests/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Ws{constructor(e){this.args=e}withKey(e){return new $s({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new zs({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/quote-requests",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/quote-requests",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/quote-requests",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class Ys{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/quotes/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/quotes/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/quotes/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/quotes/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Qs{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/quotes/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/quotes/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/quotes/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/quotes/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Zs{constructor(e){this.args=e}withKey(e){return new Qs({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new Ys({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/quotes",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/quotes",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/quotes",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class Js{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/reviews/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/reviews/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/reviews/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/reviews/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Xs{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/reviews/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/reviews/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/reviews/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/reviews/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class er{constructor(e){this.args=e}withKey(e){return new Xs({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new Js({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/reviews",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/reviews",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/reviews",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class tr{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/shipping-methods/matching-cart-location",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/shipping-methods/matching-cart-location",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class sr{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/shipping-methods/matching-cart",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/shipping-methods/matching-cart",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class rr{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/shipping-methods/matching-location",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/shipping-methods/matching-location",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class ar{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/shipping-methods/matching-orderedit",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/shipping-methods/matching-orderedit",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class ir{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/shipping-methods/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/shipping-methods/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/shipping-methods/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/shipping-methods/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class nr{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/shipping-methods/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/shipping-methods/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/shipping-methods/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/shipping-methods/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class or{constructor(e){this.args=e}withKey(e){return new nr({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}matchingCart(){return new sr({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}matchingCartLocation(){return new tr({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}matchingOrderedit(){return new ar({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}matchingLocation(){return new rr({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new ir({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/shipping-methods",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/shipping-methods",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/shipping-methods",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class hr{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/shopping-lists/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/shopping-lists/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/shopping-lists/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/shopping-lists/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class ur{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/shopping-lists/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/shopping-lists/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/shopping-lists/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/shopping-lists/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class cr{constructor(e){this.args=e}withKey(e){return new ur({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new hr({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/shopping-lists",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/shopping-lists",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/shopping-lists",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class pr{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/staged-quotes/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/staged-quotes/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/staged-quotes/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/staged-quotes/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class gr{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/staged-quotes/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/staged-quotes/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/staged-quotes/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/staged-quotes/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class dr{constructor(e){this.args=e}withKey(e){return new gr({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new pr({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/staged-quotes",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/staged-quotes",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/staged-quotes",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class lr{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/standalone-prices/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/standalone-prices/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/standalone-prices/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/standalone-prices/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class yr{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/standalone-prices/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/standalone-prices/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/standalone-prices/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/standalone-prices/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Ar{constructor(e){this.args=e}withKey(e){return new yr({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new lr({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/standalone-prices",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/standalone-prices",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/standalone-prices",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class br{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/states/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/states/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/states/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/states/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class mr{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/states/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/states/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/states/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/states/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class qr{constructor(e){this.args=e}withKey(e){return new mr({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new br({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/states",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/states",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/states",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class fr{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/stores/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/stores/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/stores/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/stores/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class wr{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/stores/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/stores/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/stores/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/stores/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Ur{constructor(e){this.args=e}withKey(e){return new wr({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new fr({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/stores",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/stores",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/stores",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class xr{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/subscriptions/{ID}/health",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}}class Cr{constructor(e){this.args=e}withIdHealth(){return new xr({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/subscriptions/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/subscriptions/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/subscriptions/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/subscriptions/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Rr{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/subscriptions/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/subscriptions/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/subscriptions/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/subscriptions/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Tr{constructor(e){this.args=e}withKey(e){return new Rr({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new Cr({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/subscriptions",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/subscriptions",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/subscriptions",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class Er{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/tax-categories/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/tax-categories/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/tax-categories/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/tax-categories/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Kr{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/tax-categories/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/tax-categories/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/tax-categories/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/tax-categories/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class jr{constructor(e){this.args=e}withKey(e){return new Kr({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new Er({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/tax-categories",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/tax-categories",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/tax-categories",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class Br{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/types/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/types/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/types/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/types/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class kr{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/types/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/types/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/types/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/types/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Pr{constructor(e){this.args=e}withKey(e){return new kr({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new Br({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/types",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/types",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/types",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class vr{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/zones/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/zones/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/zones/{ID}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/zones/{ID}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class _r{constructor(e){this.args=e}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/zones/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/zones/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/zones/key={key}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}delete(e){return new n({baseUri:this.args.baseUri,method:"DELETE",uriTemplate:"/{projectKey}/zones/key={key}",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}}class Ir{constructor(e){this.args=e}withKey(e){return new _r({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}withId(e){return new vr({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}/zones",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}/zones",pathVariables:this.args.pathArgs,headers:{...e?.headers},queryParams:e?.queryArgs},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}/zones",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},queryParams:e?.queryArgs,body:e?.body},this.args.executeRequest)}}class Vr{constructor(e){this.args=e}asAssociate(){return new I({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}associateRoles(){return new S({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}businessUnits(){return new F({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}categories(){return new te({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}carts(){return new J({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}cartDiscounts(){return new $({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}channels(){return new re({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}customers(){return new qe({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}customerGroups(){return new ue({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}customObjects(){return new ne({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}discountCodes(){return new Ue({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}graphql(){return new Te({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}inventory(){return new jt({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}login(){return new Bt({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}messages(){return new is({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}orders(){return new ys({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}payments(){return new ms({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}products(){return new Ns({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}productDiscounts(){return new Us({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}productProjections(){return new Es({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}productSelections(){return new Ps({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}productTailoring(){return new Is({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}productTypes(){return new Ss({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}quotes(){return new Zs({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}quoteRequests(){return new Ws({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}stagedQuotes(){return new dr({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}reviews(){return new er({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}shippingMethods(){return new or({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}shoppingLists(){return new cr({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}states(){return new qr({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}subscriptions(){return new Tr({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}taxCategories(){return new jr({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}types(){return new Pr({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}zones(){return new Ir({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}me(){return new rs({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}extensions(){return new Re({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}apiClients(){return new c({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}stores(){return new Ur({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}inStoreKeyWithStoreKeyValue(e){return new Tt({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}standalonePrices(){return new Ar({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}inBusinessUnitKeyWithBusinessUnitKeyValue(e){return new je({pathArgs:{...this.args.pathArgs,...e},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}attributeGroups(){return new L({pathArgs:{...this.args.pathArgs},executeRequest:this.args.executeRequest,baseUri:this.args.baseUri})}get(e){return new n({baseUri:this.args.baseUri,method:"GET",uriTemplate:"/{projectKey}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}head(e){return new n({baseUri:this.args.baseUri,method:"HEAD",uriTemplate:"/{projectKey}",pathVariables:this.args.pathArgs,headers:{...e?.headers}},this.args.executeRequest)}post(e){return new n({baseUri:this.args.baseUri,method:"POST",uriTemplate:"/{projectKey}",pathVariables:this.args.pathArgs,headers:{"Content-Type":"application/json",...e?.headers},body:e?.body},this.args.executeRequest)}}class Dr{constructor(e){r(this,"executeRequest",void 0),r(this,"baseUri",void 0),this.executeRequest=e.executeRequest,this.baseUri=e.baseUri||"https://api.europe-west1.gcp.commercetools.com"}withProjectKey(e){return new Vr({pathArgs:{...e},executeRequest:this.executeRequest,baseUri:this.baseUri})}}const Sr=(e,t)=>t&&0!=t.length?Or(t.reduce(Mr),e):e;function Mr(e,t){return(s,r)=>e(s,Or(t,r))}function Or(e,t){return s=>e(s,t)}function Lr(e,t){return new Dr({executeRequest:e.execute,baseUri:t})}},6467:(e,t,s)=>{"use strict";s.r(t),s.d(t,{ClientBuilder:()=>ne,Process:()=>A,createAuthForAnonymousSessionFlow:()=>T,createAuthForClientCredentialsFlow:()=>K,createAuthForPasswordFlow:()=>B,createAuthForRefreshTokenFlow:()=>k,createAuthWithExistingToken:()=>j,createClient:()=>b,createCorrelationIdMiddleware:()=>v,createHttpClient:()=>Y,createLoggerMiddleware:()=>Q,createQueueMiddleware:()=>Z,createUserAgentMiddleware:()=>ee,getErrorByCode:()=>F});var r=s(3092),a=s.n(r),i=s(8287);function n(e,t,s){return(t="symbol"==typeof(r=function(e,t){if("object"!=typeof e||!e)return e;var s=e[Symbol.toPrimitive];if(void 0!==s){var r=s.call(e,"string");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(t))?r:r+"")in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e;var r}function o(e){return null!=e}function h(e){const t={},s=new URLSearchParams(e);for(let e of s.keys())s.getAll(e).length>1?t[e]=s.getAll(e):t[e]=s.get(e);return t}function u(e){var t;if(!(e=o(t=e)?"string"==typeof t?t:Object.fromEntries(Object.entries(t).filter((([e,t])=>![null,void 0,""].includes(t)))):""))return"";const s=new URLSearchParams(e);for(const[t,r]of Object.entries(e))Array.isArray(r)&&(s.delete(t),r.filter(o).forEach((e=>s.append(t,e))));return s.toString()}function c(e,t=h){return t(e)}function p(e,t=u){return t(e)}var g=["ACL","BIND","CHECKOUT","CONNECT","COPY","DELETE","GET","HEAD","LINK","LOCK","M-SEARCH","MERGE","MKACTIVITY","MKCALENDAR","MKCOL","MOVE","NOTIFY","OPTIONS","PATCH","POST","PROPFIND","PROPPATCH","PURGE","PUT","REBIND","REPORT","SEARCH","SOURCE","SUBSCRIBE","TRACE","UNBIND","UNLINK","UNLOCK","UNSUBSCRIBE"];function d(e,t,s={allowedMethods:g}){if(!t)throw new Error(`The "${e}" function requires a "Request" object as an argument. See https://commercetools.github.io/nodejs/sdk/Glossary.html#clientrequest`);if("string"!=typeof t.uri)throw new Error(`The "${e}" Request object requires a valid uri. See https://commercetools.github.io/nodejs/sdk/Glossary.html#clientrequest`);if(!s.allowedMethods.includes(t.method))throw new Error(`The "${e}" Request object requires a valid method. See https://commercetools.github.io/nodejs/sdk/Glossary.html#clientrequest`)}let l;const y=20;function A(e,t,s){if(d("process",e,{allowedMethods:["GET"]}),"function"!=typeof t)throw new Error('The "process" function accepts a "Function" as a second argument that returns a Promise. See https://commercetools.github.io/nodejs/sdk/api/sdkClient.html#processrequest-processfn-options');const r={limit:y,total:Number.POSITIVE_INFINITY,accumulate:!0,...s};return new Promise(((s,a)=>{let i,n="";if(e&&e.uri){const[t,s]=e.uri.split("?");i=t,n=s}const o={...c(n)},h={limit:r.limit,...o};let u=!1,g=r.total;const d=async(n,o=[])=>{const c=h.limit<g?h.limit:g,y=p({...h,limit:c}),A=p({sort:r.sort||"id asc",withTotal:!1,...n?{where:`id > "${n}"`}:{}}),m={...e,uri:`${i}?${A}&${y}`};try{const e=await b(l).execute(m),{results:a,count:i}=e.body;if(!i&&u)return s(o||[]);const n=await Promise.resolve(t(e));let c=[];if(u=!0,r.accumulate&&(c=o.concat(n||[])),g-=i,i<h.limit||!g)return s(c||[]);const p=a[i-1],y=p&&p.id;d(y,c)}catch(e){a(e)}};d()}))}function b(e){if(l=e,!e)throw new Error("Missing required options");if(e.middlewares&&!Array.isArray(e.middlewares))throw new Error("Middlewares should be an array");if(!e.middlewares||!Array.isArray(e.middlewares)||!e.middlewares.length)throw new Error("You need to provide at least one middleware");return{process:A,execute:t=>(d("exec",t),new Promise(((s,r)=>{!function(...e){return 1===(e=e.filter((e=>"function"==typeof e))).length?e[0]:e.reduce(((e,t)=>(...s)=>e(t(...s))))}(...e.middlewares)(((e,t)=>{if(t.error)t.reject(t.error);else{const e={body:t.body||{},statusCode:t.statusCode};t.headers&&(e.headers=t.headers),t.request&&(e.request=t.request),t.resolve(e)}}))(t,{resolve:s,reject:r,body:void 0,error:void 0})})))}}function m(e){if(!e)throw new Error("Missing required options");if(!e.host)throw new Error("Missing required option (host)");if(!e.projectKey)throw new Error("Missing required option (projectKey)");if(!e.credentials)throw new Error("Missing required option (credentials)");const{clientId:t,clientSecret:s}=e.credentials;if(!t||!s)throw new Error("Missing required credentials (clientId, clientSecret)");const r=e.scopes?e.scopes.join(" "):void 0,a=i.hp.from(`${t}:${s}`).toString("base64"),n=e.oauthUri||"/oauth/token";return{basicAuth:a,url:e.host.replace(/\/$/,"")+n,body:"grant_type=client_credentials"+(r?`&scope=${r}`:"")}}function q(e){if(!e)throw new Error("Missing required options");if(!e.host)throw new Error("Missing required option (host)");if(!e.projectKey)throw new Error("Missing required option (projectKey)");if(!e.credentials)throw new Error("Missing required option (credentials)");const{clientId:t,clientSecret:s,user:r}=e.credentials,a=e.projectKey;if(!(t&&s&&r))throw new Error("Missing required credentials (clientId, clientSecret, user)");const{username:n,password:o}=r;if(!n||!o)throw new Error("Missing required user credentials (username, password)");const h=(e.scopes||[]).join(" "),u=h?`&scope=${h}`:"",c=i.hp.from(`${t}:${s}`).toString("base64"),p=e.oauthUri||`/oauth/${a}/customers/token`;return{basicAuth:c,url:e.host.replace(/\/$/,"")+p,body:`grant_type=password&username=${encodeURIComponent(n)}&password=${encodeURIComponent(o)}${u}`}}function f(e){if(!e)throw new Error("Missing required options");if(!e.host)throw new Error("Missing required option (host)");if(!e.projectKey)throw new Error("Missing required option (projectKey)");if(!e.credentials)throw new Error("Missing required option (credentials)");if(!e.refreshToken)throw new Error("Missing required option (refreshToken)");const{clientId:t,clientSecret:s}=e.credentials;if(!t||!s)throw new Error("Missing required credentials (clientId, clientSecret)");const r=i.hp.from(`${t}:${s}`).toString("base64"),a=e.oauthUri||"/oauth/token";return{basicAuth:r,url:e.host.replace(/\/$/,"")+a,body:`grant_type=refresh_token&refresh_token=${encodeURIComponent(e.refreshToken)}`}}function w(e){if(!e)throw new Error("Missing required options");if(!e.projectKey)throw new Error("Missing required option (projectKey)");const t=e.projectKey;e.oauthUri=e.oauthUri||`/oauth/${t}/anonymous/token`;const s=m(e);return e.credentials.anonymousId&&(s.body+=`&anonymous_id=${e.credentials.anonymousId}`),{...s}}function U(e,t){return{...t,headers:{...t.headers,Authorization:`Bearer ${e}`}}}async function x({fetcher:e,url:t,basicAuth:s,body:r,tokenCache:a,requestState:n,pendingTasks:o,response:h,tokenCacheKey:u}){try{const c=await e(t,{method:"POST",headers:{Authorization:`Basic ${s}`,"Content-Length":i.hp.byteLength(r).toString(),"Content-Type":"application/x-www-form-urlencoded"},body:r});if(c.ok){const{access_token:e,expires_in:t,refresh_token:s}=await c.json(),r=function(e){return Date.now()+1e3*e-3e5}(t);a.set({token:e,expirationTime:r,refreshToken:s},u),n.set(!1);const i=o.slice();return o=[],void i.forEach((t=>{const s=U(e,t.request);t.next(s,t.response)}))}let p;const g=await c.text();try{p=JSON.parse(g)}catch(e){}const d=new Error(p?p.message:g);p&&(d.body=p),n.set(!1),h.reject(d)}catch(e){n.set(!1),h&&"function"==typeof h.reject&&h.reject(e)}}function C({request:e,response:t,url:s,basicAuth:r,body:a,pendingTasks:i,requestState:n,tokenCache:o,tokenCacheKey:h,fetch:u},c,p){if(!u&&"undefined"==typeof fetch)throw new Error("`fetch` is not available. Please pass in `fetch` as an option or have it globally available.");if(u||(u=fetch),e.headers&&e.headers.authorization||e.headers&&e.headers.Authorization)return void c(e,t);const g=o.get(h);if(g&&g.token&&Date.now()<g.expirationTime)c(U(g.token,e),t);else if(i.push({request:e,response:t,next:c}),!n.get())if(n.set(!0),g&&g.refreshToken&&(!g.token||g.token&&Date.now()>g.expirationTime)){if(!p)throw new Error("Missing required options");x({fetcher:u,...f({...p,refreshToken:g.refreshToken}),tokenCacheKey:h,tokenCache:o,requestState:n,pendingTasks:i,response:t})}else x({fetcher:u,url:s,basicAuth:r,body:a,tokenCacheKey:h,tokenCache:o,requestState:n,pendingTasks:i,response:t})}function R(e){let t=e;return{get:e=>t,set:(e,s)=>{t=e}}}function T(e){const t=e.tokenCache||R({token:"",expirationTime:-1}),s=[],r=R(!1);return a=>(i,n)=>{i.headers&&i.headers.authorization||i.headers&&i.headers.Authorization?a(i,n):C({request:i,response:n,...w(e),pendingTasks:s,requestState:r,tokenCache:t,fetch:e.fetch},a,e)}}function E(e){return{clientId:e.credentials.clientId,host:e.host,projectKey:e.projectKey}}function K(e){const t=e.tokenCache||R({token:"",expirationTime:-1}),s=R(!1),r=[];return a=>(i,n)=>{i.headers&&i.headers.authorization||i.headers&&i.headers.Authorization?a(i,n):C({request:i,response:n,...m(e),pendingTasks:r,requestState:s,tokenCache:t,tokenCacheKey:E(e),fetch:e.fetch},a)}}function j(e="",t={}){return s=>(r,a)=>{if("string"!=typeof e)throw new Error("authorization must be a string");const i=void 0===t.force||t.force;if(!e||(r.headers&&r.headers.authorization||r.headers&&r.headers.Authorization)&&!1===i)return s(r,a);const n={...r,headers:{...r.headers,Authorization:e}};return s(n,a)}}function B(e){const t=e.tokenCache||R({}),s=[],r=R(!1);return a=>(i,n)=>{i.headers&&i.headers.authorization||i.headers&&i.headers.Authorization?a(i,n):C({request:i,response:n,...q(e),pendingTasks:s,requestState:r,tokenCache:t,fetch:e.fetch},a,e)}}function k(e){const t=e.tokenCache||R({token:"",expirationTime:-1}),s=[],r=R(!1);return a=>(i,n)=>{i.headers&&i.headers.authorization||i.headers&&i.headers.Authorization?a(i,n):C({request:i,response:n,...f(e),pendingTasks:s,requestState:r,tokenCache:t,fetch:e.fetch},a)}}var P=Object.freeze({__proto__:null,createAuthMiddlewareForAnonymousSessionFlow:T,createAuthMiddlewareForClientCredentialsFlow:K,createAuthMiddlewareWithExistingToken:j,createAuthMiddlewareForPasswordFlow:B,createAuthMiddlewareForRefreshTokenFlow:k});function v(e){return t=>(s,r)=>{const a={...s,headers:{...s.headers,"X-Correlation-ID":e.generate()}};t(a,r)}}function _(e,t,s={}){this.status=this.statusCode=this.code=e,this.message=t,Object.assign(this,s),this.name=this.constructor.name,this.constructor.prototype.__proto__=Error.prototype,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}function I(...e){_.call(this,0,...e)}function V(...e){_.call(this,...e)}function D(...e){_.call(this,400,...e)}function S(...e){_.call(this,401,...e)}function M(...e){_.call(this,403,...e)}function O(...e){_.call(this,404,...e)}function L(...e){_.call(this,409,...e)}function G(...e){_.call(this,500,...e)}function H(...e){_.call(this,503,...e)}function F(e){switch(e){case 0:return I;case 400:return D;case 401:return S;case 403:return M;case 404:return O;case 409:return L;case 500:return G;case 503:return H;default:return}}function N(e){if(e.raw)return e.raw();if(!e.forEach)return{};const t={};return e.forEach(((e,s)=>{t[s]=e})),t}function z(e){return null!=e&&null!=e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}function $(e,t,s,r,a){return r&&0!==e?Math.min(Math.round((Math.random()+1)*t*2**e),a):t}function W(e,t){t&&(e&&e.headers&&e.headers.authorization&&(e.headers.authorization="Bearer ********"),e&&e.headers&&e.headers.Authorization&&(e.headers.Authorization="Bearer ********"))}function Y({host:e,credentialsMode:t,includeResponseHeaders:s,includeOriginalRequest:r,includeRequestInErrorResponse:a=!0,maskSensitiveHeaderData:n=!0,headersWithStringBody:o=[],enableRetry:h,timeout:u,retryConfig:{maxRetries:c=10,backoff:p=!0,retryDelay:g=200,maxDelay:d=1/0,retryOnAbort:l=!1,retryCodes:y=[503]}={},fetch:A,getAbortController:b}){if(!A)throw new Error("`fetch` is not available. Please pass in `fetch` as an option or have it globally available.");if(u&&!b)throw new Error("`AbortController` is not available. Please pass in `getAbortController` as an option or have AbortController globally available when using timeout.");let m;if(m=A||fetch,!Array.isArray(y))throw new Error("`retryCodes` option must be an array of retry status (error) codes.");if(!Array.isArray(o))throw new Error("`headersWithStringBody` option must be an array of strings");return A=>(q,f)=>{const w=e.replace(/\/$/,"")+q.uri,U={...q.headers};Object.prototype.hasOwnProperty.call(U,"Content-Type")||Object.prototype.hasOwnProperty.call(U,"content-type")||(U["Content-Type"]="application/json"),null===U["Content-Type"]&&delete U["Content-Type"];const x=["application/json","application/graphql",...o].indexOf(U["Content-Type"])>-1&&"string"==typeof q.body||z(q.body)?q.body:JSON.stringify(q.body||void 0);x&&("string"==typeof x||z(x))&&(U["Content-Length"]=i.hp.byteLength(x).toString());const C={method:q.method,headers:U};t&&(C.credentialsMode=t),x&&(C.body=x);let R=0;!function e(){let t,i;u&&(i=(b?b():null)||new AbortController,C.signal=i.signal,t=setTimeout((()=>{i.abort()}),u)),m(w,C).then((t=>{if(t.ok)return"HEAD"===C.method?void A(q,{...f,statusCode:t.status}):void t.text().then((a=>{let i;try{i=a.length>0?JSON.parse(a):{}}catch(t){if(h&&R<c)return setTimeout(e,$(R,g,0,p,d)),void(R+=1);i=a}const o={...f,body:i,statusCode:t.status};s&&(o.headers=N(t.headers)),r&&(o.request={...C},W(o.request,n)),A(q,o)})).catch((t=>{if(h&&R<c)return setTimeout(e,$(R,g,0,p,d)),void(R+=1);const s=new I(t.message,{...a?{originalRequest:q}:{},retryCount:R});W(s.originalRequest,n),A(q,{...f,error:s,statusCode:0})}));t.text().then((s=>{let r;try{r=JSON.parse(s)}catch(i){r=s}const i=function({statusCode:e,message:t,...s}){let r=t||"Unexpected non-JSON error response";404===e&&(r=`URI not found: ${s.originalRequest?.uri||s.uri}`,delete s.uri);const a=F(e);return a?new a(r,s):new V(e,r,s)}({statusCode:t.status,...a?{originalRequest:q}:404===t.status?{uri:q.uri}:{},retryCount:R,headers:N(t.headers),..."object"==typeof r?{message:r.message,body:r}:{message:r,body:r}});if(h&&(-1!==y.indexOf(i.statusCode)||-1!==y?.indexOf(i.message))&&R<c)return setTimeout(e,$(R,g,0,p,d)),void(R+=1);W(i.originalRequest,n);const o={...f,error:i,statusCode:t.status};A(q,o)}))}),(t=>{if(h&&(l||!i||!i.signal)&&R<c)return setTimeout(e,$(R,g,0,p,d)),void(R+=1);const s=new I(t.message,{...a?{originalRequest:q}:{},retryCount:R});W(s.originalRequest,n),A(q,{...f,error:s,statusCode:0})})).finally((()=>{clearTimeout(t)}))}()}}function Q(){return e=>(t,s)=>{const{error:r,body:a,statusCode:i}=s;console.log("Request: ",t),console.log("Response: ",{error:r,body:a,statusCode:i}),e(t,s)}}function Z({concurrency:e=20}){const t=[];let s=0;const r=r=>{if(s-=1,t.length&&s<=e){const e=t.shift();s+=1,r(e.request,e.response)}};return a=>(i,n)=>{const o={...n,resolve(e){n.resolve(e),r(a)},reject(e){n.reject(e),r(a)}};if(t.push({request:i,response:o}),s<e){const e=t.shift();s+=1,a(e.request,e.response)}}}var J={name:"@commercetools/sdk-client-v2",version:"2.5.0",engines:{node:">=14"},description:"commercetools Composable Commerce TypeScript SDK client.",keywords:["commercetools","composable commerce","sdk","typescript","client","middleware","http","oauth","auth"],homepage:"https://github.com/commercetools/commercetools-sdk-typescript",license:"MIT",directories:{lib:"lib",test:"test"},publishConfig:{access:"public"},repository:{type:"git",url:"git+https://github.com/commercetools/commercetools-sdk-typescript.git"},bugs:{url:"https://github.com/commercetools/commercetools-sdk-typescript/issues"},dependencies:{buffer:"^6.0.3","node-fetch":"^2.6.1"},files:["dist","CHANGELOG.md"],author:"Chukwuemeka Ajima <meeky.ae@gmail.com>",main:"dist/commercetools-sdk-client-v2.cjs.js",module:"dist/commercetools-sdk-client-v2.esm.js",browser:{"./dist/commercetools-sdk-client-v2.cjs.js":"./dist/commercetools-sdk-client-v2.browser.cjs.js","./dist/commercetools-sdk-client-v2.esm.js":"./dist/commercetools-sdk-client-v2.browser.esm.js"},devDependencies:{"abort-controller":"3.0.0","common-tags":"1.8.2",dotenv:"16.4.5",jest:"29.7.0",nock:"12.0.3","organize-imports-cli":"0.10.0"},scripts:{organize_imports:"find src -type f -name '*.ts' | xargs organize-imports-cli",postbuild:"yarn organize_imports",post_process_generate:"yarn organize_imports"}};const X=()=>window.document&&9===window.document.nodeType;function ee(e){const t=function(e){if(!e||0===Object.keys(e).length||!{}.hasOwnProperty.call(e,"name"))throw new Error("Missing required option `name`");const t=e.version?`${e.name}/${e.version}`:e.name;let s=null;e.libraryName&&!e.libraryVersion?s=e.libraryName:e.libraryName&&e.libraryVersion&&(s=`${e.libraryName}/${e.libraryVersion}`);let r=null;return e.contactUrl&&!e.contactEmail?r=`(+${e.contactUrl})`:!e.contactUrl&&e.contactEmail?r=`(+${e.contactEmail})`:e.contactUrl&&e.contactEmail&&(r=`(+${e.contactUrl}; +${e.contactEmail})`),[t,X()?window.navigator.userAgent:`node.js/${process?.version.slice(1)||"12"}`,s,r,e.customAgent||""].filter(Boolean).join(" ")}({...e,name:`commercetools-sdk-javascript-v2/${J.version}`});return e=>(s,r)=>{const a={...s,headers:{...s.headers,"User-Agent":t}};e(a,r)}}const{createAuthMiddlewareForPasswordFlow:te,createAuthMiddlewareForAnonymousSessionFlow:se,createAuthMiddlewareForClientCredentialsFlow:re,createAuthMiddlewareForRefreshTokenFlow:ae,createAuthMiddlewareWithExistingToken:ie}=P;class ne{constructor(){n(this,"projectKey",void 0),n(this,"authMiddleware",void 0),n(this,"httpMiddleware",void 0),n(this,"userAgentMiddleware",void 0),n(this,"correlationIdMiddleware",void 0),n(this,"loggerMiddleware",void 0),n(this,"queueMiddleware",void 0),n(this,"telemetryMiddleware",void 0),n(this,"beforeMiddleware",void 0),n(this,"afterMiddleware",void 0),n(this,"middlewares",[])}withProjectKey(e){return this.projectKey=e,this}defaultClient(e,t,s,r){return this.withClientCredentialsFlow({host:s,projectKey:r||this.projectKey,credentials:t}).withHttpMiddleware({host:e,fetch:a()}).withLoggerMiddleware().withUserAgentMiddleware()}withAuthMiddleware(e){return this.authMiddleware=e,this}withMiddleware(e){return this.middlewares.push(e),this}withClientCredentialsFlow(e){return this.withAuthMiddleware(re({host:e.host||"https://auth.europe-west1.gcp.commercetools.com",projectKey:e.projectKey||this.projectKey,credentials:{clientId:e.credentials.clientId||"",clientSecret:e.credentials.clientSecret||""},oauthUri:e.oauthUri||"",scopes:e.scopes,fetch:e.fetch||a(),...e}))}withPasswordFlow(e){return this.withAuthMiddleware(te({host:e.host||"https://auth.europe-west1.gcp.commercetools.com",projectKey:e.projectKey||this.projectKey,credentials:{clientId:e.credentials.clientId||"",clientSecret:e.credentials.clientSecret||"",user:{username:e.credentials.user.username||"",password:e.credentials.user.password||""}},fetch:e.fetch||a(),...e}))}withAnonymousSessionFlow(e){return this.withAuthMiddleware(se({host:e.host||"https://auth.europe-west1.gcp.commercetools.com",projectKey:this.projectKey||e.projectKey,credentials:{clientId:e.credentials.clientId||"",clientSecret:e.credentials.clientSecret||"",anonymousId:e.credentials.anonymousId||""},fetch:e.fetch||a(),...e}))}withRefreshTokenFlow(e){return this.withAuthMiddleware(ae({host:e.host||"https://auth.europe-west1.gcp.commercetools.com",projectKey:this.projectKey||e.projectKey,credentials:{clientId:e.credentials.clientId||"",clientSecret:e.credentials.clientSecret||""},fetch:e.fetch||a(),refreshToken:e.refreshToken||"",...e}))}withExistingTokenFlow(e,t){return this.withAuthMiddleware(ie(e,{force:t.force||!0,...t}))}withHttpMiddleware(e){return this.httpMiddleware=Y({host:e.host||"https://api.europe-west1.gcp.commercetools.com",fetch:e.fetch||a(),...e}),this}withUserAgentMiddleware(e){return this.userAgentMiddleware=ee(e),this}withQueueMiddleware(e){return this.queueMiddleware=Z({concurrency:e.concurrency||20,...e}),this}withLoggerMiddleware(e){const{logger:t,...s}=e||{};return this.loggerMiddleware="function"==typeof e?.logger&&e.logger(s)||Q(),this}withCorrelationIdMiddleware(e){return this.correlationIdMiddleware=v({generate:e.generate||null,...e}),this}withTelemetryMiddleware(e){const{createTelemetryMiddleware:t,...s}=e;return this.withUserAgentMiddleware({customAgent:s?.userAgent||"typescript-sdk-apm-middleware"}),this.telemetryMiddleware=t(s),this}withBeforeExecutionMiddleware(e){const{middleware:t,...s}=e||{};return this.beforeMiddleware=e.middleware(s),this}withAfterExecutionMiddleware(e){const{middleware:t,...s}=e||{};return this.afterMiddleware=e.middleware(s),this}build(){const e=this.middlewares.slice();return this.telemetryMiddleware&&e.push(this.telemetryMiddleware),this.correlationIdMiddleware&&e.push(this.correlationIdMiddleware),this.userAgentMiddleware&&e.push(this.userAgentMiddleware),this.authMiddleware&&e.push(this.authMiddleware),this.beforeMiddleware&&e.push(this.beforeMiddleware),this.queueMiddleware&&e.push(this.queueMiddleware),this.httpMiddleware&&e.push(this.httpMiddleware),this.afterMiddleware&&e.push(this.afterMiddleware),this.loggerMiddleware&&e.push(this.loggerMiddleware),b({middlewares:e})}}},7526:(e,t)=>{"use strict";t.byteLength=function(e){var t=o(e),s=t[0],r=t[1];return 3*(s+r)/4-r},t.toByteArray=function(e){var t,s,i=o(e),n=i[0],h=i[1],u=new a(function(e,t,s){return 3*(t+s)/4-s}(0,n,h)),c=0,p=h>0?n-4:n;for(s=0;s<p;s+=4)t=r[e.charCodeAt(s)]<<18|r[e.charCodeAt(s+1)]<<12|r[e.charCodeAt(s+2)]<<6|r[e.charCodeAt(s+3)],u[c++]=t>>16&255,u[c++]=t>>8&255,u[c++]=255&t;return 2===h&&(t=r[e.charCodeAt(s)]<<2|r[e.charCodeAt(s+1)]>>4,u[c++]=255&t),1===h&&(t=r[e.charCodeAt(s)]<<10|r[e.charCodeAt(s+1)]<<4|r[e.charCodeAt(s+2)]>>2,u[c++]=t>>8&255,u[c++]=255&t),u},t.fromByteArray=function(e){for(var t,r=e.length,a=r%3,i=[],n=16383,o=0,u=r-a;o<u;o+=n)i.push(h(e,o,o+n>u?u:o+n));return 1===a?(t=e[r-1],i.push(s[t>>2]+s[t<<4&63]+"==")):2===a&&(t=(e[r-2]<<8)+e[r-1],i.push(s[t>>10]+s[t>>4&63]+s[t<<2&63]+"=")),i.join("")};for(var s=[],r=[],a="undefined"!=typeof Uint8Array?Uint8Array:Array,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",n=0;n<64;++n)s[n]=i[n],r[i.charCodeAt(n)]=n;function o(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var s=e.indexOf("=");return-1===s&&(s=t),[s,s===t?0:4-s%4]}function h(e,t,r){for(var a,i,n=[],o=t;o<r;o+=3)a=(e[o]<<16&16711680)+(e[o+1]<<8&65280)+(255&e[o+2]),n.push(s[(i=a)>>18&63]+s[i>>12&63]+s[i>>6&63]+s[63&i]);return n.join("")}r["-".charCodeAt(0)]=62,r["_".charCodeAt(0)]=63},8287:(e,t,s)=>{"use strict";const r=s(7526),a=s(251),i="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;t.hp=h,t.IS=50;const n=2147483647;function o(e){if(e>n)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,h.prototype),t}function h(e,t,s){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return p(e)}return u(e,t,s)}function u(e,t,s){if("string"==typeof e)return function(e,t){if("string"==typeof t&&""!==t||(t="utf8"),!h.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const s=0|y(e,t);let r=o(s);const a=r.write(e,t);return a!==s&&(r=r.slice(0,a)),r}(e,t);if(ArrayBuffer.isView(e))return function(e){if(Y(e,Uint8Array)){const t=new Uint8Array(e);return d(t.buffer,t.byteOffset,t.byteLength)}return g(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(Y(e,ArrayBuffer)||e&&Y(e.buffer,ArrayBuffer))return d(e,t,s);if("undefined"!=typeof SharedArrayBuffer&&(Y(e,SharedArrayBuffer)||e&&Y(e.buffer,SharedArrayBuffer)))return d(e,t,s);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const r=e.valueOf&&e.valueOf();if(null!=r&&r!==e)return h.from(r,t,s);const a=function(e){if(h.isBuffer(e)){const t=0|l(e.length),s=o(t);return 0===s.length||e.copy(s,0,0,t),s}return void 0!==e.length?"number"!=typeof e.length||Q(e.length)?o(0):g(e):"Buffer"===e.type&&Array.isArray(e.data)?g(e.data):void 0}(e);if(a)return a;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return h.from(e[Symbol.toPrimitive]("string"),t,s);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function c(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function p(e){return c(e),o(e<0?0:0|l(e))}function g(e){const t=e.length<0?0:0|l(e.length),s=o(t);for(let r=0;r<t;r+=1)s[r]=255&e[r];return s}function d(e,t,s){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(s||0))throw new RangeError('"length" is outside of buffer bounds');let r;return r=void 0===t&&void 0===s?new Uint8Array(e):void 0===s?new Uint8Array(e,t):new Uint8Array(e,t,s),Object.setPrototypeOf(r,h.prototype),r}function l(e){if(e>=n)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+n.toString(16)+" bytes");return 0|e}function y(e,t){if(h.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||Y(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const s=e.length,r=arguments.length>2&&!0===arguments[2];if(!r&&0===s)return 0;let a=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return s;case"utf8":case"utf-8":return z(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*s;case"hex":return s>>>1;case"base64":return $(e).length;default:if(a)return r?-1:z(e).length;t=(""+t).toLowerCase(),a=!0}}function A(e,t,s){let r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===s||s>this.length)&&(s=this.length),s<=0)return"";if((s>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return B(this,t,s);case"utf8":case"utf-8":return T(this,t,s);case"ascii":return K(this,t,s);case"latin1":case"binary":return j(this,t,s);case"base64":return R(this,t,s);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return k(this,t,s);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function b(e,t,s){const r=e[t];e[t]=e[s],e[s]=r}function m(e,t,s,r,a){if(0===e.length)return-1;if("string"==typeof s?(r=s,s=0):s>2147483647?s=2147483647:s<-2147483648&&(s=-2147483648),Q(s=+s)&&(s=a?0:e.length-1),s<0&&(s=e.length+s),s>=e.length){if(a)return-1;s=e.length-1}else if(s<0){if(!a)return-1;s=0}if("string"==typeof t&&(t=h.from(t,r)),h.isBuffer(t))return 0===t.length?-1:q(e,t,s,r,a);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?a?Uint8Array.prototype.indexOf.call(e,t,s):Uint8Array.prototype.lastIndexOf.call(e,t,s):q(e,[t],s,r,a);throw new TypeError("val must be string, number or Buffer")}function q(e,t,s,r,a){let i,n=1,o=e.length,h=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;n=2,o/=2,h/=2,s/=2}function u(e,t){return 1===n?e[t]:e.readUInt16BE(t*n)}if(a){let r=-1;for(i=s;i<o;i++)if(u(e,i)===u(t,-1===r?0:i-r)){if(-1===r&&(r=i),i-r+1===h)return r*n}else-1!==r&&(i-=i-r),r=-1}else for(s+h>o&&(s=o-h),i=s;i>=0;i--){let s=!0;for(let r=0;r<h;r++)if(u(e,i+r)!==u(t,r)){s=!1;break}if(s)return i}return-1}function f(e,t,s,r){s=Number(s)||0;const a=e.length-s;r?(r=Number(r))>a&&(r=a):r=a;const i=t.length;let n;for(r>i/2&&(r=i/2),n=0;n<r;++n){const r=parseInt(t.substr(2*n,2),16);if(Q(r))return n;e[s+n]=r}return n}function w(e,t,s,r){return W(z(t,e.length-s),e,s,r)}function U(e,t,s,r){return W(function(e){const t=[];for(let s=0;s<e.length;++s)t.push(255&e.charCodeAt(s));return t}(t),e,s,r)}function x(e,t,s,r){return W($(t),e,s,r)}function C(e,t,s,r){return W(function(e,t){let s,r,a;const i=[];for(let n=0;n<e.length&&!((t-=2)<0);++n)s=e.charCodeAt(n),r=s>>8,a=s%256,i.push(a),i.push(r);return i}(t,e.length-s),e,s,r)}function R(e,t,s){return 0===t&&s===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,s))}function T(e,t,s){s=Math.min(e.length,s);const r=[];let a=t;for(;a<s;){const t=e[a];let i=null,n=t>239?4:t>223?3:t>191?2:1;if(a+n<=s){let s,r,o,h;switch(n){case 1:t<128&&(i=t);break;case 2:s=e[a+1],128==(192&s)&&(h=(31&t)<<6|63&s,h>127&&(i=h));break;case 3:s=e[a+1],r=e[a+2],128==(192&s)&&128==(192&r)&&(h=(15&t)<<12|(63&s)<<6|63&r,h>2047&&(h<55296||h>57343)&&(i=h));break;case 4:s=e[a+1],r=e[a+2],o=e[a+3],128==(192&s)&&128==(192&r)&&128==(192&o)&&(h=(15&t)<<18|(63&s)<<12|(63&r)<<6|63&o,h>65535&&h<1114112&&(i=h))}}null===i?(i=65533,n=1):i>65535&&(i-=65536,r.push(i>>>10&1023|55296),i=56320|1023&i),r.push(i),a+=n}return function(e){const t=e.length;if(t<=E)return String.fromCharCode.apply(String,e);let s="",r=0;for(;r<t;)s+=String.fromCharCode.apply(String,e.slice(r,r+=E));return s}(r)}h.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),h.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(h.prototype,"parent",{enumerable:!0,get:function(){if(h.isBuffer(this))return this.buffer}}),Object.defineProperty(h.prototype,"offset",{enumerable:!0,get:function(){if(h.isBuffer(this))return this.byteOffset}}),h.poolSize=8192,h.from=function(e,t,s){return u(e,t,s)},Object.setPrototypeOf(h.prototype,Uint8Array.prototype),Object.setPrototypeOf(h,Uint8Array),h.alloc=function(e,t,s){return function(e,t,s){return c(e),e<=0?o(e):void 0!==t?"string"==typeof s?o(e).fill(t,s):o(e).fill(t):o(e)}(e,t,s)},h.allocUnsafe=function(e){return p(e)},h.allocUnsafeSlow=function(e){return p(e)},h.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==h.prototype},h.compare=function(e,t){if(Y(e,Uint8Array)&&(e=h.from(e,e.offset,e.byteLength)),Y(t,Uint8Array)&&(t=h.from(t,t.offset,t.byteLength)),!h.isBuffer(e)||!h.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let s=e.length,r=t.length;for(let a=0,i=Math.min(s,r);a<i;++a)if(e[a]!==t[a]){s=e[a],r=t[a];break}return s<r?-1:r<s?1:0},h.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},h.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return h.alloc(0);let s;if(void 0===t)for(t=0,s=0;s<e.length;++s)t+=e[s].length;const r=h.allocUnsafe(t);let a=0;for(s=0;s<e.length;++s){let t=e[s];if(Y(t,Uint8Array))a+t.length>r.length?(h.isBuffer(t)||(t=h.from(t)),t.copy(r,a)):Uint8Array.prototype.set.call(r,t,a);else{if(!h.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(r,a)}a+=t.length}return r},h.byteLength=y,h.prototype._isBuffer=!0,h.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)b(this,t,t+1);return this},h.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)b(this,t,t+3),b(this,t+1,t+2);return this},h.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)b(this,t,t+7),b(this,t+1,t+6),b(this,t+2,t+5),b(this,t+3,t+4);return this},h.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?T(this,0,e):A.apply(this,arguments)},h.prototype.toLocaleString=h.prototype.toString,h.prototype.equals=function(e){if(!h.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===h.compare(this,e)},h.prototype.inspect=function(){let e="";const s=t.IS;return e=this.toString("hex",0,s).replace(/(.{2})/g,"$1 ").trim(),this.length>s&&(e+=" ... "),"<Buffer "+e+">"},i&&(h.prototype[i]=h.prototype.inspect),h.prototype.compare=function(e,t,s,r,a){if(Y(e,Uint8Array)&&(e=h.from(e,e.offset,e.byteLength)),!h.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===s&&(s=e?e.length:0),void 0===r&&(r=0),void 0===a&&(a=this.length),t<0||s>e.length||r<0||a>this.length)throw new RangeError("out of range index");if(r>=a&&t>=s)return 0;if(r>=a)return-1;if(t>=s)return 1;if(this===e)return 0;let i=(a>>>=0)-(r>>>=0),n=(s>>>=0)-(t>>>=0);const o=Math.min(i,n),u=this.slice(r,a),c=e.slice(t,s);for(let e=0;e<o;++e)if(u[e]!==c[e]){i=u[e],n=c[e];break}return i<n?-1:n<i?1:0},h.prototype.includes=function(e,t,s){return-1!==this.indexOf(e,t,s)},h.prototype.indexOf=function(e,t,s){return m(this,e,t,s,!0)},h.prototype.lastIndexOf=function(e,t,s){return m(this,e,t,s,!1)},h.prototype.write=function(e,t,s,r){if(void 0===t)r="utf8",s=this.length,t=0;else if(void 0===s&&"string"==typeof t)r=t,s=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(s)?(s>>>=0,void 0===r&&(r="utf8")):(r=s,s=void 0)}const a=this.length-t;if((void 0===s||s>a)&&(s=a),e.length>0&&(s<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");let i=!1;for(;;)switch(r){case"hex":return f(this,e,t,s);case"utf8":case"utf-8":return w(this,e,t,s);case"ascii":case"latin1":case"binary":return U(this,e,t,s);case"base64":return x(this,e,t,s);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return C(this,e,t,s);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},h.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const E=4096;function K(e,t,s){let r="";s=Math.min(e.length,s);for(let a=t;a<s;++a)r+=String.fromCharCode(127&e[a]);return r}function j(e,t,s){let r="";s=Math.min(e.length,s);for(let a=t;a<s;++a)r+=String.fromCharCode(e[a]);return r}function B(e,t,s){const r=e.length;(!t||t<0)&&(t=0),(!s||s<0||s>r)&&(s=r);let a="";for(let r=t;r<s;++r)a+=Z[e[r]];return a}function k(e,t,s){const r=e.slice(t,s);let a="";for(let e=0;e<r.length-1;e+=2)a+=String.fromCharCode(r[e]+256*r[e+1]);return a}function P(e,t,s){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>s)throw new RangeError("Trying to access beyond buffer length")}function v(e,t,s,r,a,i){if(!h.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>a||t<i)throw new RangeError('"value" argument is out of bounds');if(s+r>e.length)throw new RangeError("Index out of range")}function _(e,t,s,r,a){G(t,r,a,e,s,7);let i=Number(t&BigInt(4294967295));e[s++]=i,i>>=8,e[s++]=i,i>>=8,e[s++]=i,i>>=8,e[s++]=i;let n=Number(t>>BigInt(32)&BigInt(4294967295));return e[s++]=n,n>>=8,e[s++]=n,n>>=8,e[s++]=n,n>>=8,e[s++]=n,s}function I(e,t,s,r,a){G(t,r,a,e,s,7);let i=Number(t&BigInt(4294967295));e[s+7]=i,i>>=8,e[s+6]=i,i>>=8,e[s+5]=i,i>>=8,e[s+4]=i;let n=Number(t>>BigInt(32)&BigInt(4294967295));return e[s+3]=n,n>>=8,e[s+2]=n,n>>=8,e[s+1]=n,n>>=8,e[s]=n,s+8}function V(e,t,s,r,a,i){if(s+r>e.length)throw new RangeError("Index out of range");if(s<0)throw new RangeError("Index out of range")}function D(e,t,s,r,i){return t=+t,s>>>=0,i||V(e,0,s,4),a.write(e,t,s,r,23,4),s+4}function S(e,t,s,r,i){return t=+t,s>>>=0,i||V(e,0,s,8),a.write(e,t,s,r,52,8),s+8}h.prototype.slice=function(e,t){const s=this.length;(e=~~e)<0?(e+=s)<0&&(e=0):e>s&&(e=s),(t=void 0===t?s:~~t)<0?(t+=s)<0&&(t=0):t>s&&(t=s),t<e&&(t=e);const r=this.subarray(e,t);return Object.setPrototypeOf(r,h.prototype),r},h.prototype.readUintLE=h.prototype.readUIntLE=function(e,t,s){e>>>=0,t>>>=0,s||P(e,t,this.length);let r=this[e],a=1,i=0;for(;++i<t&&(a*=256);)r+=this[e+i]*a;return r},h.prototype.readUintBE=h.prototype.readUIntBE=function(e,t,s){e>>>=0,t>>>=0,s||P(e,t,this.length);let r=this[e+--t],a=1;for(;t>0&&(a*=256);)r+=this[e+--t]*a;return r},h.prototype.readUint8=h.prototype.readUInt8=function(e,t){return e>>>=0,t||P(e,1,this.length),this[e]},h.prototype.readUint16LE=h.prototype.readUInt16LE=function(e,t){return e>>>=0,t||P(e,2,this.length),this[e]|this[e+1]<<8},h.prototype.readUint16BE=h.prototype.readUInt16BE=function(e,t){return e>>>=0,t||P(e,2,this.length),this[e]<<8|this[e+1]},h.prototype.readUint32LE=h.prototype.readUInt32LE=function(e,t){return e>>>=0,t||P(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},h.prototype.readUint32BE=h.prototype.readUInt32BE=function(e,t){return e>>>=0,t||P(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},h.prototype.readBigUInt64LE=J((function(e){H(e>>>=0,"offset");const t=this[e],s=this[e+7];void 0!==t&&void 0!==s||F(e,this.length-8);const r=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,a=this[++e]+256*this[++e]+65536*this[++e]+s*2**24;return BigInt(r)+(BigInt(a)<<BigInt(32))})),h.prototype.readBigUInt64BE=J((function(e){H(e>>>=0,"offset");const t=this[e],s=this[e+7];void 0!==t&&void 0!==s||F(e,this.length-8);const r=t*2**24+65536*this[++e]+256*this[++e]+this[++e],a=this[++e]*2**24+65536*this[++e]+256*this[++e]+s;return(BigInt(r)<<BigInt(32))+BigInt(a)})),h.prototype.readIntLE=function(e,t,s){e>>>=0,t>>>=0,s||P(e,t,this.length);let r=this[e],a=1,i=0;for(;++i<t&&(a*=256);)r+=this[e+i]*a;return a*=128,r>=a&&(r-=Math.pow(2,8*t)),r},h.prototype.readIntBE=function(e,t,s){e>>>=0,t>>>=0,s||P(e,t,this.length);let r=t,a=1,i=this[e+--r];for(;r>0&&(a*=256);)i+=this[e+--r]*a;return a*=128,i>=a&&(i-=Math.pow(2,8*t)),i},h.prototype.readInt8=function(e,t){return e>>>=0,t||P(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},h.prototype.readInt16LE=function(e,t){e>>>=0,t||P(e,2,this.length);const s=this[e]|this[e+1]<<8;return 32768&s?4294901760|s:s},h.prototype.readInt16BE=function(e,t){e>>>=0,t||P(e,2,this.length);const s=this[e+1]|this[e]<<8;return 32768&s?4294901760|s:s},h.prototype.readInt32LE=function(e,t){return e>>>=0,t||P(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},h.prototype.readInt32BE=function(e,t){return e>>>=0,t||P(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},h.prototype.readBigInt64LE=J((function(e){H(e>>>=0,"offset");const t=this[e],s=this[e+7];void 0!==t&&void 0!==s||F(e,this.length-8);const r=this[e+4]+256*this[e+5]+65536*this[e+6]+(s<<24);return(BigInt(r)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),h.prototype.readBigInt64BE=J((function(e){H(e>>>=0,"offset");const t=this[e],s=this[e+7];void 0!==t&&void 0!==s||F(e,this.length-8);const r=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(r)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+s)})),h.prototype.readFloatLE=function(e,t){return e>>>=0,t||P(e,4,this.length),a.read(this,e,!0,23,4)},h.prototype.readFloatBE=function(e,t){return e>>>=0,t||P(e,4,this.length),a.read(this,e,!1,23,4)},h.prototype.readDoubleLE=function(e,t){return e>>>=0,t||P(e,8,this.length),a.read(this,e,!0,52,8)},h.prototype.readDoubleBE=function(e,t){return e>>>=0,t||P(e,8,this.length),a.read(this,e,!1,52,8)},h.prototype.writeUintLE=h.prototype.writeUIntLE=function(e,t,s,r){e=+e,t>>>=0,s>>>=0,r||v(this,e,t,s,Math.pow(2,8*s)-1,0);let a=1,i=0;for(this[t]=255&e;++i<s&&(a*=256);)this[t+i]=e/a&255;return t+s},h.prototype.writeUintBE=h.prototype.writeUIntBE=function(e,t,s,r){e=+e,t>>>=0,s>>>=0,r||v(this,e,t,s,Math.pow(2,8*s)-1,0);let a=s-1,i=1;for(this[t+a]=255&e;--a>=0&&(i*=256);)this[t+a]=e/i&255;return t+s},h.prototype.writeUint8=h.prototype.writeUInt8=function(e,t,s){return e=+e,t>>>=0,s||v(this,e,t,1,255,0),this[t]=255&e,t+1},h.prototype.writeUint16LE=h.prototype.writeUInt16LE=function(e,t,s){return e=+e,t>>>=0,s||v(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},h.prototype.writeUint16BE=h.prototype.writeUInt16BE=function(e,t,s){return e=+e,t>>>=0,s||v(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},h.prototype.writeUint32LE=h.prototype.writeUInt32LE=function(e,t,s){return e=+e,t>>>=0,s||v(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},h.prototype.writeUint32BE=h.prototype.writeUInt32BE=function(e,t,s){return e=+e,t>>>=0,s||v(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},h.prototype.writeBigUInt64LE=J((function(e,t=0){return _(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),h.prototype.writeBigUInt64BE=J((function(e,t=0){return I(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),h.prototype.writeIntLE=function(e,t,s,r){if(e=+e,t>>>=0,!r){const r=Math.pow(2,8*s-1);v(this,e,t,s,r-1,-r)}let a=0,i=1,n=0;for(this[t]=255&e;++a<s&&(i*=256);)e<0&&0===n&&0!==this[t+a-1]&&(n=1),this[t+a]=(e/i|0)-n&255;return t+s},h.prototype.writeIntBE=function(e,t,s,r){if(e=+e,t>>>=0,!r){const r=Math.pow(2,8*s-1);v(this,e,t,s,r-1,-r)}let a=s-1,i=1,n=0;for(this[t+a]=255&e;--a>=0&&(i*=256);)e<0&&0===n&&0!==this[t+a+1]&&(n=1),this[t+a]=(e/i|0)-n&255;return t+s},h.prototype.writeInt8=function(e,t,s){return e=+e,t>>>=0,s||v(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},h.prototype.writeInt16LE=function(e,t,s){return e=+e,t>>>=0,s||v(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},h.prototype.writeInt16BE=function(e,t,s){return e=+e,t>>>=0,s||v(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},h.prototype.writeInt32LE=function(e,t,s){return e=+e,t>>>=0,s||v(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},h.prototype.writeInt32BE=function(e,t,s){return e=+e,t>>>=0,s||v(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},h.prototype.writeBigInt64LE=J((function(e,t=0){return _(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),h.prototype.writeBigInt64BE=J((function(e,t=0){return I(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),h.prototype.writeFloatLE=function(e,t,s){return D(this,e,t,!0,s)},h.prototype.writeFloatBE=function(e,t,s){return D(this,e,t,!1,s)},h.prototype.writeDoubleLE=function(e,t,s){return S(this,e,t,!0,s)},h.prototype.writeDoubleBE=function(e,t,s){return S(this,e,t,!1,s)},h.prototype.copy=function(e,t,s,r){if(!h.isBuffer(e))throw new TypeError("argument should be a Buffer");if(s||(s=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<s&&(r=s),r===s)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(s<0||s>=this.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-s&&(r=e.length-t+s);const a=r-s;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,s,r):Uint8Array.prototype.set.call(e,this.subarray(s,r),t),a},h.prototype.fill=function(e,t,s,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,s=this.length):"string"==typeof s&&(r=s,s=this.length),void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!h.isEncoding(r))throw new TypeError("Unknown encoding: "+r);if(1===e.length){const t=e.charCodeAt(0);("utf8"===r&&t<128||"latin1"===r)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<s)throw new RangeError("Out of range index");if(s<=t)return this;let a;if(t>>>=0,s=void 0===s?this.length:s>>>0,e||(e=0),"number"==typeof e)for(a=t;a<s;++a)this[a]=e;else{const i=h.isBuffer(e)?e:h.from(e,r),n=i.length;if(0===n)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(a=0;a<s-t;++a)this[a+t]=i[a%n]}return this};const M={};function O(e,t,s){M[e]=class extends s{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function L(e){let t="",s=e.length;const r="-"===e[0]?1:0;for(;s>=r+4;s-=3)t=`_${e.slice(s-3,s)}${t}`;return`${e.slice(0,s)}${t}`}function G(e,t,s,r,a,i){if(e>s||e<t){const r="bigint"==typeof t?"n":"";let a;throw a=i>3?0===t||t===BigInt(0)?`>= 0${r} and < 2${r} ** ${8*(i+1)}${r}`:`>= -(2${r} ** ${8*(i+1)-1}${r}) and < 2 ** ${8*(i+1)-1}${r}`:`>= ${t}${r} and <= ${s}${r}`,new M.ERR_OUT_OF_RANGE("value",a,e)}!function(e,t,s){H(t,"offset"),void 0!==e[t]&&void 0!==e[t+s]||F(t,e.length-(s+1))}(r,a,i)}function H(e,t){if("number"!=typeof e)throw new M.ERR_INVALID_ARG_TYPE(t,"number",e)}function F(e,t,s){if(Math.floor(e)!==e)throw H(e,s),new M.ERR_OUT_OF_RANGE(s||"offset","an integer",e);if(t<0)throw new M.ERR_BUFFER_OUT_OF_BOUNDS;throw new M.ERR_OUT_OF_RANGE(s||"offset",`>= ${s?1:0} and <= ${t}`,e)}O("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),O("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),O("ERR_OUT_OF_RANGE",(function(e,t,s){let r=`The value of "${e}" is out of range.`,a=s;return Number.isInteger(s)&&Math.abs(s)>2**32?a=L(String(s)):"bigint"==typeof s&&(a=String(s),(s>BigInt(2)**BigInt(32)||s<-(BigInt(2)**BigInt(32)))&&(a=L(a)),a+="n"),r+=` It must be ${t}. Received ${a}`,r}),RangeError);const N=/[^+/0-9A-Za-z-_]/g;function z(e,t){let s;t=t||1/0;const r=e.length;let a=null;const i=[];for(let n=0;n<r;++n){if(s=e.charCodeAt(n),s>55295&&s<57344){if(!a){if(s>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(n+1===r){(t-=3)>-1&&i.push(239,191,189);continue}a=s;continue}if(s<56320){(t-=3)>-1&&i.push(239,191,189),a=s;continue}s=65536+(a-55296<<10|s-56320)}else a&&(t-=3)>-1&&i.push(239,191,189);if(a=null,s<128){if((t-=1)<0)break;i.push(s)}else if(s<2048){if((t-=2)<0)break;i.push(s>>6|192,63&s|128)}else if(s<65536){if((t-=3)<0)break;i.push(s>>12|224,s>>6&63|128,63&s|128)}else{if(!(s<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(s>>18|240,s>>12&63|128,s>>6&63|128,63&s|128)}}return i}function $(e){return r.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(N,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function W(e,t,s,r){let a;for(a=0;a<r&&!(a+s>=t.length||a>=e.length);++a)t[a+s]=e[a];return a}function Y(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function Q(e){return e!=e}const Z=function(){const e="0123456789abcdef",t=new Array(256);for(let s=0;s<16;++s){const r=16*s;for(let a=0;a<16;++a)t[r+a]=e[s]+e[a]}return t}();function J(e){return"undefined"==typeof BigInt?X:e}function X(){throw new Error("BigInt not supported")}},1719:(e,t,s)=>{"use strict";s.d(t,{A:()=>o});var r=s(1354),a=s.n(r),i=s(6314),n=s.n(i)()(a());n.push([e.id,'/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\nhtml {\n  line-height: 1.15; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/* Sections\n   ========================================================================== */\n\n/**\n * Remove the margin in all browsers.\n */\n\nbody {\n  margin: 0;\n}\n\n/**\n * Render the `main` element consistently in IE.\n */\n\nmain {\n  display: block;\n}\n\n/**\n * Correct the font size and margin on `h1` elements within `section` and\n * `article` contexts in Chrome, Firefox, and Safari.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\nhr {\n  box-sizing: content-box; /* 1 */\n  height: 0; /* 1 */\n  overflow: visible; /* 2 */\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\npre {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * Remove the gray background on active links in IE 10.\n */\n\na {\n  background-color: transparent;\n}\n\n/**\n * 1. Remove the bottom border in Chrome 57-\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\nabbr[title] {\n  border-bottom: none; /* 1 */\n  text-decoration: underline; /* 2 */\n  text-decoration: underline dotted; /* 2 */\n}\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\ncode,\nkbd,\nsamp {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/**\n * Add the correct font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove the border on images inside links in IE 10.\n */\n\nimg {\n  border-style: none;\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * 1. Change the font styles in all browsers.\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  line-height: 1.15; /* 1 */\n  margin: 0; /* 2 */\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput { /* 1 */\n  overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect { /* 1 */\n  text-transform: none;\n}\n\n/**\n * Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\n[type="button"],\n[type="reset"],\n[type="submit"] {\n  -webkit-appearance: button;\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type="button"]::-moz-focus-inner,\n[type="reset"]::-moz-focus-inner,\n[type="submit"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type="button"]:-moz-focusring,\n[type="reset"]:-moz-focusring,\n[type="submit"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n * Correct the padding in Firefox.\n */\n\nfieldset {\n  padding: 0.35em 0.75em 0.625em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n  box-sizing: border-box; /* 1 */\n  color: inherit; /* 2 */\n  display: table; /* 1 */\n  max-width: 100%; /* 1 */\n  padding: 0; /* 3 */\n  white-space: normal; /* 1 */\n}\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n  vertical-align: baseline;\n}\n\n/**\n * Remove the default vertical scrollbar in IE 10+.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10.\n * 2. Remove the padding in IE 10.\n */\n\n[type="checkbox"],\n[type="radio"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type="number"]::-webkit-inner-spin-button,\n[type="number"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type="search"] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/**\n * Remove the inner padding in Chrome and Safari on macOS.\n */\n\n[type="search"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/* Interactive\n   ========================================================================== */\n\n/*\n * Add the correct display in Edge, IE 10+, and Firefox.\n */\n\ndetails {\n  display: block;\n}\n\n/*\n * Add the correct display in all browsers.\n */\n\nsummary {\n  display: list-item;\n}\n\n/* Misc\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 10+.\n */\n\ntemplate {\n  display: none;\n}\n\n/**\n * Add the correct display in IE 10.\n */\n\n[hidden] {\n  display: none;\n}\n',"",{version:3,sources:["webpack://./node_modules/normalize.css/normalize.css"],names:[],mappings:"AAAA,2EAA2E;;AAE3E;+EAC+E;;AAE/E;;;EAGE;;AAEF;EACE,iBAAiB,EAAE,MAAM;EACzB,8BAA8B,EAAE,MAAM;AACxC;;AAEA;+EAC+E;;AAE/E;;EAEE;;AAEF;EACE,SAAS;AACX;;AAEA;;EAEE;;AAEF;EACE,cAAc;AAChB;;AAEA;;;EAGE;;AAEF;EACE,cAAc;EACd,gBAAgB;AAClB;;AAEA;+EAC+E;;AAE/E;;;EAGE;;AAEF;EACE,uBAAuB,EAAE,MAAM;EAC/B,SAAS,EAAE,MAAM;EACjB,iBAAiB,EAAE,MAAM;AAC3B;;AAEA;;;EAGE;;AAEF;EACE,iCAAiC,EAAE,MAAM;EACzC,cAAc,EAAE,MAAM;AACxB;;AAEA;+EAC+E;;AAE/E;;EAEE;;AAEF;EACE,6BAA6B;AAC/B;;AAEA;;;EAGE;;AAEF;EACE,mBAAmB,EAAE,MAAM;EAC3B,0BAA0B,EAAE,MAAM;EAClC,iCAAiC,EAAE,MAAM;AAC3C;;AAEA;;EAEE;;AAEF;;EAEE,mBAAmB;AACrB;;AAEA;;;EAGE;;AAEF;;;EAGE,iCAAiC,EAAE,MAAM;EACzC,cAAc,EAAE,MAAM;AACxB;;AAEA;;EAEE;;AAEF;EACE,cAAc;AAChB;;AAEA;;;EAGE;;AAEF;;EAEE,cAAc;EACd,cAAc;EACd,kBAAkB;EAClB,wBAAwB;AAC1B;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,WAAW;AACb;;AAEA;+EAC+E;;AAE/E;;EAEE;;AAEF;EACE,kBAAkB;AACpB;;AAEA;+EAC+E;;AAE/E;;;EAGE;;AAEF;;;;;EAKE,oBAAoB,EAAE,MAAM;EAC5B,eAAe,EAAE,MAAM;EACvB,iBAAiB,EAAE,MAAM;EACzB,SAAS,EAAE,MAAM;AACnB;;AAEA;;;EAGE;;AAEF;QACQ,MAAM;EACZ,iBAAiB;AACnB;;AAEA;;;EAGE;;AAEF;SACS,MAAM;EACb,oBAAoB;AACtB;;AAEA;;EAEE;;AAEF;;;;EAIE,0BAA0B;AAC5B;;AAEA;;EAEE;;AAEF;;;;EAIE,kBAAkB;EAClB,UAAU;AACZ;;AAEA;;EAEE;;AAEF;;;;EAIE,8BAA8B;AAChC;;AAEA;;EAEE;;AAEF;EACE,8BAA8B;AAChC;;AAEA;;;;;EAKE;;AAEF;EACE,sBAAsB,EAAE,MAAM;EAC9B,cAAc,EAAE,MAAM;EACtB,cAAc,EAAE,MAAM;EACtB,eAAe,EAAE,MAAM;EACvB,UAAU,EAAE,MAAM;EAClB,mBAAmB,EAAE,MAAM;AAC7B;;AAEA;;EAEE;;AAEF;EACE,wBAAwB;AAC1B;;AAEA;;EAEE;;AAEF;EACE,cAAc;AAChB;;AAEA;;;EAGE;;AAEF;;EAEE,sBAAsB,EAAE,MAAM;EAC9B,UAAU,EAAE,MAAM;AACpB;;AAEA;;EAEE;;AAEF;;EAEE,YAAY;AACd;;AAEA;;;EAGE;;AAEF;EACE,6BAA6B,EAAE,MAAM;EACrC,oBAAoB,EAAE,MAAM;AAC9B;;AAEA;;EAEE;;AAEF;EACE,wBAAwB;AAC1B;;AAEA;;;EAGE;;AAEF;EACE,0BAA0B,EAAE,MAAM;EAClC,aAAa,EAAE,MAAM;AACvB;;AAEA;+EAC+E;;AAE/E;;EAEE;;AAEF;EACE,cAAc;AAChB;;AAEA;;EAEE;;AAEF;EACE,kBAAkB;AACpB;;AAEA;+EAC+E;;AAE/E;;EAEE;;AAEF;EACE,aAAa;AACf;;AAEA;;EAEE;;AAEF;EACE,aAAa;AACf",sourcesContent:['/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\nhtml {\n  line-height: 1.15; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/* Sections\n   ========================================================================== */\n\n/**\n * Remove the margin in all browsers.\n */\n\nbody {\n  margin: 0;\n}\n\n/**\n * Render the `main` element consistently in IE.\n */\n\nmain {\n  display: block;\n}\n\n/**\n * Correct the font size and margin on `h1` elements within `section` and\n * `article` contexts in Chrome, Firefox, and Safari.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\nhr {\n  box-sizing: content-box; /* 1 */\n  height: 0; /* 1 */\n  overflow: visible; /* 2 */\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\npre {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * Remove the gray background on active links in IE 10.\n */\n\na {\n  background-color: transparent;\n}\n\n/**\n * 1. Remove the bottom border in Chrome 57-\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\nabbr[title] {\n  border-bottom: none; /* 1 */\n  text-decoration: underline; /* 2 */\n  text-decoration: underline dotted; /* 2 */\n}\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\ncode,\nkbd,\nsamp {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/**\n * Add the correct font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove the border on images inside links in IE 10.\n */\n\nimg {\n  border-style: none;\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * 1. Change the font styles in all browsers.\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  line-height: 1.15; /* 1 */\n  margin: 0; /* 2 */\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput { /* 1 */\n  overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect { /* 1 */\n  text-transform: none;\n}\n\n/**\n * Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\n[type="button"],\n[type="reset"],\n[type="submit"] {\n  -webkit-appearance: button;\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type="button"]::-moz-focus-inner,\n[type="reset"]::-moz-focus-inner,\n[type="submit"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type="button"]:-moz-focusring,\n[type="reset"]:-moz-focusring,\n[type="submit"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n * Correct the padding in Firefox.\n */\n\nfieldset {\n  padding: 0.35em 0.75em 0.625em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n  box-sizing: border-box; /* 1 */\n  color: inherit; /* 2 */\n  display: table; /* 1 */\n  max-width: 100%; /* 1 */\n  padding: 0; /* 3 */\n  white-space: normal; /* 1 */\n}\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n  vertical-align: baseline;\n}\n\n/**\n * Remove the default vertical scrollbar in IE 10+.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10.\n * 2. Remove the padding in IE 10.\n */\n\n[type="checkbox"],\n[type="radio"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type="number"]::-webkit-inner-spin-button,\n[type="number"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type="search"] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/**\n * Remove the inner padding in Chrome and Safari on macOS.\n */\n\n[type="search"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/* Interactive\n   ========================================================================== */\n\n/*\n * Add the correct display in Edge, IE 10+, and Firefox.\n */\n\ndetails {\n  display: block;\n}\n\n/*\n * Add the correct display in all browsers.\n */\n\nsummary {\n  display: list-item;\n}\n\n/* Misc\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 10+.\n */\n\ntemplate {\n  display: none;\n}\n\n/**\n * Add the correct display in IE 10.\n */\n\n[hidden] {\n  display: none;\n}\n'],sourceRoot:""}]);const o=n},7632:(e,t,s)=>{"use strict";s.d(t,{A:()=>o});var r=s(1354),a=s.n(r),i=s(6314),n=s.n(i)()(a());n.push([e.id,".adressesBlock{display:flex;flex-direction:column}.setDefaultWrapper,.useSameWrapper{width:300px;height:20px;display:flex;justify-content:flex-end;gap:20px;margin-bottom:20px;font-size:12px}","",{version:3,sources:["webpack://./src/components/adressesBLock/adressesBlock.css"],names:[],mappings:"AAAA,eACE,YAAA,CACA,qBAAA,CAGF,mCAEE,WAAA,CACA,WAAA,CACA,YAAA,CACA,wBAAA,CACA,QAAA,CACA,kBAAA,CACA,cAAA",sourcesContent:[".adressesBlock {\n  display: flex;\n  flex-direction: column;\n}\n\n.setDefaultWrapper,\n.useSameWrapper {\n  width: 300px;\n  height: 20px;\n  display: flex;\n  justify-content: flex-end;\n  gap: 20px;\n  margin-bottom: 20px;\n  font-size: 12px;\n}\n"],sourceRoot:""}]);const o=n},110:(e,t,s)=>{"use strict";s.d(t,{A:()=>o});var r=s(1354),a=s.n(r),i=s(6314),n=s.n(i)()(a());n.push([e.id,".login-btn{width:100%;background-color:var(--accent-color);color:var(--on-accent-txt);padding:16px 0 13px 0;border-radius:5px}.login-btn:disabled{cursor:auto;opacity:.5}","",{version:3,sources:["webpack://./src/components/btns/_btns.scss"],names:[],mappings:"AAAA,WACE,UAAA,CACA,oCAAA,CACA,0BAAA,CACA,qBAAA,CACA,iBAAA,CAEF,oBACE,WAAA,CACA,UAAA",sourcesContent:[".login-btn {\n  width: 100%;\n  background-color: var(--accent-color);\n  color: var(--on-accent-txt);\n  padding: 16px 0 13px 0;\n  border-radius: 5px;\n}\n.login-btn:disabled {\n  cursor: auto;\n  opacity: 0.5;\n}\n"],sourceRoot:""}]);const o=n},240:(e,t,s)=>{"use strict";s.d(t,{A:()=>l});var r=s(1354),a=s.n(r),i=s(6314),n=s.n(i),o=s(4417),h=s.n(o),u=new URL(s(2484),s.b),c=new URL(s(1666),s.b),p=n()(a()),g=h()(u),d=h()(c);p.push([e.id,`.passwordWrapper{width:300px;width:300px;height:80px;display:flex}.inputWrapper{width:275px;height:40px}.showPasswordIcon,.passWordIconHide{background-image:url(${g});width:20px;height:20px;background-size:contain;background-repeat:no-repeat;background-position:center;position:relative;bottom:-12px;z-index:5}.passWordIconHide{background-image:url(${d})}`,"",{version:3,sources:["webpack://./src/components/inputPassword/inputPassword.css"],names:[],mappings:"AAAA,iBACE,WAAA,CACA,WAAA,CACA,WAAA,CACA,YAAA,CAGF,cACE,WAAA,CACA,WAAA,CAGF,oCAEE,wDAAA,CACA,UAAA,CACA,WAAA,CACA,uBAAA,CACA,2BAAA,CACA,0BAAA,CACA,iBAAA,CACA,YAAA,CACA,SAAA,CAEF,kBACE,wDAAA",sourcesContent:[".passwordWrapper {\n  width: 300px;\n  width: 300px;\n  height: 80px;\n  display: flex;\n}\n\n.inputWrapper {\n  width: 275px;\n  height: 40px;\n}\n\n.showPasswordIcon,\n.passWordIconHide {\n  background-image: url(\"data:image/svg+xml;utf8,<svg width='18' height='16' viewBox='0 0 18 16' fill='none' xmlns='http://www.w3.org/2000/svg'><path d='M4.34984 12.7748C2.4915 11.5582 1.2915 9.72482 1.2915 8.11649C1.2915 5.38316 4.7415 2.03316 8.99984 2.03316C10.7415 2.03316 12.3582 2.59149 13.6582 3.45816' stroke='%23727272' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'/><path d='M15.5414 5.17517C16.2839 6.11684 16.7164 7.1585 16.7164 8.11684C16.7164 10.8502 13.2581 14.2002 8.99977 14.2002C8.24144 14.2002 7.50061 14.0918 6.80811 13.9002' stroke='%23727272' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'/><path d='M7.13804 9.97249C6.6422 9.48166 6.3647 8.81249 6.3672 8.11499C6.36387 6.66083 7.54054 5.47916 8.99554 5.47666C9.69554 5.47499 10.3672 5.75249 10.8622 6.24749' stroke='%23727272' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'/><path d='M11.5912 8.58258C11.3962 9.65925 10.5537 10.5034 9.47705 10.7009' stroke='%23727272' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'/><path d='M15.5762 1.54158L2.43115 14.6866' stroke='%23727272' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'/></svg>\");\n  width: 20px;\n  height: 20px;\n  background-size: contain;\n  background-repeat: no-repeat;\n  background-position: center;\n  position: relative;\n  bottom: -12px;\n  z-index: 5;\n}\n.passWordIconHide {\n  background-image: url(\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='18' height='16' viewBox='0 0 18 16' fill='none'><path d='M4.35 12.775C2.492 11.558 1.292 9.725 1.292 8.116C1.292 5.383 4.742 2.033 9 2.033C10.742 2.033 13.335 3.066 14.545 4.162' stroke='%23727272' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'/><path d='M14.506 4.142C15.605 4.913 16.716 7.159 16.716 8.117C16.716 10.85 13.288 14.341 9 14.2C7.084 14.137 5.276 13.476 4.38 12.787' stroke='%23727272' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'/><path d='M7.13804 9.97249C6.6422 9.48166 6.3647 8.81249 6.3672 8.11499C6.36387 6.66083 7.54054 5.47916 8.99554 5.47666C9.69554 5.47499 10.3672 5.75249 10.8622 6.24749' stroke='%23727272' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'/><path d='M10.931 6.313C12.673 8.144 10.831 11.881 7.268 10.046' stroke='%23727272' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'/></svg>\");\n}\n"],sourceRoot:""}]);const l=p},5218:(e,t,s)=>{"use strict";s.d(t,{A:()=>l});var r=s(1354),a=s.n(r),i=s(6314),n=s.n(i),o=s(4417),h=s.n(o),u=new URL(s(2484),s.b),c=new URL(s(1666),s.b),p=n()(a()),g=h()(u),d=h()(c);p.push([e.id,`.input-container{display:flex;flex-direction:column;margin-bottom:1px}.login__input{padding:12px 14px;border:1px solid var(--input-border);border-radius:5px;width:100%;margin-bottom:1px}.login__input::-webkit-input-placeholder{font-size:14px;font-family:inherit;font-weight:400;color:var(--placeholder-txt)}.login__input::-moz-placeholder{font-size:14px;font-family:inherit;font-weight:400;color:var(--placeholder-txt)}.login__input:-ms-input-placeholder{font-size:14px;font-family:inherit;font-weight:400;color:var(--placeholder-txt)}.login__input::-ms-input-placeholder{font-size:14px;font-family:inherit;font-weight:400;color:var(--placeholder-txt)}.login__input::placeholder{font-size:14px;font-family:inherit;font-weight:400;color:var(--placeholder-txt)}.login__input:focus{outline:var(--accent-color) 1px solid}.login__input.login__input--error{outline:var(--error) 1px solid}.error-message{color:var(--error);font-size:13px;margin:0;padding:5px 0}.error-message.error-message--hidden{opacity:0}input[type=password]{font-family:inherit;letter-spacing:5px}.login__input.login__input--password::-webkit-input-placeholder{transform:translateY(20%);font-family:inherit;letter-spacing:5px}.login__input.login__input--password::-moz-placeholder{transform:translateY(20%);font-family:inherit;letter-spacing:5px}.login__input.login__input--password:-ms-input-placeholder{transform:translateY(20%);font-family:inherit;letter-spacing:5px}.login__input.login__input--password::-ms-input-placeholder{transform:translateY(20%);font-family:inherit;letter-spacing:5px}.login__input.login__input--password::placeholder{transform:translateY(20%);font-family:inherit;letter-spacing:5px}.toggle-password-btn{background-image:url(${g});width:20px;height:20px;background-size:contain;background-repeat:no-repeat;background-position:center;position:absolute;right:10px;top:50%;transform:translateY(-50%)}.toggle-password-btn.toggle-password-btn--hide{background-image:url(${d})}.password-wrapper{position:relative}`,"",{version:3,sources:["webpack://./src/components/inputs/_inputs.scss"],names:[],mappings:"AAAA,iBACE,YAAA,CACA,qBAAA,CACA,iBAAA,CAGF,cACE,iBAAA,CACA,oCAAA,CACA,iBAAA,CACA,UAAA,CACA,iBAAA,CAGF,yCACE,cAAA,CACA,mBAAA,CACA,eAAA,CACA,4BAAA,CAGF,gCACE,cAAA,CACA,mBAAA,CACA,eAAA,CACA,4BAAA,CAGF,oCACE,cAAA,CACA,mBAAA,CACA,eAAA,CACA,4BAAA,CAGF,qCACE,cAAA,CACA,mBAAA,CACA,eAAA,CACA,4BAAA,CAGF,2BACE,cAAA,CACA,mBAAA,CACA,eAAA,CACA,4BAAA,CAGF,oBACE,qCAAA,CAGF,kCACE,8BAAA,CAGF,eACE,kBAAA,CACA,cAAA,CACA,QAAA,CACA,aAAA,CAGF,qCACE,SAAA,CAGF,qBACE,mBAAA,CACA,kBAAA,CAGF,gEACE,yBAAA,CACA,mBAAA,CACA,kBAAA,CAGF,uDACE,yBAAA,CACA,mBAAA,CACA,kBAAA,CAGF,2DACE,yBAAA,CACA,mBAAA,CACA,kBAAA,CAGF,4DACE,yBAAA,CACA,mBAAA,CACA,kBAAA,CAGF,kDACE,yBAAA,CACA,mBAAA,CACA,kBAAA,CAGF,qBACE,wDAAA,CAEA,UAAA,CACA,WAAA,CACA,uBAAA,CACA,2BAAA,CACA,0BAAA,CACA,iBAAA,CACA,UAAA,CACA,OAAA,CACA,0BAAA,CAEF,+CACE,wDAAA,CAGF,kBACE,iBAAA",sourcesContent:[".input-container {\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 1px;\n}\n\n.login__input {\n  padding: 12px 14px;\n  border: 1px solid var(--input-border);\n  border-radius: 5px;\n  width: 100%;\n  margin-bottom: 1px;\n}\n\n.login__input::-webkit-input-placeholder {\n  font-size: 14px;\n  font-family: inherit;\n  font-weight: 400;\n  color: var(--placeholder-txt);\n}\n\n.login__input::-moz-placeholder {\n  font-size: 14px;\n  font-family: inherit;\n  font-weight: 400;\n  color: var(--placeholder-txt);\n}\n\n.login__input:-ms-input-placeholder {\n  font-size: 14px;\n  font-family: inherit;\n  font-weight: 400;\n  color: var(--placeholder-txt);\n}\n\n.login__input::-ms-input-placeholder {\n  font-size: 14px;\n  font-family: inherit;\n  font-weight: 400;\n  color: var(--placeholder-txt);\n}\n\n.login__input::placeholder {\n  font-size: 14px;\n  font-family: inherit;\n  font-weight: 400;\n  color: var(--placeholder-txt);\n}\n\n.login__input:focus {\n  outline: var(--accent-color) 1px solid;\n}\n\n.login__input.login__input--error {\n  outline: var(--error) 1px solid;\n}\n\n.error-message {\n  color: var(--error);\n  font-size: 13px;\n  margin: 0;\n  padding: 5px 0;\n}\n\n.error-message.error-message--hidden {\n  opacity: 0;\n}\n\ninput[type='password'] {\n  font-family: inherit;\n  letter-spacing: 5px;\n}\n\n.login__input.login__input--password::-webkit-input-placeholder {\n  transform: translateY(20%);\n  font-family: inherit;\n  letter-spacing: 5px;\n}\n\n.login__input.login__input--password::-moz-placeholder {\n  transform: translateY(20%);\n  font-family: inherit;\n  letter-spacing: 5px;\n}\n\n.login__input.login__input--password:-ms-input-placeholder {\n  transform: translateY(20%);\n  font-family: inherit;\n  letter-spacing: 5px;\n}\n\n.login__input.login__input--password::-ms-input-placeholder {\n  transform: translateY(20%);\n  font-family: inherit;\n  letter-spacing: 5px;\n}\n\n.login__input.login__input--password::placeholder {\n  transform: translateY(20%);\n  font-family: inherit;\n  letter-spacing: 5px;\n}\n\n.toggle-password-btn {\n  background-image: url(\"data:image/svg+xml;utf8,<svg width='18' height='16' viewBox='0 0 18 16' fill='none' xmlns='http://www.w3.org/2000/svg'><path d='M4.34984 12.7748C2.4915 11.5582 1.2915 9.72482 1.2915 8.11649C1.2915 5.38316 4.7415 2.03316 8.99984 2.03316C10.7415 2.03316 12.3582 2.59149 13.6582 3.45816' stroke='%23727272' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'/><path d='M15.5414 5.17517C16.2839 6.11684 16.7164 7.1585 16.7164 8.11684C16.7164 10.8502 13.2581 14.2002 8.99977 14.2002C8.24144 14.2002 7.50061 14.0918 6.80811 13.9002' stroke='%23727272' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'/><path d='M7.13804 9.97249C6.6422 9.48166 6.3647 8.81249 6.3672 8.11499C6.36387 6.66083 7.54054 5.47916 8.99554 5.47666C9.69554 5.47499 10.3672 5.75249 10.8622 6.24749' stroke='%23727272' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'/><path d='M11.5912 8.58258C11.3962 9.65925 10.5537 10.5034 9.47705 10.7009' stroke='%23727272' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'/><path d='M15.5762 1.54158L2.43115 14.6866' stroke='%23727272' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'/></svg>\");\n\n  width: 20px;\n  height: 20px;\n  background-size: contain;\n  background-repeat: no-repeat;\n  background-position: center;\n  position: absolute;\n  right: 10px;\n  top: 50%;\n  transform: translateY(-50%);\n}\n.toggle-password-btn.toggle-password-btn--hide {\n  background-image: url(\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='18' height='16' viewBox='0 0 18 16' fill='none'><path d='M4.35 12.775C2.492 11.558 1.292 9.725 1.292 8.116C1.292 5.383 4.742 2.033 9 2.033C10.742 2.033 13.335 3.066 14.545 4.162' stroke='%23727272' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'/><path d='M14.506 4.142C15.605 4.913 16.716 7.159 16.716 8.117C16.716 10.85 13.288 14.341 9 14.2C7.084 14.137 5.276 13.476 4.38 12.787' stroke='%23727272' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'/><path d='M7.13804 9.97249C6.6422 9.48166 6.3647 8.81249 6.3672 8.11499C6.36387 6.66083 7.54054 5.47916 8.99554 5.47666C9.69554 5.47499 10.3672 5.75249 10.8622 6.24749' stroke='%23727272' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'/><path d='M10.931 6.313C12.673 8.144 10.831 11.881 7.268 10.046' stroke='%23727272' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'/></svg>\");\n}\n\n.password-wrapper {\n  position: relative;\n}\n"],sourceRoot:""}]);const l=p},4633:(e,t,s)=>{"use strict";s.d(t,{A:()=>g});var r=s(1354),a=s.n(r),i=s(6314),n=s.n(i),o=s(4417),h=s.n(o),u=new URL(s(4662),s.b),c=n()(a()),p=h()(u);c.push([e.id,`.error-popup{position:absolute;max-width:500px;width:calc(100% - 20px);z-index:1;left:50%;top:30%;transform:translate(-50%, -50%);color:var(--error);background-color:var(--bg);border-radius:5px;padding:20px 40px;box-shadow:7px 4px 5px 0px rgba(0,0,0,.47)}.error-popup__close{width:15px;height:15px;background-image:url(${p});background-size:contain;background-repeat:no-repeat;background-position:center;position:absolute;right:15px;top:15px}.error-popup__container{background-color:var(--popup-bg);z-index:100;position:fixed;width:100%;left:0;top:0;height:100%}`,"",{version:3,sources:["webpack://./src/components/popups/_popup.scss"],names:[],mappings:"AAAA,aACE,iBAAA,CACA,eAAA,CACA,uBAAA,CACA,SAAA,CACA,QAAA,CACA,OAAA,CACA,+BAAA,CACA,kBAAA,CACA,0BAAA,CACA,iBAAA,CACA,iBAAA,CACA,0CAAA,CAGF,oBACE,UAAA,CACA,WAAA,CACA,wDAAA,CACA,uBAAA,CACA,2BAAA,CACA,0BAAA,CACA,iBAAA,CACA,UAAA,CACA,QAAA,CAGF,wBACE,gCAAA,CACA,WAAA,CACA,cAAA,CACA,UAAA,CACA,MAAA,CACA,KAAA,CACA,WAAA",sourcesContent:['.error-popup {\n  position: absolute;\n  max-width: 500px;\n  width: calc(100% - 20px);\n  z-index: 1;\n  left: 50%;\n  top: 30%;\n  transform: translate(-50%, -50%);\n  color: var(--error);\n  background-color: var(--bg);\n  border-radius: 5px;\n  padding: 20px 40px;\n  box-shadow: 7px 4px 5px 0px rgba(0, 0, 0, 0.47);\n}\n\n.error-popup__close {\n  width: 15px;\n  height: 15px;\n  background-image: url(\'data:image/svg+xml;utf8, <svg xmlns="http://www.w3.org/2000/svg" height="329pt" viewBox="0 0 329.26933 329" width="329pt"><path d="m194.800781 164.769531 128.210938-128.214843c8.34375-8.339844 8.34375-21.824219 0-30.164063-8.339844-8.339844-21.824219-8.339844-30.164063 0l-128.214844 128.214844-128.210937-128.214844c-8.34375-8.339844-21.824219-8.339844-30.164063 0-8.34375 8.339844-8.34375 21.824219 0 30.164063l128.210938 128.214843-128.210938 128.214844c-8.34375 8.339844-8.34375 21.824219 0 30.164063 4.15625 4.160156 9.621094 6.25 15.082032 6.25 5.460937 0 10.921875-2.089844 15.082031-6.25l128.210937-128.214844 128.214844 128.214844c4.160156 4.160156 9.621094 6.25 15.082032 6.25 5.460937 0 10.921874-2.089844 15.082031-6.25 8.34375-8.339844 8.34375-21.824219 0-30.164063zm0 0"/></svg>\');\n  background-size: contain;\n  background-repeat: no-repeat;\n  background-position: center;\n  position: absolute;\n  right: 15px;\n  top: 15px;\n}\n\n.error-popup__container {\n  background-color: var(--popup-bg);\n  z-index: 100;\n  position: fixed;\n  width: 100%;\n  left: 0;\n  top: 0;\n  height: 100%;\n}\n'],sourceRoot:""}]);const g=c},9944:(e,t,s)=>{"use strict";s.d(t,{A:()=>o});var r=s(1354),a=s.n(r),i=s(6314),n=s.n(i)()(a());n.push([e.id,'.login{height:100%}.login__container{max-width:300px;width:100%;margin:auto;display:flex;flex-direction:column}.login__header{width:100%;display:flex;justify-content:center;padding:50px 0;margin-bottom:3px}.login__link{font-size:20px;font-weight:500;color:inherit;padding:0 12px;position:relative}.login__link.login__link--active{color:var(--accent-color)}.login__link:not(:last-child)::after{content:"";width:1px;height:1rem;background-color:var(--base-txt);position:absolute;right:0;top:0;transform:translate(0, 30%)}.login__form-title{margin:0;font-weight:400;font-size:13px;margin-bottom:14px}',"",{version:3,sources:["webpack://./src/pages/loginPage/_loginPage.scss"],names:[],mappings:"AAAA,OACE,WAAA,CAEA,kBACE,eAAA,CACA,UAAA,CACA,WAAA,CACA,YAAA,CACA,qBAAA,CAGF,eACE,UAAA,CACA,YAAA,CACA,sBAAA,CACA,cAAA,CACA,iBAAA,CAGF,aACE,cAAA,CACA,eAAA,CACA,aAAA,CACA,cAAA,CACA,iBAAA,CAGF,iCACE,yBAAA,CAGF,qCACE,UAAA,CACA,SAAA,CACA,WAAA,CACA,gCAAA,CACA,iBAAA,CACA,OAAA,CACA,KAAA,CACA,2BAAA,CAGF,mBACE,QAAA,CACA,eAAA,CACA,cAAA,CACA,kBAAA",sourcesContent:[".login {\n  height: 100%;\n\n  &__container {\n    max-width: 300px;\n    width: 100%;\n    margin: auto;\n    display: flex;\n    flex-direction: column;\n  }\n\n  &__header {\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    padding: 50px 0;\n    margin-bottom: 3px;\n  }\n\n  &__link {\n    font-size: 20px;\n    font-weight: 500;\n    color: inherit;\n    padding: 0 12px;\n    position: relative;\n  }\n\n  &__link.login__link--active {\n    color: var(--accent-color);\n  }\n\n  &__link:not(:last-child)::after {\n    content: '';\n    width: 1px;\n    height: 1rem;\n    background-color: var(--base-txt);\n    position: absolute;\n    right: 0;\n    top: 0;\n    transform: translate(0, 30%);\n  }\n\n  &__form-title {\n    margin: 0;\n    font-weight: 400;\n    font-size: 13px;\n    margin-bottom: 14px;\n  }\n}\n"],sourceRoot:""}]);const o=n},4624:(e,t,s)=>{"use strict";s.d(t,{A:()=>o});var r=s(1354),a=s.n(r),i=s(6314),n=s.n(i)()(a());n.push([e.id,".links-list{display:flex;flex-direction:column;padding-top:1rem}.links-list__link{margin-bottom:1rem}.links-list__link:hover{color:var(--accent-color)}","",{version:3,sources:["webpack://./src/pages/mainPage/_mainPage.scss"],names:[],mappings:"AAAA,YACE,YAAA,CACA,qBAAA,CACA,gBAAA,CAEA,kBACE,kBAAA,CACA,wBACE,yBAAA",sourcesContent:[".links-list {\n  display: flex;\n  flex-direction: column;\n  padding-top: 1rem;\n\n  &__link {\n    margin-bottom: 1rem;\n    &:hover {\n      color: var(--accent-color);\n    }\n  }\n}\n"],sourceRoot:""}]);const o=n},7711:(e,t,s)=>{"use strict";s.d(t,{A:()=>o});var r=s(1354),a=s.n(r),i=s(6314),n=s.n(i)()(a());n.push([e.id,".popUpMessageCanvas{position:fixed;z-index:5;top:0;left:0;bottom:0;right:0;width:100%;height:100vh;background-color:gray;opacity:50%;display:none;justify-content:center;align-items:center}.modalWrapper{position:fixed;z-index:10;width:280px;height:110px;left:50%;transform:translateX(-50%);top:50%;transform:translate(-50%);height:110px;text-align:center;border-radius:10px;background:#fff;border:1px solid #46a358;flex-direction:column;justify-content:center;align-items:center;text-align:center;display:flex;opacity:1;border-radius:5px;display:none;box-shadow:7px 4px 5px 0px rgba(0,0,0,.47)}.errorInfo{padding-top:10px}.closeMessageButton{width:100px;height:32px;border:1px solid #eaeaea;border-radius:5px;background-color:#46a358}","",{version:3,sources:["webpack://./src/pages/registrationPage/registrationForm/popUpMessage/popUpMessage.css"],names:[],mappings:"AAAA,oBACE,cAAA,CACA,SAAA,CACA,KAAA,CACA,MAAA,CACA,QAAA,CACA,OAAA,CACA,UAAA,CACA,YAAA,CACA,qBAAA,CACA,WAAA,CACA,YAAA,CACA,sBAAA,CACA,kBAAA,CAGF,cACE,cAAA,CACA,UAAA,CACA,WAAA,CACA,YAAA,CACA,QAAA,CACA,0BAAA,CACA,OAAA,CACA,yBAAA,CACA,YAAA,CAEA,iBAAA,CACA,kBAAA,CACA,eAAA,CACA,wBAAA,CACA,qBAAA,CACA,sBAAA,CACA,kBAAA,CACA,iBAAA,CACA,YAAA,CACA,SAAA,CACA,iBAAA,CACA,YAAA,CACA,0CAAA,CAGF,WACE,gBAAA,CAGF,oBACE,WAAA,CACA,WAAA,CACA,wBAAA,CACA,iBAAA,CACA,wBAAA",sourcesContent:[".popUpMessageCanvas {\n  position: fixed;\n  z-index: 5;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  width: 100%;\n  height: 100vh;\n  background-color: gray;\n  opacity: 50%;\n  display: none;\n  justify-content: center;\n  align-items: center;\n}\n\n.modalWrapper {\n  position: fixed;\n  z-index: 10;\n  width: 280px;\n  height: 110px;\n  left: 50%;\n  transform: translateX(-50%);\n  top: 50%;\n  transform: translate(-50%);\n  height: 110px;\n\n  text-align: center;\n  border-radius: 10px;\n  background: white;\n  border: 1px solid #46a358;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  display: flex;\n  opacity: 1;\n  border-radius: 5px;\n  display: none;\n  box-shadow: 7px 4px 5px 0px rgba(0, 0, 0, 0.47);\n}\n\n.errorInfo {\n  padding-top: 10px;\n}\n\n.closeMessageButton {\n  width: 100px;\n  height: 32px;\n  border: 1px solid #eaeaea;\n  border-radius: 5px;\n  background-color: #46a358;\n}\n"],sourceRoot:""}]);const o=n},3878:(e,t,s)=>{"use strict";s.d(t,{A:()=>o});var r=s(1354),a=s.n(r),i=s(6314),n=s.n(i)()(a());n.push([e.id,".registrationForm{display:flex;flex-direction:column;border-color:#eaeaea}.registrationFormText{font-size:13px;margin-top:0px;margin-bottom:14px}.inputField,.inputField:focus,.regFormSubmit{width:300px;height:40px;border:1px solid var(--input-border);border-radius:5px;padding-left:14px}.inputField::-webkit-input-placeholder{font-size:14px;color:var(--placeholder-txt);font-weight:400}.inputField::-moz-placeholder{font-size:14px;color:var(--placeholder-txt);font-weight:400}.inputField:-ms-input-placeholder{font-size:14px;color:var(--placeholder-txt);font-weight:400}.inputField::-ms-input-placeholder{font-size:14px;color:var(--placeholder-txt);font-weight:400}.inputField::placeholder{font-size:14px;color:var(--placeholder-txt);font-weight:400}.errorTip{opacity:0%;max-width:300px;color:var(--error);font-size:11px;margin:0;padding:5px 0}.regFormSubmit{background-color:var(--accent-color);color:var(--on-accent-txt)}.regFormText{margin-top:0;font-size:13px}.regFormAdressesText{font-size:13px}","",{version:3,sources:["webpack://./src/pages/registrationPage/registrationForm/registrationForm.css"],names:[],mappings:"AAAA,kBACE,YAAA,CACA,qBAAA,CACA,oBAAA,CAGF,sBACE,cAAA,CACA,cAAA,CACA,kBAAA,CAGF,6CAGE,WAAA,CACA,WAAA,CACA,oCAAA,CACA,iBAAA,CAEA,iBAAA,CAGF,uCACE,cAAA,CACA,4BAAA,CACA,eAAA,CAGF,8BACE,cAAA,CACA,4BAAA,CACA,eAAA,CAGF,kCACE,cAAA,CACA,4BAAA,CACA,eAAA,CAGF,mCACE,cAAA,CACA,4BAAA,CACA,eAAA,CAGF,yBACE,cAAA,CACA,4BAAA,CACA,eAAA,CAIF,UACE,UAAA,CACA,eAAA,CACA,kBAAA,CACA,cAAA,CACA,QAAA,CACA,aAAA,CAGF,eACE,oCAAA,CACA,0BAAA,CAGF,aACE,YAAA,CACA,cAAA,CAGF,qBACE,cAAA",sourcesContent:[".registrationForm {\n  display: flex;\n  flex-direction: column;\n  border-color: #eaeaea;\n}\n\n.registrationFormText {\n  font-size: 13px;\n  margin-top: 0px;\n  margin-bottom: 14px;\n}\n\n.inputField,\n.inputField:focus,\n.regFormSubmit {\n  width: 300px;\n  height: 40px;\n  border: 1px solid var(--input-border);\n  border-radius: 5px;\n\n  padding-left: 14px;\n}\n\n.inputField::-webkit-input-placeholder {\n  font-size: 14px;\n  color: var(--placeholder-txt);\n  font-weight: 400;\n}\n\n.inputField::-moz-placeholder {\n  font-size: 14px;\n  color: var(--placeholder-txt);\n  font-weight: 400;\n}\n\n.inputField:-ms-input-placeholder {\n  font-size: 14px;\n  color: var(--placeholder-txt);\n  font-weight: 400;\n}\n\n.inputField::-ms-input-placeholder {\n  font-size: 14px;\n  color: var(--placeholder-txt);\n  font-weight: 400;\n}\n\n.inputField::placeholder {\n  font-size: 14px;\n  color: var(--placeholder-txt);\n  font-weight: 400;\n}\n\n\n.errorTip {\n  opacity: 0%;\n  max-width: 300px;\n  color: var(--error);\n  font-size: 11px;\n  margin: 0;\n  padding: 5px 0;\n}\n\n.regFormSubmit {\n  background-color: var(--accent-color);\n  color: var(--on-accent-txt);\n}\n\n.regFormText {\n  margin-top: 0;\n  font-size: 13px;\n}\n\n.regFormAdressesText {\n  font-size: 13px;\n}"],sourceRoot:""}]);const o=n},2080:(e,t,s)=>{"use strict";s.d(t,{A:()=>o});var r=s(1354),a=s.n(r),i=s(6314),n=s.n(i)()(a());n.push([e.id,".registrationPage{margin:auto;padding:0px 100px 59px 100px;max-width:500px;display:flex;flex-direction:column;align-items:center}","",{version:3,sources:["webpack://./src/pages/registrationPage/registrationPage.css"],names:[],mappings:"AAAA,kBACE,WAAA,CACA,4BAAA,CACA,eAAA,CACA,YAAA,CACA,qBAAA,CAEA,kBAAA",sourcesContent:[".registrationPage {\n  margin: auto;\n  padding: 0px 100px 59px 100px;\n  max-width: 500px;\n  display: flex;\n  flex-direction: column;\n\n  align-items: center;\n}"],sourceRoot:""}]);const o=n},6215:(e,t,s)=>{"use strict";s.d(t,{A:()=>w});var r=s(1354),a=s.n(r),i=s(6314),n=s.n(i),o=s(1719),h=s(4417),u=s.n(h),c=new URL(s(5494),s.b),p=new URL(s(8913),s.b),g=new URL(s(2485),s.b),d=new URL(s(458),s.b),l=new URL(s(6322),s.b),y=n()(a());y.i(o.A);var A=u()(c),b=u()(p),m=u()(g),q=u()(d),f=u()(l);y.push([e.id,`.not-found{height:80vh;display:flex;justify-content:center;align-items:center;gap:10px;margin:20px}@media(max-width: 900px){.not-found{flex-direction:column}}.not-found__img{height:80%;width:50%;background-image:url(${A});background-size:contain;background-repeat:no-repeat;background-position:center}@media(max-width: 900px){.not-found__img{width:100%;height:100%}}.not-found__text-wrap{height:80%;width:50%;display:flex;flex-direction:column;justify-content:center;align-items:left}@media(max-width: 900px){.not-found__text-wrap{align-items:center;width:100%;height:auto}}.not-found__text-wrap .not-found__title{font-size:50px}@media(max-width: 1100px){.not-found__text-wrap .not-found__title{font-size:40px}}@media(max-width: 1100px)and (max-width: 900px){.not-found__text-wrap .not-found__title{font-size:30px;margin:5px}}.not-found__text-wrap .not-found__description{font-weight:400;opacity:.8}@media(max-width: 1100px){.not-found__text-wrap .not-found__description{font-size:20px}}@media(max-width: 1100px)and (max-width: 900px){.not-found__text-wrap .not-found__description{font-size:16px}}.not-found__text-wrap .not-found__home-btn{width:50%;background-color:var(--accent-color);color:var(--on-accent-txt);padding:16px 0 13px 0;border-radius:5px}.header{display:flex;align-items:center;justify-content:space-between;border-bottom:1px solid rgba(70,163,89,.5411764706);height:53px}.header .logo__link svg{width:150px;height:auto}.header .header__links-list{display:flex;list-style:none;gap:50px;margin:0;padding:0}.header .header__links-list li{cursor:pointer;transition:color .3s ease-out}.header .header__links-list li:hover{text-decoration:underline;color:var(--accent-color);text-underline-offset:13px;text-decoration-thickness:2px;text-underline-position:under}.header .active-header{font-weight:700;text-decoration:underline;color:var(--accent-color);text-underline-offset:15px;text-decoration-thickness:3px;text-underline-position:under}.header .header__wrap{display:flex;gap:15px}.header .header__wrap .header__search{padding-top:8px;width:20px;height:20px}.header .header__wrap .header__basket{padding-top:8px;width:29px;height:24px}.header .header__wrap .header__login,.header .header__wrap .header__register,.header .header__wrap .header__logout{display:flex;align-items:center;justify-content:center;text-align:center;background-color:var(--accent-color);cursor:pointer;border:none;transition:.5s;gap:4px;padding:8px 10px;border-radius:5px;color:var(--on-accent-txt)}.header .header__wrap .header__login:hover,.header .header__wrap .header__register:hover,.header .header__wrap .header__logout:hover{opacity:.7;transition:.5s}.header .header__wrap .header__login svg,.header .header__wrap .header__register svg,.header .header__wrap .header__logout svg{width:20px;height:20px}.header .header__wrap .header__logout{display:none}.header .burger-menu{display:none;flex-direction:column;gap:5px;background:none;border:none;cursor:pointer}.header .burger-menu .burger-menu__line{width:25px;height:2px;background-color:var(--accent-color)}.header .burger-menu .burger-menu__line{transition:transform .3s ease-in-out,opacity .3s ease-in-out}.header .burger-menu.active .burger-menu__line:nth-child(1){transform:rotate(45deg) translate(6px, 6px)}.header .burger-menu.active .burger-menu__line:nth-child(2){opacity:0}.header .burger-menu.active .burger-menu__line:nth-child(3){transform:rotate(-45deg) translate(4px, -4px)}.header .mobile-menu{flex-direction:column;position:absolute;top:53px;right:0;width:50%;background-color:#fff;box-shadow:0 2px 10px rgba(0,0,0,.1);padding:20px;z-index:1000;transform:translateX(100%);transition:transform .3s ease-in-out;display:none}.header .mobile-menu.active{transform:translateX(0)}.header .mobile__links-list{list-style:none;margin:0;padding:0}.header .mobile__links-list .mobile__list-item{cursor:pointer;padding:10px;transition:color .3s ease-out;text-decoration:underline;color:var(--accent-color)}.header .mobile__links-list .mobile__list-item:active{font-weight:500}.header .mobile__links-list .mobile__logout{display:none}@media(max-width: 800px){.header .logo__link svg{width:130px}.header .header__links-list{gap:15px}.header .header__wrap{gap:10px}}@media(max-width: 650px){.header .logo__link svg{width:130px}.header .header__links-list{display:none}.header .header__wrap{display:none}.header .burger-menu{display:flex}.header .mobile-menu{transform:translateX(100%)}.header .mobile-menu.active{transform:translateX(0);display:block}}@font-face{font-family:"CeraPro";src:url(${b}) format("woff");font-weight:700;font-style:normal}@font-face{font-family:"CeraPro";src:url(${m}) format("woff");font-weight:500;font-style:normal}@font-face{font-family:"CeraPro";src:url(${q}) format("woff");font-weight:400;font-style:normal}@font-face{font-family:"CeraPro";src:url(${f}) format("woff");font-weight:300;font-style:normal}*{box-sizing:border-box}:root{--bg: #fff;--base-txt: #3d3d3d;--on-accent-txt: #fff;--accent-color: #46a358;--input-border: #eaeaea;--placeholder-txt: #a5a5a5;--error: #f03800;--popup-bg: #7978787a}html{font-family:"CeraPro",sans-serif;background-color:var(--bg);color:var(--base-txt);height:100%}body{height:100%;padding:0 20px}.container{max-width:1200px;width:100%;margin:0 auto}a{text-decoration:none;color:inherit;transition:.5s;cursor:pointer}a:hover{opacity:.7;transition:.5s}button{cursor:pointer;background-color:rgba(0,0,0,0);border:none;transition:.5s}button:hover{opacity:.7;transition:.5s}`,"",{version:3,sources:["webpack://./src/styles/main.scss","webpack://./src/pages/page404/_page404.scss","webpack://./src/components/header/_header.scss"],names:[],mappings:"AAAQ,WCCN,WAAA,CACA,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,QAAA,CACA,WAAA,CACA,yBAPF,WAQI,qBAAA,CAAA,CAEF,gBACE,UAAA,CACA,SAAA,CACA,wDAAA,CACA,uBAAA,CACA,2BAAA,CACA,0BAAA,CACA,yBAPF,gBAQI,UAAA,CACA,WAAA,CAAA,CAGJ,sBACE,UAAA,CACA,SAAA,CACA,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,gBAAA,CACA,yBAPF,sBAQI,kBAAA,CACA,UAAA,CACA,WAAA,CAAA,CAGF,wCACE,cAAA,CACA,0BAFF,wCAGI,cAAA,CAAA,CACA,gDAJJ,wCAKM,cAAA,CACA,UAAA,CAAA,CAIN,8CACE,eAAA,CACA,UAAA,CACA,0BAHF,8CAII,cAAA,CAAA,CACA,gDALJ,8CAMM,cAAA,CAAA,CAIN,2CACE,SAAA,CACA,oCAAA,CACA,0BAAA,CACA,qBAAA,CACA,iBAAA,CC5DN,QACE,YAAA,CACA,kBAAA,CACA,6BAAA,CACA,mDAAA,CACA,WAAA,CAEE,wBACE,WAAA,CACA,WAAA,CAIJ,4BACE,YAAA,CACA,eAAA,CACA,QAAA,CACA,QAAA,CACA,SAAA,CACA,+BACE,cAAA,CACA,6BAAA,CAEF,qCACE,yBAAA,CACA,yBAAA,CACA,0BAAA,CACA,6BAAA,CACA,6BAAA,CAGJ,uBACE,eAAA,CACA,yBAAA,CACA,yBAAA,CACA,0BAAA,CACA,6BAAA,CACA,6BAAA,CAGF,sBACE,YAAA,CACA,QAAA,CACA,sCACE,eAAA,CACA,UAAA,CACA,WAAA,CAGF,sCACE,eAAA,CACA,UAAA,CACA,WAAA,CAGF,mHAGE,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,iBAAA,CACA,oCAAA,CACA,cAAA,CACA,WAAA,CACA,cAAA,CACA,OAAA,CACA,gBAAA,CACA,iBAAA,CACA,0BAAA,CAEA,qIACE,UAAA,CACA,cAAA,CAEF,+HACE,UAAA,CACA,WAAA,CAGJ,sCACE,YAAA,CAGJ,qBACE,YAAA,CACA,qBAAA,CACA,OAAA,CACA,eAAA,CACA,WAAA,CACA,cAAA,CAEA,wCACE,UAAA,CACA,UAAA,CACA,oCAAA,CAIJ,wCACE,4DACE,CAIJ,4DACE,2CAAA,CAGF,4DACE,SAAA,CAGF,4DACE,6CAAA,CAEF,qBACE,qBAAA,CACA,iBAAA,CACA,QAAA,CACA,OAAA,CACA,SAAA,CACA,qBAAA,CACA,oCAAA,CACA,YAAA,CACA,YAAA,CACA,0BAAA,CACA,oCAAA,CACA,YAAA,CAEF,4BACE,uBAAA,CAEF,4BACE,eAAA,CACA,QAAA,CACA,SAAA,CAEA,+CACE,cAAA,CACA,YAAA,CACA,6BAAA,CACA,yBAAA,CACA,yBAAA,CAGF,sDACE,eAAA,CAGF,4CACE,YAAA,CAIN,yBAGM,wBACE,WAAA,CAIJ,4BACE,QAAA,CAGF,sBACE,QAAA,CAAA,CAKN,yBAGM,wBACE,WAAA,CAIJ,4BACE,YAAA,CAGF,sBACE,YAAA,CAEF,qBACE,YAAA,CAGF,qBACE,0BAAA,CACA,4BACE,uBAAA,CACA,aAAA,CAAA,CFhMR,WACE,qBAAA,CACA,0DAAA,CACA,eAAA,CACA,iBAAA,CAGF,WACE,qBAAA,CACA,0DAAA,CACA,eAAA,CACA,iBAAA,CAGF,WACE,qBAAA,CACA,0DAAA,CACA,eAAA,CACA,iBAAA,CAGF,WACE,qBAAA,CACA,0DAAA,CACA,eAAA,CACA,iBAAA,CAGF,EACE,qBAAA,CAGF,MACE,UAAA,CACA,mBAAA,CACA,qBAAA,CACA,uBAAA,CACA,uBAAA,CACA,0BAAA,CACA,gBAAA,CACA,qBAAA,CAGF,KACE,gCAAA,CACA,0BAAA,CACA,qBAAA,CACA,WAAA,CAGF,KACE,WAAA,CACA,cAAA,CAGF,WACE,gBAAA,CACA,UAAA,CACA,aAAA,CAGF,EACE,oBAAA,CACA,aAAA,CACA,cAAA,CACA,cAAA,CAGF,QACE,UAAA,CACA,cAAA,CAGF,OACE,cAAA,CACA,8BAAA,CACA,WAAA,CACA,cAAA,CAGF,aACE,UAAA,CACA,cAAA",sourcesContent:["@import 'normalize.css';\n@import '../pages/page404/page404';\n@import '../components/header/header';\n\n@font-face {\n  font-family: 'CeraPro';\n  src: url('../assets/fonts/CeraPro-Bold.woff') format('woff');\n  font-weight: 700;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: 'CeraPro';\n  src: url('../assets/fonts/CeraPro-Medium.woff') format('woff');\n  font-weight: 500;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: 'CeraPro';\n  src: url('../assets/fonts/CeraPro-Regular.woff') format('woff');\n  font-weight: 400;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: 'CeraPro';\n  src: url('../assets/fonts/CeraPro-Light.woff') format('woff');\n  font-weight: 300;\n  font-style: normal;\n}\n\n* {\n  box-sizing: border-box;\n}\n\n:root {\n  --bg: #fff;\n  --base-txt: #3d3d3d;\n  --on-accent-txt: #fff;\n  --accent-color: #46a358;\n  --input-border: #eaeaea;\n  --placeholder-txt: #a5a5a5;\n  --error: #f03800;\n  --popup-bg: #7978787a;\n}\n\nhtml {\n  font-family: 'CeraPro', sans-serif;\n  background-color: var(--bg);\n  color: var(--base-txt);\n  height: 100%;\n}\n\nbody {\n  height: 100%;\n  padding: 0 20px;\n}\n\n.container {\n  max-width: 1200px;\n  width: 100%;\n  margin: 0 auto;\n}\n\na {\n  text-decoration: none;\n  color: inherit;\n  transition: 0.5s;\n  cursor: pointer;\n}\n\na:hover {\n  opacity: 0.7;\n  transition: 0.5s;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: transparent;\n  border: none;\n  transition: 0.5s;\n}\n\nbutton:hover {\n  opacity: 0.7;\n  transition: 0.5s;\n}\n",".not-found {\n  height: 80vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n  margin: 20px;\n  @media (max-width: 900px) {\n    flex-direction: column;\n  }\n  &__img {\n    height: 80%;\n    width: 50%;\n    background-image: url('../assets/images/error_404.gif');\n    background-size: contain;\n    background-repeat: no-repeat;\n    background-position: center;\n    @media (max-width: 900px) {\n      width: 100%;\n      height: 100%;\n    }\n  }\n  &__text-wrap {\n    height: 80%;\n    width: 50%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: left;\n    @media (max-width: 900px) {\n      align-items: center;\n      width: 100%;\n      height: auto;\n    }\n\n    .not-found__title {\n      font-size: 50px;\n      @media (max-width: 1100px) {\n        font-size: 40px;\n        @media (max-width: 900px) {\n          font-size: 30px;\n          margin: 5px;\n        }\n      }\n    }\n    .not-found__description {\n      font-weight: 400;\n      opacity: 0.8;\n      @media (max-width: 1100px) {\n        font-size: 20px;\n        @media (max-width: 900px) {\n          font-size: 16px;\n        }\n      }\n    }\n    .not-found__home-btn {\n      width: 50%;\n      background-color: var(--accent-color);\n      color: var(--on-accent-txt);\n      padding: 16px 0 13px 0;\n      border-radius: 5px;\n    }\n  }\n}\n",".header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-bottom: 1px solid #46a3598a;\n  height: 53px;\n  .logo__link {\n    svg {\n      width: 150px;\n      height: auto;\n    }\n  }\n\n  .header__links-list {\n    display: flex;\n    list-style: none;\n    gap: 50px;\n    margin: 0;\n    padding: 0;\n    li {\n      cursor: pointer;\n      transition: color 0.3s ease-out;\n    }\n    li:hover {\n      text-decoration: underline;\n      color: var(--accent-color);\n      text-underline-offset: 13px;\n      text-decoration-thickness: 2px;\n      text-underline-position: under;\n    }\n  }\n  .active-header {\n    font-weight: 700;\n    text-decoration: underline;\n    color: var(--accent-color);\n    text-underline-offset: 15px;\n    text-decoration-thickness: 3px;\n    text-underline-position: under;\n  }\n\n  .header__wrap {\n    display: flex;\n    gap: 15px;\n    .header__search {\n      padding-top: 8px;\n      width: 20px;\n      height: 20px;\n    }\n\n    .header__basket {\n      padding-top: 8px;\n      width: 29px;\n      height: 24px;\n    }\n\n    .header__login,\n    .header__register,\n    .header__logout {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      text-align: center;\n      background-color: var(--accent-color);\n      cursor: pointer;\n      border: none;\n      transition: 0.5s;\n      gap: 4px;\n      padding: 8px 10px;\n      border-radius: 5px;\n      color: var(--on-accent-txt);\n\n      &:hover {\n        opacity: 0.7;\n        transition: 0.5s;\n      }\n      svg {\n        width: 20px;\n        height: 20px;\n      }\n    }\n    .header__logout {\n      display: none;\n    }\n  }\n  .burger-menu {\n    display: none;\n    flex-direction: column;\n    gap: 5px;\n    background: none;\n    border: none;\n    cursor: pointer;\n\n    .burger-menu__line {\n      width: 25px;\n      height: 2px;\n      background-color: var(--accent-color);\n    }\n  }\n\n  .burger-menu .burger-menu__line {\n    transition:\n      transform 0.3s ease-in-out,\n      opacity 0.3s ease-in-out;\n  }\n\n  .burger-menu.active .burger-menu__line:nth-child(1) {\n    transform: rotate(45deg) translate(6px, 6px);\n  }\n\n  .burger-menu.active .burger-menu__line:nth-child(2) {\n    opacity: 0;\n  }\n\n  .burger-menu.active .burger-menu__line:nth-child(3) {\n    transform: rotate(-45deg) translate(4px, -4px);\n  }\n  .mobile-menu {\n    flex-direction: column;\n    position: absolute;\n    top: 53px;\n    right: 0;\n    width: 50%;\n    background-color: white;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n    padding: 20px;\n    z-index: 1000;\n    transform: translateX(100%);\n    transition: transform 0.3s ease-in-out;\n    display: none;\n  }\n  .mobile-menu.active {\n    transform: translateX(0);\n  }\n  .mobile__links-list {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n\n    .mobile__list-item {\n      cursor: pointer;\n      padding: 10px;\n      transition: color 0.3s ease-out;\n      text-decoration: underline;\n      color: var(--accent-color);\n    }\n\n    .mobile__list-item:active {\n      font-weight: 500;\n    }\n\n    .mobile__logout {\n      display: none;\n    }\n  }\n}\n@media (max-width: 800px) {\n  .header {\n    .logo__link {\n      svg {\n        width: 130px;\n      }\n    }\n\n    .header__links-list {\n      gap: 15px;\n    }\n\n    .header__wrap {\n      gap: 10px;\n    }\n  }\n}\n\n@media (max-width: 650px) {\n  .header {\n    .logo__link {\n      svg {\n        width: 130px;\n      }\n    }\n\n    .header__links-list {\n      display: none;\n    }\n\n    .header__wrap {\n      display: none;\n    }\n    .burger-menu {\n      display: flex;\n    }\n\n    .mobile-menu {\n      transform: translateX(100%);\n      &.active {\n        transform: translateX(0);\n        display: block;\n      }\n    }\n  }\n}\n"],sourceRoot:""}]);const w=y},6314:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var s="",r=void 0!==t[5];return t[4]&&(s+="@supports (".concat(t[4],") {")),t[2]&&(s+="@media ".concat(t[2]," {")),r&&(s+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),s+=e(t),r&&(s+="}"),t[2]&&(s+="}"),t[4]&&(s+="}"),s})).join("")},t.i=function(e,s,r,a,i){"string"==typeof e&&(e=[[null,e,void 0]]);var n={};if(r)for(var o=0;o<this.length;o++){var h=this[o][0];null!=h&&(n[h]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&n[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),s&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=s):c[2]=s),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),t.push(c))}},t}},4417:e=>{"use strict";e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},1354:e=>{"use strict";e.exports=function(e){var t=e[1],s=e[3];if(!s)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(a," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},251:(e,t)=>{t.read=function(e,t,s,r,a){var i,n,o=8*a-r-1,h=(1<<o)-1,u=h>>1,c=-7,p=s?a-1:0,g=s?-1:1,d=e[t+p];for(p+=g,i=d&(1<<-c)-1,d>>=-c,c+=o;c>0;i=256*i+e[t+p],p+=g,c-=8);for(n=i&(1<<-c)-1,i>>=-c,c+=r;c>0;n=256*n+e[t+p],p+=g,c-=8);if(0===i)i=1-u;else{if(i===h)return n?NaN:1/0*(d?-1:1);n+=Math.pow(2,r),i-=u}return(d?-1:1)*n*Math.pow(2,i-r)},t.write=function(e,t,s,r,a,i){var n,o,h,u=8*i-a-1,c=(1<<u)-1,p=c>>1,g=23===a?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:i-1,l=r?1:-1,y=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(o=isNaN(t)?1:0,n=c):(n=Math.floor(Math.log(t)/Math.LN2),t*(h=Math.pow(2,-n))<1&&(n--,h*=2),(t+=n+p>=1?g/h:g*Math.pow(2,1-p))*h>=2&&(n++,h/=2),n+p>=c?(o=0,n=c):n+p>=1?(o=(t*h-1)*Math.pow(2,a),n+=p):(o=t*Math.pow(2,p-1)*Math.pow(2,a),n=0));a>=8;e[s+d]=255&o,d+=l,o/=256,a-=8);for(n=n<<a|o,u+=a;u>0;e[s+d]=255&n,d+=l,n/=256,u-=8);e[s+d-l]|=128*y}},4623:function(e){"undefined"!=typeof self&&self,e.exports=function(){"use strict";var e={407:function(e,t,s){s.d(t,{default:function(){return _}});var r=/([:*])(\w+)/g,a=/\*/g,i=/\/\?/g;function n(e){return void 0===e&&(e="/"),y()?location.pathname+location.search+location.hash:e}function o(e){return e.replace(/\/+$/,"").replace(/^\/+/,"")}function h(e){return"string"==typeof e}function u(e){return e&&e.indexOf("#")>=0&&e.split("#").pop()||""}function c(e){var t=o(e).split(/\?(.*)?$/);return[o(t[0]),t.slice(1).join("")]}function p(e){for(var t={},s=e.split("&"),r=0;r<s.length;r++){var a=s[r].split("=");if(""!==a[0]){var i=decodeURIComponent(a[0]);t[i]?(Array.isArray(t[i])||(t[i]=[t[i]]),t[i].push(decodeURIComponent(a[1]||""))):t[i]=decodeURIComponent(a[1]||"")}}return t}function g(e,t){var s,n=c(o(e.currentLocationPath)),g=n[0],d=n[1],l=""===d?null:p(d),y=[];if(h(t.path)){if(s="(?:/^|^)"+o(t.path).replace(r,(function(e,t,s){return y.push(s),"([^/]+)"})).replace(a,"?(?:.*)").replace(i,"/?([^/]+|)")+"$",""===o(t.path)&&""===o(g))return{url:g,queryString:d,hashString:u(e.to),route:t,data:null,params:l}}else s=t.path;var A=new RegExp(s,""),b=g.match(A);if(b){var m=h(t.path)?function(e,t){return 0===t.length?null:e?e.slice(1,e.length).reduce((function(e,s,r){return null===e&&(e={}),e[t[r]]=decodeURIComponent(s),e}),null):null}(b,y):b.groups?b.groups:b.slice(1);return{url:o(g.replace(new RegExp("^"+e.instance.root),"")),queryString:d,hashString:u(e.to),route:t,data:m,params:l}}return!1}function d(){return!("undefined"==typeof window||!window.history||!window.history.pushState)}function l(e,t){return void 0===e[t]||!0===e[t]}function y(){return"undefined"!=typeof window}function A(e,t){return void 0===e&&(e=[]),void 0===t&&(t={}),e.filter((function(e){return e})).forEach((function(e){["before","after","already","leave"].forEach((function(s){e[s]&&(t[s]||(t[s]=[]),t[s].push(e[s]))}))})),t}function b(e,t,s){var r=t||{},a=0;!function t(){e[a]?Array.isArray(e[a])?(e.splice.apply(e,[a,1].concat(e[a][0](r)?e[a][1]:e[a][2])),t()):e[a](r,(function(e){void 0===e||!0===e?(a+=1,t()):s&&s(r)})):s&&s(r)}()}function m(e,t){void 0===e.currentLocationPath&&(e.currentLocationPath=e.to=n(e.instance.root)),e.currentLocationPath=e.instance._checkForAHash(e.currentLocationPath),t()}function q(e,t){for(var s=0;s<e.instance.routes.length;s++){var r=g(e,e.instance.routes[s]);if(r&&(e.matches||(e.matches=[]),e.matches.push(r),"ONE"===e.resolveOptions.strategy))return void t()}t()}function f(e,t){e.navigateOptions&&(void 0!==e.navigateOptions.shouldResolve&&console.warn('"shouldResolve" is deprecated. Please check the documentation.'),void 0!==e.navigateOptions.silent&&console.warn('"silent" is deprecated. Please check the documentation.')),t()}function w(e,t){!0===e.navigateOptions.force?(e.instance._setCurrent([e.instance._pathToMatchObject(e.to)]),t(!1)):t()}b.if=function(e,t,s){return Array.isArray(t)||(t=[t]),Array.isArray(s)||(s=[s]),[e,t,s]};var U=y(),x=d();function C(e,t){if(l(e.navigateOptions,"updateBrowserURL")){var s=("/"+e.to).replace(/\/\//g,"/"),r=U&&e.resolveOptions&&!0===e.resolveOptions.hash;x?(history[e.navigateOptions.historyAPIMethod||"pushState"](e.navigateOptions.stateObj||{},e.navigateOptions.title||"",r?"#"+s:s),location&&location.hash&&(e.instance.__freezeListening=!0,setTimeout((function(){if(!r){var t=location.hash;location.hash="",location.hash=t}e.instance.__freezeListening=!1}),1))):U&&(window.location.href=e.to)}t()}function R(e,t){var s=e.instance;s.lastResolved()?b(s.lastResolved().map((function(t){return function(s,r){if(t.route.hooks&&t.route.hooks.leave){var a,i=e.instance.matchLocation(t.route.path,e.currentLocationPath,!1);a="*"!==t.route.path?!i:!(e.matches&&e.matches.find((function(e){return t.route.path===e.route.path}))),l(e.navigateOptions,"callHooks")&&a?b(t.route.hooks.leave.map((function(t){return function(s,r){return t((function(t){!1===t?e.instance.__markAsClean(e):r()}),e.matches&&e.matches.length>0?1===e.matches.length?e.matches[0]:e.matches:void 0)}})).concat([function(){return r()}])):r()}else r()}})),{},(function(){return t()})):t()}function T(e,t){l(e.navigateOptions,"updateState")&&e.instance._setCurrent(e.matches),t()}var E=[function(e,t){var s=e.instance.lastResolved();if(s&&s[0]&&s[0].route===e.match.route&&s[0].url===e.match.url&&s[0].queryString===e.match.queryString)return s.forEach((function(t){t.route.hooks&&t.route.hooks.already&&l(e.navigateOptions,"callHooks")&&t.route.hooks.already.forEach((function(t){return t(e.match)}))})),void t(!1);t()},function(e,t){e.match.route.hooks&&e.match.route.hooks.before&&l(e.navigateOptions,"callHooks")?b(e.match.route.hooks.before.map((function(t){return function(s,r){return t((function(t){!1===t?e.instance.__markAsClean(e):r()}),e.match)}})).concat([function(){return t()}])):t()},function(e,t){l(e.navigateOptions,"callHandler")&&e.match.route.handler(e.match),e.instance.updatePageLinks(),t()},function(e,t){e.match.route.hooks&&e.match.route.hooks.after&&l(e.navigateOptions,"callHooks")&&e.match.route.hooks.after.forEach((function(t){return t(e.match)})),t()}],K=[R,function(e,t){var s=e.instance._notFoundRoute;if(s){e.notFoundHandled=!0;var r=c(e.currentLocationPath),a=r[0],i=r[1],n=u(e.to);s.path=o(a);var h={url:s.path,queryString:i,hashString:n,data:null,route:s,params:""!==i?p(i):null};e.matches=[h],e.match=h}t()},b.if((function(e){return e.notFoundHandled}),E.concat([T]),[function(e,t){e.resolveOptions&&!1!==e.resolveOptions.noMatchWarning&&void 0!==e.resolveOptions.noMatchWarning||console.warn('Navigo: "'+e.currentLocationPath+"\" didn't match any of the registered routes."),t()},function(e,t){e.instance._setCurrent(null),t()}])];function j(){return(j=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var s=arguments[t];for(var r in s)Object.prototype.hasOwnProperty.call(s,r)&&(e[r]=s[r])}return e}).apply(this,arguments)}function B(e,t){var s=0;R(e,(function r(){s!==e.matches.length?b(E,j({},e,{match:e.matches[s]}),(function(){s+=1,r()})):T(e,t)}))}function k(e){e.instance.__markAsClean(e)}function P(){return(P=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var s=arguments[t];for(var r in s)Object.prototype.hasOwnProperty.call(s,r)&&(e[r]=s[r])}return e}).apply(this,arguments)}var v="[data-navigo]";function _(e,t){var s,r=t||{strategy:"ONE",hash:!1,noMatchWarning:!1,linksSelector:v},a=this,i="/",l=null,U=[],x=!1,R=d(),T=y();function E(e){return e.indexOf("#")>=0&&(e=!0===r.hash?e.split("#")[1]||"/":e.split("#")[0]),e}function j(e){return o(i+"/"+o(e))}function _(e,t,s,r){return e=h(e)?j(e):e,{name:r||o(String(e)),path:e,handler:t,hooks:A(s)}}function I(e,t){if(!a.__dirty){a.__dirty=!0,e=e?o(i)+"/"+o(e):void 0;var s={instance:a,to:e,currentLocationPath:e,navigateOptions:{},resolveOptions:P({},r,t)};return b([m,q,b.if((function(e){var t=e.matches;return t&&t.length>0}),B,K)],s,k),!!s.matches&&s.matches}a.__waiting.push((function(){return a.resolve(e,t)}))}function V(e,t){if(a.__dirty)a.__waiting.push((function(){return a.navigate(e,t)}));else{a.__dirty=!0,e=o(i)+"/"+o(e);var s={instance:a,to:e,navigateOptions:t||{},resolveOptions:t&&t.resolveOptions?t.resolveOptions:r,currentLocationPath:E(e)};b([f,w,q,b.if((function(e){var t=e.matches;return t&&t.length>0}),B,K),C,k],s,k)}}function D(){if(T)return(T?[].slice.call(document.querySelectorAll(r.linksSelector||v)):[]).forEach((function(e){"false"!==e.getAttribute("data-navigo")&&"_blank"!==e.getAttribute("target")?e.hasListenerAttached||(e.hasListenerAttached=!0,e.navigoHandler=function(t){if((t.ctrlKey||t.metaKey)&&"a"===t.target.tagName.toLowerCase())return!1;var s=e.getAttribute("href");if(null==s)return!1;if(s.match(/^(http|https)/)&&"undefined"!=typeof URL)try{var r=new URL(s);s=r.pathname+r.search}catch(e){}var i=function(e){if(!e)return{};var t,s=e.split(","),r={};return s.forEach((function(e){var s=e.split(":").map((function(e){return e.replace(/(^ +| +$)/g,"")}));switch(s[0]){case"historyAPIMethod":r.historyAPIMethod=s[1];break;case"resolveOptionsStrategy":t||(t={}),t.strategy=s[1];break;case"resolveOptionsHash":t||(t={}),t.hash="true"===s[1];break;case"updateBrowserURL":case"callHandler":case"updateState":case"force":r[s[0]]="true"===s[1]}})),t&&(r.resolveOptions=t),r}(e.getAttribute("data-navigo-options"));x||(t.preventDefault(),t.stopPropagation(),a.navigate(o(s),i))},e.addEventListener("click",e.navigoHandler)):e.hasListenerAttached&&e.removeEventListener("click",e.navigoHandler)})),a}function S(e,t,s){var r=U.find((function(t){return t.name===e})),a=null;if(r){if(a=r.path,t)for(var n in t)a=a.replace(":"+n,t[n]);a=a.match(/^\//)?a:"/"+a}return a&&s&&!s.includeRoot&&(a=a.replace(new RegExp("^/"+i),"")),a}function M(e){var t=c(o(e)),r=t[0],a=t[1],i=""===a?null:p(a);return{url:r,queryString:a,hashString:u(e),route:_(r,(function(){}),[s],r),data:null,params:i}}function O(e,t,s){return"string"==typeof t&&(t=L(t)),t?(t.hooks[e]||(t.hooks[e]=[]),t.hooks[e].push(s),function(){t.hooks[e]=t.hooks[e].filter((function(e){return e!==s}))}):(console.warn("Route doesn't exists: "+t),function(){})}function L(e){return"string"==typeof e?U.find((function(t){return t.name===j(e)})):U.find((function(t){return t.handler===e}))}e?i=o(e):console.warn('Navigo requires a root path in its constructor. If not provided will use "/" as default.'),this.root=i,this.routes=U,this.destroyed=x,this.current=l,this.__freezeListening=!1,this.__waiting=[],this.__dirty=!1,this.__markAsClean=function(e){e.instance.__dirty=!1,e.instance.__waiting.length>0&&e.instance.__waiting.shift()()},this.on=function(e,t,r){var a=this;return"object"!=typeof e||e instanceof RegExp?("function"==typeof e&&(r=t,t=e,e=i),U.push(_(e,t,[s,r])),this):(Object.keys(e).forEach((function(t){if("function"==typeof e[t])a.on(t,e[t]);else{var r=e[t],i=r.uses,n=r.as,o=r.hooks;U.push(_(t,i,[s,o],n))}})),this)},this.off=function(e){return this.routes=U=U.filter((function(t){return h(e)?o(t.path)!==o(e):"function"==typeof e?e!==t.handler:String(t.path)!==String(e)})),this},this.resolve=I,this.navigate=V,this.navigateByName=function(e,t,s){var r=S(e,t);return null!==r&&(V(r.replace(new RegExp("^/?"+i),""),s),!0)},this.destroy=function(){this.routes=U=[],R&&window.removeEventListener("popstate",this.__popstateListener),this.destroyed=x=!0},this.notFound=function(e,t){return a._notFoundRoute=_("*",e,[s,t],"__NOT_FOUND__"),this},this.updatePageLinks=D,this.link=function(e){return"/"+i+"/"+o(e)},this.hooks=function(e){return s=e,this},this.extractGETParameters=function(e){return c(E(e))},this.lastResolved=function(){return l},this.generate=S,this.getLinkPath=function(e){return e.getAttribute("href")},this.match=function(e){var t={instance:a,currentLocationPath:e,to:e,navigateOptions:{},resolveOptions:r};return q(t,(function(){})),!!t.matches&&t.matches},this.matchLocation=function(e,t,s){void 0===t||void 0!==s&&!s||(t=j(t));var r={instance:a,to:t,currentLocationPath:t};return m(r,(function(){})),"string"==typeof e&&(e=void 0===s||s?j(e):e),g(r,{name:String(e),path:e,handler:function(){},hooks:{}})||!1},this.getCurrentLocation=function(){return M(o(n(i)).replace(new RegExp("^"+i),""))},this.addBeforeHook=O.bind(this,"before"),this.addAfterHook=O.bind(this,"after"),this.addAlreadyHook=O.bind(this,"already"),this.addLeaveHook=O.bind(this,"leave"),this.getRoute=L,this._pathToMatchObject=M,this._clean=o,this._checkForAHash=E,this._setCurrent=function(e){return l=a.current=e},function(){R&&(this.__popstateListener=function(){a.__freezeListening||I()},window.addEventListener("popstate",this.__popstateListener))}.call(this),D.call(this)}}},t={};function s(r){if(t[r])return t[r].exports;var a=t[r]={exports:{}};return e[r](a,a.exports,s),a.exports}return s.d=function(e,t){for(var r in t)s.o(t,r)&&!s.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s(407)}().default},3092:(e,t,s)=>{"use strict";var r=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==s.g)return s.g;throw new Error("unable to locate global object")}();e.exports=t=r.fetch,r.fetch&&(t.default=r.fetch.bind(r)),t.Headers=r.Headers,t.Request=r.Request,t.Response=r.Response},5863:(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>b});var r=s(5072),a=s.n(r),i=s(7825),n=s.n(i),o=s(7659),h=s.n(o),u=s(5056),c=s.n(u),p=s(540),g=s.n(p),d=s(1113),l=s.n(d),y=s(7632),A={};A.styleTagTransform=l(),A.setAttributes=c(),A.insert=h().bind(null,"head"),A.domAPI=n(),A.insertStyleElement=g(),a()(y.A,A);const b=y.A&&y.A.locals?y.A.locals:void 0},1497:(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>b});var r=s(5072),a=s.n(r),i=s(7825),n=s.n(i),o=s(7659),h=s.n(o),u=s(5056),c=s.n(u),p=s(540),g=s.n(p),d=s(1113),l=s.n(d),y=s(110),A={};A.styleTagTransform=l(),A.setAttributes=c(),A.insert=h().bind(null,"head"),A.domAPI=n(),A.insertStyleElement=g(),a()(y.A,A);const b=y.A&&y.A.locals?y.A.locals:void 0},5839:(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>b});var r=s(5072),a=s.n(r),i=s(7825),n=s.n(i),o=s(7659),h=s.n(o),u=s(5056),c=s.n(u),p=s(540),g=s.n(p),d=s(1113),l=s.n(d),y=s(240),A={};A.styleTagTransform=l(),A.setAttributes=c(),A.insert=h().bind(null,"head"),A.domAPI=n(),A.insertStyleElement=g(),a()(y.A,A);const b=y.A&&y.A.locals?y.A.locals:void 0},6677:(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>b});var r=s(5072),a=s.n(r),i=s(7825),n=s.n(i),o=s(7659),h=s.n(o),u=s(5056),c=s.n(u),p=s(540),g=s.n(p),d=s(1113),l=s.n(d),y=s(5218),A={};A.styleTagTransform=l(),A.setAttributes=c(),A.insert=h().bind(null,"head"),A.domAPI=n(),A.insertStyleElement=g(),a()(y.A,A);const b=y.A&&y.A.locals?y.A.locals:void 0},1772:(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>b});var r=s(5072),a=s.n(r),i=s(7825),n=s.n(i),o=s(7659),h=s.n(o),u=s(5056),c=s.n(u),p=s(540),g=s.n(p),d=s(1113),l=s.n(d),y=s(4633),A={};A.styleTagTransform=l(),A.setAttributes=c(),A.insert=h().bind(null,"head"),A.domAPI=n(),A.insertStyleElement=g(),a()(y.A,A);const b=y.A&&y.A.locals?y.A.locals:void 0},3853:(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>b});var r=s(5072),a=s.n(r),i=s(7825),n=s.n(i),o=s(7659),h=s.n(o),u=s(5056),c=s.n(u),p=s(540),g=s.n(p),d=s(1113),l=s.n(d),y=s(9944),A={};A.styleTagTransform=l(),A.setAttributes=c(),A.insert=h().bind(null,"head"),A.domAPI=n(),A.insertStyleElement=g(),a()(y.A,A);const b=y.A&&y.A.locals?y.A.locals:void 0},885:(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>b});var r=s(5072),a=s.n(r),i=s(7825),n=s.n(i),o=s(7659),h=s.n(o),u=s(5056),c=s.n(u),p=s(540),g=s.n(p),d=s(1113),l=s.n(d),y=s(4624),A={};A.styleTagTransform=l(),A.setAttributes=c(),A.insert=h().bind(null,"head"),A.domAPI=n(),A.insertStyleElement=g(),a()(y.A,A);const b=y.A&&y.A.locals?y.A.locals:void 0},5270:(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>b});var r=s(5072),a=s.n(r),i=s(7825),n=s.n(i),o=s(7659),h=s.n(o),u=s(5056),c=s.n(u),p=s(540),g=s.n(p),d=s(1113),l=s.n(d),y=s(7711),A={};A.styleTagTransform=l(),A.setAttributes=c(),A.insert=h().bind(null,"head"),A.domAPI=n(),A.insertStyleElement=g(),a()(y.A,A);const b=y.A&&y.A.locals?y.A.locals:void 0},8462:(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>b});var r=s(5072),a=s.n(r),i=s(7825),n=s.n(i),o=s(7659),h=s.n(o),u=s(5056),c=s.n(u),p=s(540),g=s.n(p),d=s(1113),l=s.n(d),y=s(3878),A={};A.styleTagTransform=l(),A.setAttributes=c(),A.insert=h().bind(null,"head"),A.domAPI=n(),A.insertStyleElement=g(),a()(y.A,A);const b=y.A&&y.A.locals?y.A.locals:void 0},7469:(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>b});var r=s(5072),a=s.n(r),i=s(7825),n=s.n(i),o=s(7659),h=s.n(o),u=s(5056),c=s.n(u),p=s(540),g=s.n(p),d=s(1113),l=s.n(d),y=s(2080),A={};A.styleTagTransform=l(),A.setAttributes=c(),A.insert=h().bind(null,"head"),A.domAPI=n(),A.insertStyleElement=g(),a()(y.A,A);const b=y.A&&y.A.locals?y.A.locals:void 0},7852:(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>b});var r=s(5072),a=s.n(r),i=s(7825),n=s.n(i),o=s(7659),h=s.n(o),u=s(5056),c=s.n(u),p=s(540),g=s.n(p),d=s(1113),l=s.n(d),y=s(6215),A={};A.styleTagTransform=l(),A.setAttributes=c(),A.insert=h().bind(null,"head"),A.domAPI=n(),A.insertStyleElement=g(),a()(y.A,A);const b=y.A&&y.A.locals?y.A.locals:void 0},5072:e=>{"use strict";var t=[];function s(e){for(var s=-1,r=0;r<t.length;r++)if(t[r].identifier===e){s=r;break}return s}function r(e,r){for(var i={},n=[],o=0;o<e.length;o++){var h=e[o],u=r.base?h[0]+r.base:h[0],c=i[u]||0,p="".concat(u," ").concat(c);i[u]=c+1;var g=s(p),d={css:h[1],media:h[2],sourceMap:h[3],supports:h[4],layer:h[5]};if(-1!==g)t[g].references++,t[g].updater(d);else{var l=a(d,r);r.byIndex=o,t.splice(o,0,{identifier:p,updater:l,references:1})}n.push(p)}return n}function a(e,t){var s=t.domAPI(t);return s.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;s.update(e=t)}else s.remove()}}e.exports=function(e,a){var i=r(e=e||[],a=a||{});return function(e){e=e||[];for(var n=0;n<i.length;n++){var o=s(i[n]);t[o].references--}for(var h=r(e,a),u=0;u<i.length;u++){var c=s(i[u]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}i=h}}},7659:e=>{"use strict";var t={};e.exports=function(e,s){var r=function(e){if(void 0===t[e]){var s=document.querySelector(e);if(window.HTMLIFrameElement&&s instanceof window.HTMLIFrameElement)try{s=s.contentDocument.head}catch(e){s=null}t[e]=s}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(s)}},540:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},5056:(e,t,s)=>{"use strict";e.exports=function(e){var t=s.nc;t&&e.setAttribute("nonce",t)}},7825:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(s){!function(e,t,s){var r="";s.supports&&(r+="@supports (".concat(s.supports,") {")),s.media&&(r+="@media ".concat(s.media," {"));var a=void 0!==s.layer;a&&(r+="@layer".concat(s.layer.length>0?" ".concat(s.layer):""," {")),r+=s.css,a&&(r+="}"),s.media&&(r+="}"),s.supports&&(r+="}");var i=s.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,s)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},1113:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},9465:e=>{e.exports='<svg viewBox="0 0 31 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M17.1567 20.25H9.89163C6.79003 20.25 4.26667 17.7267 4.26667 14.6251V8.85947C4.26667 5.9762 2.82958 3.30739 0.422521 1.72031C-0.00975775 1.43531 -0.129101 0.853876 0.155897 0.421598C0.440896 -0.0107278 1.02228 -0.130118 1.45465 0.154974C2.82874 1.06097 3.94351 2.2559 4.74067 3.63167C4.91293 3.82466 6.30202 5.29699 8.57919 5.29699H19.3748C22.3201 5.24191 24.6254 8.19769 23.8554 11.0406L22.6126 15.9939C21.9839 18.4998 19.7404 20.25 17.1567 20.25ZM5.90513 6.64234C6.06099 7.36238 6.14166 8.10483 6.14166 8.85947V14.6251C6.14166 16.6928 7.8239 18.375 9.89163 18.375H17.1567C18.8792 18.375 20.3748 17.2082 20.794 15.5376L22.0367 10.5844C22.4943 8.89509 21.1243 7.13931 19.3748 7.17198H8.57914C7.54926 7.17198 6.65283 6.94993 5.90513 6.64234ZM9.42289 22.8281C9.42289 22.1809 8.89822 21.6563 8.25102 21.6563C6.69609 21.7182 6.69745 23.9387 8.25102 24C8.89822 24 9.42289 23.4753 9.42289 22.8281ZM18.751 22.8281C18.751 22.1809 18.2263 21.6563 17.5791 21.6563C16.0242 21.7182 16.0255 23.9387 17.5791 24C18.2263 24 18.751 23.4753 18.751 22.8281ZM20.3123 9.98446C20.3123 9.46668 19.8925 9.04697 19.3748 9.04697H8.95414C7.71027 9.09647 7.71121 10.8729 8.95414 10.922H19.3748C19.8925 10.922 20.3123 10.5022 20.3123 9.98446Z" fill="#3D3D3D"></path><circle cx="23.001" cy="8" r="7" fill="#46A358" stroke="white" stroke-width="2"></circle></svg>'},2918:e=>{e.exports='<svg viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M18.1601 10.1006H8.12598" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path><path d="M15.7212 7.67059L18.1612 10.1006L15.7212 12.5306" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path><path d="M13.6342 6.35823C13.3592 3.3749 12.2425 2.29156 7.80082 2.29156C1.88332 2.29156 1.88332 4.21656 1.88332 9.9999C1.88332 15.7832 1.88332 17.7082 7.80082 17.7082C12.2425 17.7082 13.3592 16.6249 13.6342 13.6416" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></svg>'},8270:e=>{e.exports='<svg viewBox="0 0 150 35" fill="none" xmlns="http://www.w3.org/2000/svg"><g clip-path="url(#clip0_2_71)"><path d="M17.15 0C7.67748 0 0 7.67746 0 17.15C0 26.0201 6.73548 33.3175 15.3711 34.207C14.8496 29.9134 15.0436 26.4001 15.7067 23.5135C15.3347 21.7225 14.4898 19.0703 12.5734 17.1864C12.5734 17.1864 13.8348 19.0784 14.5181 21.6214C14.5181 21.6255 14.5221 21.6295 14.5221 21.6335C14.5949 21.9044 14.6596 22.1793 14.7162 22.4623C14.7283 22.527 14.7404 22.5917 14.7526 22.6604C14.8051 22.9515 14.8536 23.2426 14.886 23.5418C5.19513 22.3532 3.12921 13.6569 3.35561 10.3781C13.665 10.9482 15.7754 17.8292 16.0827 22.0985C19.4585 11.0412 30.1843 10.4024 31.0697 10.3781C31.4538 18.8763 25.1509 25.5026 17.6149 26.0807C17.6635 25.8503 17.7201 25.6198 17.7767 25.3934C17.7928 25.3247 17.813 25.26 17.8333 25.1913C17.8777 25.0296 17.9222 24.8679 17.9748 24.7061C17.995 24.6374 18.0192 24.5646 18.0394 24.4959C18.096 24.318 18.1567 24.1442 18.2173 23.9663C18.2335 23.9259 18.2456 23.8854 18.2618 23.845C18.3386 23.6348 18.4195 23.4326 18.5003 23.2305C18.5084 23.2143 18.5125 23.1941 18.5205 23.1779C18.5205 23.1779 18.5205 23.1779 18.5246 23.1779C20.4571 18.5043 24.0229 15.4439 24.0229 15.4439C17.0247 19.4868 15.8441 29.9983 15.6582 34.2231C16.1514 34.2676 16.6446 34.2999 17.15 34.2999C26.6225 34.2999 34.3 26.6225 34.3 17.15C34.3 7.67746 26.6225 0 17.15 0Z" fill="#46A358"></path><path d="M46.7037 10.7454C48.9718 10.7454 50.8235 11.7197 52.0242 13.4986L49.7764 15.4109C48.9718 14.287 47.9975 13.7048 46.6471 13.7048C44.5691 13.7048 43.2753 15.0713 43.2753 17.1534C43.2753 19.2719 44.6418 20.695 46.8372 20.695C48.0177 20.695 48.9556 20.2826 49.554 19.5912V19.0091H46.6673V16.2356H52.7762V20.133C52.194 21.1639 51.3693 21.9887 50.3019 22.6234C49.2346 23.242 48.0339 23.5614 46.7037 23.5614C42.9923 23.618 39.9237 20.7313 39.9763 17.1534C39.9197 13.5956 42.9923 10.6888 46.7037 10.7454Z" fill="#46A358"></path><path d="M61.9576 23.3316L59.168 19.4908H57.8379V23.3316H54.6157V10.9684H59.4672C62.2204 10.9684 64.2459 12.6543 64.2459 15.2215C64.2459 16.7376 63.5141 17.995 62.2972 18.7429L65.5558 23.3316H61.9576ZM57.8338 16.681H59.4833C60.3809 16.681 60.963 16.0988 60.963 15.2215C60.963 14.3442 60.3809 13.7782 59.4833 13.7782H57.8338V16.681Z" fill="#46A358"></path><path d="M66.8333 10.9684H75.4124V13.8712H70.0555V15.5773H73.876V18.2739H70.0555V20.4288H75.6388V23.3316H66.8333V10.9684Z" fill="#46A358"></path><path d="M77.6441 10.9684H86.2231V13.8712H80.8663V15.5773H84.6868V18.2739H80.8663V20.4288H86.4495V23.3316H77.6441V10.9684Z" fill="#46A358"></path><path d="M99.4192 10.9683V23.5579H98.3882L91.681 17.057V23.3315H88.4588V10.7419H89.4897L96.197 17.1499V10.9683H99.4192Z" fill="#46A358"></path><path d="M103.264 19.135C103.996 20.1094 104.764 20.7279 106.017 20.7279C106.862 20.7279 107.291 20.4288 107.291 19.8264C107.291 19.2846 107.008 19.1148 106.033 18.6822L104.76 18.1203C102.718 17.2187 101.631 16.0584 101.631 14.3927C101.631 12.2014 103.43 10.7379 105.957 10.7379C107.998 10.7379 109.442 11.7123 110.19 13.2283L108.035 14.8778C107.436 13.9803 106.874 13.5679 105.993 13.5679C105.318 13.5679 104.889 13.8307 104.889 14.3563C104.889 14.8051 105.152 15.0517 105.957 15.367L107.38 15.9654C109.535 16.867 110.545 17.9505 110.545 19.6929C110.545 22.0904 108.576 23.5539 106.009 23.5539C103.782 23.5539 101.982 22.4866 101.081 20.7805L103.264 19.135Z" fill="#46A358"></path><path d="M112.393 10.9684H115.615V15.4843H120.131V10.9684H123.353V23.3316H120.131V18.3871H115.615V23.3316H112.393V10.9684Z" fill="#46A358"></path><path d="M131.843 10.7419C135.441 10.6651 138.607 13.6084 138.53 17.1499C138.603 20.7279 135.441 23.6145 131.843 23.5579C128.229 23.6145 125.116 20.7279 125.193 17.1499C125.116 13.6084 128.229 10.6692 131.843 10.7419ZM131.859 13.7014C129.874 13.7014 128.488 15.1083 128.488 17.1499C128.488 18.1809 128.807 19.0218 129.426 19.6606C130.044 20.2791 130.869 20.5985 131.859 20.5985C133.772 20.5985 135.231 19.2118 135.231 17.1499C135.235 15.1083 133.772 13.7014 131.859 13.7014Z" fill="#46A358"></path><path d="M140.374 10.9684H145.226C147.979 10.9684 150.004 12.6543 150.004 15.2215C150.004 17.7524 147.926 19.4908 145.226 19.4908H143.596V23.3316H140.374V10.9684ZM145.242 16.681C146.139 16.681 146.721 16.0988 146.721 15.2215C146.721 14.3442 146.139 13.7782 145.242 13.7782H143.592V16.681H145.242Z" fill="#46A358"></path></g><defs><clipPath id="clip0_2_71"><rect width="150" height="34.2999" fill="white"></rect></clipPath></defs></svg>'},360:e=>{e.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512" fill="white"><path d="M96 128a128 128 0 1 1 256 0A128 128 0 1 1 96 128zM0 482.3C0 383.8 79.8 304 178.3 304h91.4C368.2 304 448 383.8 448 482.3c0 16.4-13.3 29.7-29.7 29.7H29.7C13.3 512 0 498.7 0 482.3zM504 312V248H440c-13.3 0-24-10.7-24-24s10.7-24 24-24h64V136c0-13.3 10.7-24 24-24s24 10.7 24 24v64h64c13.3 0 24 10.7 24 24s-10.7 24-24 24H552v64c0 13.3-10.7 24-24 24s-24-10.7-24-24z"></path></svg>'},6491:e=>{e.exports='<svg viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M14.5726 16.0029C10.5755 19.1865 4.988 18.3056 2.02842 14.6542C-0.828088 11.129 -0.64944 6.04347 2.44943 2.82482C5.65137 -0.500594 10.6854 -0.944524 14.3346 1.78337C15.642 2.76051 16.6183 4.00364 17.2542 5.50838C17.8938 7.02186 18.0881 8.59654 17.8663 10.2205C17.6452 11.837 17 13.2775 15.9499 14.6217C16.0349 14.6773 16.1255 14.7173 16.1904 14.7822C17.3448 15.9311 18.4947 17.0843 19.6491 18.2331C19.9227 18.5054 20.0589 18.8225 19.9776 19.2047C19.8165 19.9651 18.9107 20.2586 18.3298 19.7366C18.0575 19.4925 17.807 19.2234 17.5484 18.9649C16.6002 18.0177 15.6526 17.0699 14.7044 16.1227C14.665 16.0853 14.6238 16.0503 14.5726 16.0029ZM15.9605 8.98677C15.9705 5.12689 12.8529 2.00627 8.98261 2.00065C5.12292 1.99503 2.00781 5.09068 1.99094 8.94806C1.97408 12.8173 5.08544 15.9467 8.96762 15.9648C12.8117 15.9829 15.9505 12.8504 15.9605 8.98677Z" fill="#3D3D3D"></path></svg>'},8675:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=r(s(4514)),i=r(s(7722)),n=r(s(5791)),o=r(s(4459)),h=()=>{(0,n.default)(window.location.pathname),document.body.append(a.default,i.default)};document.addEventListener("DOMContentLoaded",h),(0,o.default)(),t.default=h},5310:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=s(6467),i=s(2503),n=r(s(8120));t.default=class{constructor(e,t){this.ADMIN_CLIENT_ID="r6aJk8t2mER-SsDGxEW0VkK_",this.ADMIN_CLIENT_SECRET="1RFF5OrGsPbZjYM5bsC2EJUy0c3exCy8",this.SCOPES="view_products:rsschool-green-shop-key view_associate_roles:rsschool-green-shop-key view_product_selections:rsschool-green-shop-key view_customers:rsschool-green-shop-key view_tax_categories:rsschool-green-shop-key view_quote_requests:rsschool-green-shop-key view_connectors:rsschool-green-shop-key view_quotes:rsschool-green-shop-key view_customer_groups:rsschool-green-shop-key view_orders:rsschool-green-shop-key view_staged_quotes:rsschool-green-shop-key view_stores:rsschool-green-shop-key view_standalone_prices:rsschool-green-shop-key view_payments:rsschool-green-shop-key view_cart_discounts:rsschool-green-shop-key view_key_value_documents:rsschool-green-shop-key view_business_units:rsschool-green-shop-key view_order_edits:rsschool-green-shop-key view_categories:rsschool-green-shop-key view_sessions:rsschool-green-shop-key view_messages:rsschool-green-shop-key view_project_settings:rsschool-green-shop-key view_attribute_groups:rsschool-green-shop-key manage_customers:rsschool-green-shop-key view_shipping_methods:rsschool-green-shop-key view_discount_codes:rsschool-green-shop-key view_states:rsschool-green-shop-key view_import_containers:rsschool-green-shop-key view_published_products:rsschool-green-shop-key view_connectors_deployments:rsschool-green-shop-key view_shopping_lists:rsschool-green-shop-key view_audit_log:rsschool-green-shop-key view_types:rsschool-green-shop-key".split(" "),this.AUTH_URL="https://auth.europe-west1.gcp.commercetools.com",this.API_URL="https://api.europe-west1.gcp.commercetools.com",this.projectKey="MISSING_ENV_VAR".CTP_PROJECT_KEY,this.tokenCache=(0,n.default)({}),this.projectKey="rsschool-green-shop-key",this.SCOPES=["view_products:rsschool-green-shop-key view_associate_roles:rsschool-green-shop-key view_customers:rsschool-green-shop-key view_quote_requests:rsschool-green-shop-key view_connectors:rsschool-green-shop-key view_quotes:rsschool-green-shop-key view_customer_groups:rsschool-green-shop-key view_orders:rsschool-green-shop-key view_staged_quotes:rsschool-green-shop-key view_stores:rsschool-green-shop-key view_standalone_prices:rsschool-green-shop-key view_payments:rsschool-green-shop-key view_cart_discounts:rsschool-green-shop-key view_key_value_documents:rsschool-green-shop-key view_business_units:rsschool-green-shop-key view_order_edits:rsschool-green-shop-key manage_orders:rsschool-green-shop-key view_product_selections:rsschool-green-shop-key create_anonymous_token:rsschool-green-shop-key view_tax_categories:rsschool-green-shop-key manage_payments:rsschool-green-shop-key view_categories:rsschool-green-shop-key view_sessions:rsschool-green-shop-key view_messages:rsschool-green-shop-key view_project_settings:rsschool-green-shop-key manage_order_edits:rsschool-green-shop-key view_attribute_groups:rsschool-green-shop-key manage_customers:rsschool-green-shop-key view_shipping_methods:rsschool-green-shop-key view_discount_codes:rsschool-green-shop-key view_states:rsschool-green-shop-key view_import_containers:rsschool-green-shop-key view_published_products:rsschool-green-shop-key view_connectors_deployments:rsschool-green-shop-key view_shopping_lists:rsschool-green-shop-key view_audit_log:rsschool-green-shop-key view_types:rsschool-green-shop-key"],this.authMiddlewareOptions={host:this.AUTH_URL,projectKey:this.projectKey,credentials:{clientId:this.ADMIN_CLIENT_ID,clientSecret:this.ADMIN_CLIENT_SECRET},scopes:this.SCOPES,tokenCache:this.tokenCache,fetch},this.httpMiddlewareOptions={host:this.API_URL,fetch},this.passwordAuthMiddlewareOptions={host:"https://auth.europe-west1.gcp.commercetools.com",projectKey:this.projectKey,credentials:{clientId:"r6aJk8t2mER-SsDGxEW0VkK_",clientSecret:"1RFF5OrGsPbZjYM5bsC2EJUy0c3exCy8",user:{username:e,password:t}},scopes:this.SCOPES,tokenCache:this.tokenCache,fetch},this.ctpClient=this.createConnection(),this.ctpClient2=this.createAuthConnection(),this.apiRoot=(0,i.createApiBuilderFromCtpClient)(this.ctpClient).withProjectKey({projectKey:this.projectKey})}createAuthConnection(){return(new a.ClientBuilder).withProjectKey(this.projectKey).withClientCredentialsFlow(this.authMiddlewareOptions).withHttpMiddleware(this.httpMiddlewareOptions).withPasswordFlow(this.passwordAuthMiddlewareOptions).withLoggerMiddleware().build()}createConnection(){return(new a.ClientBuilder).withProjectKey(this.projectKey).withClientCredentialsFlow(this.authMiddlewareOptions).withHttpMiddleware(this.httpMiddlewareOptions).withLoggerMiddleware().build()}getProject(){return this.apiRoot.get().execute()}newCustomer(e){return this.apiRoot.customers().post({body:e}).execute()}login(e,t){const s={email:e,password:t};return this.ctpClient2.execute({uri:`/${this.projectKey}/login`,method:"POST",body:JSON.stringify(s)}).then((e=>e)).catch((e=>{throw e}))}returnCustomerByEmail(e){return this.apiRoot.customers().get({queryArgs:{where:`email="${e}"`}}).execute()}loginByEmailPassword(){this.apiRoot.me().login()}}},8120:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){let t=e;return{get:()=>t,set:e=>{t=e}}}},9473:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.register=t.login=t.search=t.basket=t.logoSvg=void 0;const a=r(s(8270));t.logoSvg=a.default;const i=r(s(9465));t.basket=i.default;const n=r(s(6491));t.search=n.default;const o=r(s(2918));t.login=o.default;const h=r(s(360));t.register=h.default},3986:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=r(s(3086)),i=r(s(7203));class n extends a.default{constructor(e){super({tag:"div",classNames:["Adresses"]}),this.adressesHeader=new a.default({tag:"p",classNames:["regFormAdressesText"],text:`Please enter ${e} adress`}),this.street=new a.default({tag:"input",classNames:["regFormStreet","inputField"],type:"text",placeholder:"Street",pattern:/^([A-Za-z0-9]|.){1,}$/,tip:"Please enter your street. You may use letters, numbers, special symbols "}),this.city=new a.default({tag:"input",classNames:["regFormCity","inputField"],type:"text",placeholder:"City",pattern:/^[A-Za-zА-Яа-я]+$/,tip:"Please enter your city. Only letters, no special characters or numbers"}),this.postalCode=new a.default({tag:"input",classNames:["regFormPostal","inputField"],type:"text",placeholder:"Postal Code",tip:"Please enter correct Postal Code"}),this.country=new a.default({tag:"input",classNames:["regFormCountry","inputField"],type:"text",placeholder:"Country",tip:"Please choose country"}),this.country.element.onchange=()=>{this.postalCode.element.value="",this.postalCode.isValid=!1;const e=i.default.findIndex((e=>e.country===this.country.element.value));e>-1?(this.postalCode.pattern=new RegExp(i.default[e].regExp),this.postalCode.element.nextSibling.innerHTML=`Postal Code for ${i.default[e].country} looks like: ${i.default[e].tip}`,this.country.element.nextSibling.style.opacity="0%"):(this.postalCode.element.nextSibling.innerHTML="Please enter Postal Code",this.country.element.nextSibling.style.opacity="100%",this.postalCode.element.value="",this.postalCode.isValid=!1)},this.country.element.setAttribute("list","countries");const t=new a.default({tag:"datalist",classNames:["dataList"],id:"countries"});this.country.addElement(t),i.default.forEach((e=>{const s=new a.default({tag:"option",classNames:["countries"]});s.element.setAttribute("value",e.country),t.addElement(s)}));const s=new a.default({tag:"div",classNames:["setDefaultWrapper"]}),r=new a.default({tag:"a",classNames:["setDefaultText"],text:`Set as default ${e} address`});this.setDefaultChkBox=new a.default({tag:"input",classNames:["setDefaultChkBox"],type:"checkbox"}),s.addElement(r,this.setDefaultChkBox),this.addElement(this.adressesHeader,this.street,this.city,this.country,this.postalCode,s)}}t.default=n},6570:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),s(5863);const a=r(s(3986)),i=r(s(3086));class n extends i.default{constructor(){super({tag:"div",classNames:["adressesBlock"]});const e=new i.default({tag:"div",classNames:["useSameWrapper"]}),t=new i.default({tag:"a",classNames:["useSameText"],text:"Use the same adress for billing"});this.useSameChkBox=new i.default({tag:"input",classNames:["useSameChkBox"],type:"checkbox",callback:()=>this.hideBillingAdress()}),e.addElement(t,this.useSameChkBox),this.shippingAdress=new a.default("shipping"),this.billingAdress=new a.default("billing"),this.addElement(this.shippingAdress,e,this.billingAdress)}hideBillingAdress(){const e=this.billingAdress.element.childNodes;this.useSameChkBox.element.checked?([].forEach.call(e,(e=>{e.style.display="none"})),e[e.length-1].style.display="flex"):[].forEach.call(e,(e=>{e.style.display="flex",this.billingAdress.street.element.value="",this.billingAdress.city.element.value="",this.billingAdress.postalCode.element.value="",this.billingAdress.country.element.value="",this.billingAdress.street.isValid=!1,this.billingAdress.city.isValid=!1,this.billingAdress.postalCode.isValid=!1,this.shippingAdress.country.isValid=!1}))}}t.default=n},7203:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=[{country:"Poland",ISO:"PL",regExp:"^\\d{2}-\\d{3}$",tip:"11-111"},{country:"France",ISO:"FR",regExp:"^\\d{2}[ ]?\\d{3}$",tip:"11 111"},{country:"Russia",ISO:"RU",regExp:"^\\d{6}$",tip:"111111"},{country:"USA",ISO:"US",regExp:"^\\d{6}$",tip:"111111"},{country:"Australia",ISO:"AU",regExp:"^\\d{4}$",tip:"1111"},{country:"Lithuania",ISO:"LT",regExp:"^[Ll][Tt]-\\d{5}$",tip:"LT-11111"}]},3018:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=r(s(8422));s(1497),t.default=function(e,t){const s=(0,a.default)({tag:"button",className:e,type:"submit",disabled:!0});return s.textContent=t,s}},4514:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.mobileMenu=t.mobileLogoutButton=t.mobileRegisterButton=t.mobileLoginButton=t.mobileBasketLink=t.mobileSearchLink=t.mobileLinkBlogs=t.mobileLinkCatalog=t.mobileLinkHome=t.burgerMenu=t.logoutButton=t.registerButton=t.loginButton=t.basketLink=t.searchLink=t.headerLinkBlogs=t.headerLinkCatalog=t.headerLinkHome=t.logoLink=void 0;const a=r(s(8422)),i=s(9473),n=(0,a.default)({tag:"header",className:"header container"});t.logoLink=(0,a.default)({tag:"a",className:"logo__link"}),t.logoLink.innerHTML=i.logoSvg,t.logoLink.title="Home";const o=(0,a.default)({tag:"ul",className:"header__links-list"});t.headerLinkHome=(0,a.default)({tag:"li",className:"header__list-item home-link active-header",textContent:"Home"}),t.headerLinkCatalog=(0,a.default)({tag:"li",className:"header__list-item catalog-link",textContent:"Catalog"}),t.headerLinkBlogs=(0,a.default)({tag:"li",className:"header__list-item blogs-link",textContent:"Blogs"}),o.append(t.headerLinkHome,t.headerLinkCatalog,t.headerLinkBlogs);const h=(0,a.default)({tag:"div",className:"header__wrap"});t.searchLink=(0,a.default)({tag:"a",className:"header__search"}),t.searchLink.innerHTML=i.search,t.basketLink=(0,a.default)({tag:"a",className:"header__basket"}),t.basketLink.innerHTML=i.basket,t.loginButton=(0,a.default)({tag:"a",className:"header__login button"}),t.loginButton.innerHTML=i.login;const u=(0,a.default)({tag:"span",className:"header__login-text",textContent:"Login"});t.loginButton.append(u),t.registerButton=(0,a.default)({tag:"a",className:"header__register button"}),t.registerButton.innerHTML=i.register;const c=(0,a.default)({tag:"span",className:"header__register-text",textContent:"Register"});t.registerButton.append(c),t.logoutButton=(0,a.default)({tag:"a",className:"header__logout button"});const p=(0,a.default)({tag:"span",className:"header__logout-text",textContent:"Logout"});t.logoutButton.append(p),t.burgerMenu=(0,a.default)({tag:"button",className:"burger-menu"});const g=(0,a.default)({tag:"span",className:"burger-menu__line"});t.burgerMenu.append(g.cloneNode(),g.cloneNode(),g.cloneNode());const d=(0,a.default)({tag:"ul",className:"mobile__links-list"});t.mobileLinkHome=(0,a.default)({tag:"li",className:"mobile__list-item home-link active",textContent:"Home"}),t.mobileLinkCatalog=(0,a.default)({tag:"li",className:"mobile__list-item catalog-link",textContent:"Catalog"}),t.mobileLinkBlogs=(0,a.default)({tag:"li",className:"mobile__list-item blogs-link",textContent:"Blogs"}),t.mobileSearchLink=(0,a.default)({tag:"li",className:"mobile__list-item mobile__search",textContent:"Search"}),t.mobileBasketLink=(0,a.default)({tag:"li",className:"mobile__list-item mobile__basket",textContent:"Basket"}),t.mobileLoginButton=(0,a.default)({tag:"li",className:"mobile__list-item mobile__login",textContent:"Login"}),t.mobileRegisterButton=(0,a.default)({tag:"li",className:"mobile__list-item mobile__register",textContent:"Register"}),t.mobileLogoutButton=(0,a.default)({tag:"li",className:"mobile__list-item mobile__logout",textContent:"Logout"}),d.append(t.mobileLinkHome,t.mobileLinkCatalog,t.mobileLinkBlogs,t.mobileSearchLink,t.mobileBasketLink,t.mobileLoginButton,t.mobileRegisterButton,t.mobileLogoutButton),t.mobileMenu=(0,a.default)({tag:"div",className:"mobile-menu"}),t.mobileMenu.append(d),h.append(t.searchLink,t.basketLink,t.loginButton,t.registerButton,t.logoutButton),n.append(t.logoLink,o,h,t.burgerMenu,t.mobileMenu),t.default=n},5186:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=r(s(3086));s(5839);class i extends a.default{constructor(){super({tag:"div",classNames:["passwordWrapper"]});const e=new a.default({tag:"div",classNames:["inputWrapper"]});this.addElement(e),this.input=new a.default({tag:"input",classNames:["password","inputField"],type:"text",placeholder:"Password",pattern:/(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[^ws]).{8,}/,tip:"Minimum 8 characters, at least 1 uppercase letter, 1 lowercase letter, and 1 number"}),e.addElement(this.input),this.showPasswordIcon=new a.default({tag:"div",classNames:["showPasswordIcon"],callback:()=>this.togglePasswordVisibility(this.input)}),this.addElement(this.showPasswordIcon)}togglePasswordVisibility(e){const t=e;"password"===t.element.type?(t.element.type="text",this.showPasswordIcon.element.classList.toggle("passWordIconHide")):(t.element.type="password",this.showPasswordIcon.element.classList.toggle("passWordIconHide"))}}t.default=i},8854:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.createPasswordInput=t.createEmailInput=void 0;const a=r(s(8422)),i=s(1640);s(6677);let n=!1,o=!1;t.createEmailInput=function(e,t,s){const r=(0,a.default)({tag:"div",className:"input-container"}),h=(0,a.default)({tag:"input",className:e,type:"text",placeholder:t,required:!0});h.setAttribute("autocomplete","on");const u=(0,a.default)({tag:"p",className:["error-message","error-message--hidden"],textContent:"Error message"});return h.addEventListener("keyup",(()=>{n=(0,i.validateEmail)(h,u,s),n&&o&&s.removeAttribute("disabled")})),r.append(h),r.append(u),r},t.createPasswordInput=function(e,t,s){const r=(0,a.default)({tag:"div",className:"input-container"}),h=(0,a.default)({tag:"div",className:"password-wrapper"}),u=(0,a.default)({tag:"input",className:e,type:"password",placeholder:t,required:!0});u.setAttribute("autocomplete","on");const c=(0,a.default)({tag:"button",className:"toggle-password-btn",type:"button"});c.addEventListener("click",(()=>{!function(e,t){const s=e,r=t;"password"===s.type?(s.type="text",r.classList.toggle("toggle-password-btn--hide")):(s.type="password",r.classList.toggle("toggle-password-btn--hide"))}(u,c)}));const p=(0,a.default)({tag:"p",className:["error-message","error-message--hidden"],textContent:"Error Message"});return u.addEventListener("keyup",(()=>{o=(0,i.validatePassword)(u,p,s),n&&o&&s.removeAttribute("disabled")})),r.append(h),h.append(u,c),r.append(p),r}},1640:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.validatePassword=t.validateEmail=void 0;const r=s(7933);t.validateEmail=function(e,t,s){const r=e.value,a=t,i=s;return/^[\w]{1}[\w-.]*@[\w-]+.[a-z]{2,4}$/i.test(r)?(e.classList.remove("login__input--error"),a.classList.add("error-message--hidden"),!0):(a.classList.remove("error-message--hidden"),e.classList.add("login__input--error"),a.textContent="Valid email: no whitespace, includes '@' and valid domain name.",i.setAttribute("disabled",""),!1)},t.validatePassword=function(e,t,s){return function(e,t){const a=e,i=t,n=s;return(0,r.isPasswordLengthValid)(a)?(0,r.containsUppercase)(a)?(0,r.containsLowercase)(a)?(0,r.containsDigit)(a)?(0,r.containsSpecialCharacter)(a)?!!(0,r.hasNoLeadingOrTrailingWhitespace)(a)||(i.textContent="Password must not contain leading or trailing whitespace.",n.setAttribute("disabled",""),!1):(i.textContent="Password must contain at least one special character (e.g., !@#$%^&*).",n.setAttribute("disabled",""),!1):(i.textContent="Password must contain at least one digit (0-9).",n.setAttribute("disabled",""),!1):(i.textContent="Password must contain at least one lowercase letter (a-z).",n.setAttribute("disabled",""),!1):(i.textContent="Password must contain at least one uppercase letter (A-Z).",n.setAttribute("disabled",""),!1):(i.textContent="Password must be at least 8 characters long.",n.setAttribute("disabled",""),!1)}(e.value,t)?(e.classList.remove("login__input--error"),t.classList.add("error-message--hidden"),!0):(t.classList.remove("error-message--hidden"),e.classList.add("login__input--error"),!1)}},3518:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.registerLink=t.loginLink=void 0;const a=r(s(8422)),i=(0,a.default)({tag:"header",className:"login__header"});t.loginLink=(0,a.default)({tag:"a",className:["login__link","login__link--active"],textContent:"Login"}),t.registerLink=(0,a.default)({tag:"a",className:"login__link",textContent:"Register"}),i.append(t.loginLink,t.registerLink),t.default=i},7722:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=(0,r(s(8422)).default)({tag:"main",className:"container"});t.default=a},43:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=r(s(8422));s(1772),t.default=function(e){const t=(0,a.default)({tag:"div",className:"error-popup__container"}),s=(0,a.default)({tag:"div",className:"error-popup"}),r=(0,a.default)({tag:"button",className:"error-popup__close",type:"button"}),i=(0,a.default)({tag:"p",className:"error-popup__txt",textContent:e}),{body:n}=document;r.addEventListener("click",(()=>{t.remove()})),n.append(t),t.append(s),s.append(r,i),document.addEventListener("click",(e=>{t&&e.target!==s&&e.target===t&&t.remove()}))}},5105:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=s(3518),i=s(4878),n=s(9400),o=s(4514),h=r(s(5791));n.buttonHome.addEventListener("click",(()=>{(0,h.default)("/main")})),o.logoLink.addEventListener("click",(e=>{e.preventDefault(),(0,h.default)("/main")})),o.headerLinkHome.addEventListener("click",(e=>{e.preventDefault(),(0,h.default)("/main")})),o.headerLinkCatalog.addEventListener("click",(e=>{e.preventDefault(),(0,h.default)("/catalog")})),o.headerLinkBlogs.addEventListener("click",(e=>{e.preventDefault(),(0,h.default)("/blogs")})),o.searchLink.addEventListener("click",(e=>{e.preventDefault(),(0,h.default)("/main")})),o.basketLink.addEventListener("click",(e=>{e.preventDefault(),(0,h.default)("/main")})),o.loginButton.addEventListener("click",(e=>{e.preventDefault(),(0,h.default)("/login")})),o.registerButton.addEventListener("click",(e=>{e.preventDefault(),(0,h.default)("/register")})),a.loginLink.addEventListener("click",(e=>{e.preventDefault(),a.registerLink.classList.remove("login__link--active"),a.loginLink.classList.add("login__link--active"),(0,h.default)("/login")})),a.registerLink.addEventListener("click",(e=>{e.preventDefault(),a.loginLink.classList.remove("login__link--active"),a.registerLink.classList.add("login__link--active"),(0,h.default)("/register")})),o.burgerMenu.addEventListener("click",(()=>{o.mobileMenu.classList.toggle("active"),o.burgerMenu.classList.toggle("active")})),window.addEventListener("resize",(()=>{window.innerWidth>550&&(o.mobileMenu.classList.remove("active"),o.burgerMenu.classList.remove("active"))})),o.mobileLinkHome.addEventListener("click",(e=>{o.mobileMenu.classList.toggle("active"),e.preventDefault(),(0,h.default)("/main")})),o.mobileLinkCatalog.addEventListener("click",(e=>{o.mobileMenu.classList.toggle("active"),e.preventDefault(),(0,h.default)("/catalog")})),o.mobileLinkBlogs.addEventListener("click",(e=>{o.mobileMenu.classList.toggle("active"),e.preventDefault(),(0,h.default)("/blogs")})),o.mobileSearchLink.addEventListener("click",(e=>{o.mobileMenu.classList.toggle("active"),e.preventDefault(),(0,h.default)("/main")})),o.mobileBasketLink.addEventListener("click",(e=>{o.mobileMenu.classList.toggle("active"),e.preventDefault(),(0,h.default)("/main")})),o.mobileLoginButton.addEventListener("click",(e=>{o.mobileMenu.classList.toggle("active"),e.preventDefault(),(0,h.default)("/login")})),o.mobileRegisterButton.addEventListener("click",(e=>{o.mobileMenu.classList.toggle("active"),e.preventDefault(),(0,h.default)("/register")})),i.mainLink.addEventListener("click",(e=>{e.preventDefault(),(0,h.default)("/main")})),i.loginLinkMain.addEventListener("click",(e=>{e.preventDefault(),(0,h.default)("/login")})),i.registerLinkMain.addEventListener("click",(e=>{e.preventDefault(),(0,h.default)("/register")})),i.catalogLinkMain.addEventListener("click",(e=>{e.preventDefault(),(0,h.default)("/catalog")})),i.blogsLinkMain.addEventListener("click",(e=>{e.preventDefault(),(0,h.default)("/blogs")}));const u=()=>{localStorage.getItem("logged")?(o.mobileLoginButton.style.display="none",o.mobileRegisterButton.style.display="none",o.mobileLogoutButton.style.display="block",o.loginButton.style.display="none",o.registerButton.style.display="none",o.logoutButton.style.display="block"):(o.mobileLoginButton.style.display="flex",o.mobileRegisterButton.style.display="flex",o.mobileLogoutButton.style.display="none",o.loginButton.style.display="flex",o.registerButton.style.display="flex",o.logoutButton.style.display="none")};window.addEventListener("storage",u),o.logoutButton.addEventListener("click",(()=>{localStorage.removeItem("logged"),u()})),document.addEventListener("DOMContentLoaded",u)},3086:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=s(4188);class a{constructor(e){this.tip="",this.pattern=/[\w]/,this.isValid=!1,this.element=document.createElement(e.tag),e.tip&&(this.tip=e.tip),e.pattern&&(this.pattern=e.pattern),this.createElement(e)}getElement(){return this.element}addElement(...e){e.forEach((e=>{if(e instanceof a?this.element.append(e.getElement()):this.element.append(e),e.tip){const t=new a({tag:"p",classNames:["errorTip"],text:e.tip});this.element.appendChild(t.element)}}))}createElement(e){this.element=document.createElement(e.tag),this.setCssClasses(e.classNames),this.setTextContent(e.text),e.id&&(this.element.id=e.id),e.callback&&(this.element.onclick=e.callback),"input"===e.tag&&(e.type&&(this.element.type=e.type),e.placeholder&&(this.element.placeholder=e.placeholder),e.value&&(this.element.value=e.value),this.element&&"checkbox"!==e.type&&(this.element.onkeyup=()=>{this.checkValidity()?this.element.nextSibling.style.opacity="0%":this.element.nextSibling.style.opacity="100%"}),this.element&&"date"===e.type&&(this.element.onchange=()=>{this.checkValidity()?this.element.nextSibling.style.opacity="0%":this.element.nextSibling.style.opacity="100%"}))}checkValidity(){return"password"===this.element.type?(this.isValid=(0,r.checkTextValidity)(this.element.value,this.pattern),this.isValid):"date"===this.element.type?(this.isValid=(0,r.checkDateValidity)(this.element.value),this.isValid):"text"===this.element.type&&(this.isValid=(0,r.checkTextValidity)(this.element.value,this.pattern),this.isValid)}setCssClasses(e=[""]){e.map((e=>this.element.classList.add(e)))}setTextContent(e=""){this.element.textContent=e}}t.default=a},8422:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=e=>{const t=document.createElement(e.tag);switch(e.textContent&&(t.textContent=e.textContent),Array.isArray(e.className)?t.className=e.className.join(" "):t.className=e.className,e.tag){case"input":e.type&&t.setAttribute("type",e.type),e.placeholder&&(t.placeholder=e.placeholder),e.required&&(t.required=!0);break;case"button":e.type&&t.setAttribute("type",e.type),e.disabled&&(t.disabled=!0);break;case"a":e.href&&(t.href=e.href),e.target&&(t.target=e.target)}return t}},7933:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hasNoLeadingOrTrailingWhitespace=t.containsSpecialCharacter=t.containsDigit=t.containsLowercase=t.containsUppercase=t.isPasswordLengthValid=void 0,t.isPasswordLengthValid=function(e){return e.length>=8},t.containsUppercase=function(e){return/[A-Z]/.test(e)},t.containsLowercase=function(e){return/[a-z]/.test(e)},t.containsDigit=function(e){return/\d/.test(e)},t.containsSpecialCharacter=function(e){return/[!@#$%^&*]/.test(e)},t.hasNoLeadingOrTrailingWhitespace=function(e){return/^\S(.*\S)?$/.test(e)}},9699:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=(0,r(s(8422)).default)({tag:"section",className:"blog",textContent:"BLOG PAGE"});t.default=a},2180:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=(0,r(s(8422)).default)({tag:"section",className:"catalog",textContent:"CATALOG PAGE"});t.default=a},8424:function(e,t,s){"use strict";var r=this&&this.__awaiter||function(e,t,s,r){return new(s||(s=Promise))((function(a,i){function n(e){try{h(r.next(e))}catch(e){i(e)}}function o(e){try{h(r.throw(e))}catch(e){i(e)}}function h(e){var t;e.done?a(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(n,o)}h((r=r.apply(e,t||[])).next())}))},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),s(3853);const i=a(s(8422)),n=s(8854),o=a(s(3018)),h=a(s(5813)),u=(0,i.default)({tag:"section",className:"login"}),c=(0,i.default)({tag:"div",className:"login__container"}),p=(0,i.default)({tag:"form",className:"login__form"}),g=(0,i.default)({tag:"h1",className:"login__form-title",textContent:"Enter your username and password to login."}),d=(0,o.default)("login-btn","Login"),l=(0,n.createEmailInput)(["login__input","login__input--login"],"almamun_uxui@outlook.com",d),y=(0,n.createPasswordInput)(["login__input","login__input--password"],"********",d);u.append(c),c.append(p),p.append(g,l,y),d.addEventListener("click",(e=>r(void 0,void 0,void 0,(function*(){e.preventDefault(),yield(0,h.default)(".login__input--login",".login__input--password")})))),p.append(d),t.default=u},4878:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.blogsLinkMain=t.catalogLinkMain=t.registerLinkMain=t.loginLinkMain=t.mainLink=void 0;const a=r(s(8422));s(885);const i=(0,a.default)({tag:"section",className:"main",textContent:"MAIN PAGE"}),n=(0,a.default)({tag:"div",className:"links-list"});t.mainLink=(0,a.default)({tag:"a",className:"links-list__link",textContent:"Main Page"}),t.loginLinkMain=(0,a.default)({tag:"a",className:"links-list__link",textContent:"Log in"}),t.registerLinkMain=(0,a.default)({tag:"a",className:"links-list__link",textContent:"Register"}),t.catalogLinkMain=(0,a.default)({tag:"a",className:"links-list__link",textContent:"Catalog"}),t.blogsLinkMain=(0,a.default)({tag:"a",className:"links-list__link",textContent:"Blogs"}),i.append(n),n.append(t.mainLink,t.loginLinkMain,t.registerLinkMain,t.catalogLinkMain,t.blogsLinkMain),t.default=i},9400:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.buttonHome=t.page404=void 0;const a=r(s(8422));t.page404=(0,a.default)({tag:"section",className:"not-found"});const i=(0,a.default)({tag:"div",className:"not-found__img"}),n=(0,a.default)({tag:"div",className:"not-found__text-wrap"}),o=(0,a.default)({tag:"h2",className:"not-found__title",textContent:"404 Page Not Found :("}),h=(0,a.default)({tag:"h2",className:"not-found__description",textContent:"The request URL was not found on this server."});t.buttonHome=(0,a.default)({tag:"button",className:"not-found__home-btn button",textContent:"HOME"}),n.append(o,h,t.buttonHome),t.page404.append(i,n)},683:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=r(s(3086)),i=r(s(5791));s(5270);class n extends a.default{constructor(){super({tag:"div",classNames:["modalWrapper"]}),this.registered=!1,this.popUpMessage=new a.default({tag:"p",classNames:["popUpMessage"],text:"Error"}),this.addElement(this.popUpMessage);const e=new a.default({tag:"button",classNames:["button","closeMessageButton"],text:"Close"});this.addElement(e),e.element.addEventListener("click",(()=>{document.getElementsByTagName("body")[0].style.overflow="scroll",this.element.style.display="none";const e=document.getElementById("popUpMessageCanvas");e&&(e.style.display="none"),this.registered&&(0,i.default)("/main")}))}showMessage(e,t){this.registered=t,this.popUpMessage.setTextContent(e),document.getElementsByTagName("body")[0].style.overflow="hidden";const s=document.getElementById("popUpMessageCanvas");s&&(s.style.display="block"),this.element.style.display="flex"}setErrorMessage(e){this.popUpMessage.setTextContent(e)}}t.default=n},6349:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),s(8462);const a=r(s(3086)),i=r(s(5310)),n=r(s(683)),o=r(s(5186)),h=r(s(6570)),u=r(s(7203));class c extends a.default{constructor(){super({tag:"div",classNames:["registrationForm"]}),this.create()}create(){const e=new a.default({tag:"p",classNames:["regFormText"],text:"Enter registration data:"}),t=new i.default,s=new a.default({tag:"input",classNames:["firstName","inputField"],type:"text",placeholder:"First Name",pattern:/^[A-Za-z]+$/,tip:"Must contain at least one character and no special characters or numbers"}),r=new a.default({tag:"input",classNames:["lastName","inputField"],type:"text",placeholder:"Last Name",pattern:/^[A-Za-z]+$/,tip:"Must contain at least one character and no special characters or numbers"}),c=new a.default({tag:"input",classNames:["emailAdress","inputField"],type:"text",placeholder:"Enter your email address",pattern:/^[\w]{1}[\w\-.]*@[\w-]+\.[a-z]{2,4}$/i,tip:"Please enter valid e-mail"}),p=new o.default,g=new a.default({tag:"input",classNames:["dateOfBirth","inputField"],type:"date",required:!0,placeholder:"",tip:"Our clients should be at least 13 years old"}),d=new h.default;this.addElement(d);const l=[s,r,c,p,g,d.shippingAdress.street,d.shippingAdress.city,d.shippingAdress.postalCode,d.shippingAdress.country,d.billingAdress.street,d.billingAdress.city,d.billingAdress.postalCode,d.billingAdress.country],y=new a.default({tag:"div",classNames:["popUpMessageCanvas"],id:"popUpMessageCanvas"});this.addElement(y);const A=new n.default;this.addElement(A);const b=new a.default({tag:"button",classNames:["regFormSubmit"],type:"submit",text:"Register",id:"regFormSubmit",placeholder:"",callback:()=>{var e,a,i;if(d.useSameChkBox.element.checked&&(d.billingAdress.street.element.value=d.shippingAdress.street.element.value,d.billingAdress.city.element.value=d.shippingAdress.city.element.value,d.billingAdress.postalCode.element.value=d.shippingAdress.postalCode.element.value,d.billingAdress.country.element.value=d.shippingAdress.country.element.value,d.billingAdress.street.isValid=d.shippingAdress.street.isValid,d.billingAdress.city.isValid=d.shippingAdress.street.isValid,d.billingAdress.postalCode.isValid=d.shippingAdress.street.isValid,d.billingAdress.country.isValid=d.shippingAdress.street.isValid),s.isValid&&r.isValid&&c.isValid&&p.input.isValid&&g.isValid&&d.shippingAdress.street.isValid&&d.shippingAdress.city.isValid&&d.shippingAdress.postalCode.isValid&&d.shippingAdress.country.isValid&&d.billingAdress.street.isValid&&d.billingAdress.city.isValid&&d.billingAdress.postalCode.isValid&&d.billingAdress.country.isValid){const n=null===(e=u.default.find((e=>e.country===d.billingAdress.country.element.value)))||void 0===e?void 0:e.ISO,o=null===(a=u.default.find((e=>e.country===d.shippingAdress.country.element.value)))||void 0===a?void 0:a.ISO,h={firstName:s.element.value,lastName:r.element.value,email:c.element.value,password:p.input.element.value,dateOfBirth:g.element.value,addresses:[{country:o||"",city:d.shippingAdress.city.element.value,streetName:d.shippingAdress.street.element.value,postalCode:d.shippingAdress.postalCode.element.value}],shippingAddresses:[0],billingAddresses:[1]};if(d.useSameChkBox.element.checked?h.billingAddresses=[0]:(null===(i=h.addresses)||void 0===i||i.push({country:n||"",city:d.billingAdress.city.element.value,streetName:d.billingAdress.street.element.value,postalCode:d.billingAdress.postalCode.element.value}),h.billingAddresses=[1]),d.shippingAdress.setDefaultChkBox.element.checked&&(h.defaultShippingAddress=0),d.billingAdress.setDefaultChkBox.element.checked){const e=h.billingAddresses[0];h.defaultBillingAddress=e}t.newCustomer(h).then((()=>{A.showMessage("Customer succesfully registered. Welcome to green Shop",!0),localStorage.setItem("logged","true"),window.dispatchEvent(new Event("storage"))})).catch((()=>A.showMessage("User with this email already exists",!1)))}else A.showMessage("Please fulfill all fields correctly",!1),l.forEach((e=>{const t=e;e.isValid||(t.element.nextSibling.style.opacity="100%")}))}});this.addElement(e,s,r,c,p,g,d,b)}}t.default=c},1710:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=r(s(3086)),i=r(s(6349));s(7469);class n extends a.default{constructor(){super({tag:"div",classNames:["registrationPage"],id:"registrationPage"});const e=new i.default;this.addElement(e)}}t.default=n},4188:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.checkDateValidity=t.checkTextValidity=void 0,t.checkTextValidity=function(e,t){return t.test(e)},t.checkDateValidity=function(e){const t=new Date(e),s=new Date;return s.getFullYear()-t.getFullYear()>13||s.getFullYear()-t.getFullYear()==12&&s.getMonth()>t.getMonth()}},5813:function(e,t,s){"use strict";var r=this&&this.__awaiter||function(e,t,s,r){return new(s||(s=Promise))((function(a,i){function n(e){try{h(r.next(e))}catch(e){i(e)}}function o(e){try{h(r.throw(e))}catch(e){i(e)}}function h(e){var t;e.done?a(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(n,o)}h((r=r.apply(e,t||[])).next())}))},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=a(s(5310)),n=a(s(43)),o=a(s(5791));t.default=function(e,t){return r(this,void 0,void 0,(function*(){const s=document.querySelector(e),r=document.querySelector(t),a=new i.default(null==s?void 0:s.value,null==r?void 0:r.value);try{const e=yield a.login(null==s?void 0:s.value,null==r?void 0:r.value),{email:t}=e.body.customer,i=a.tokenCache.get(),n=JSON.stringify(i);return localStorage.setItem(t,n),localStorage.setItem("logged","true"),window.dispatchEvent(new Event("storage")),(0,o.default)("/main"),e}catch(e){const t=`${e.name}: ${e.message}`;return void(0,n.default)(t)}}))}},5791:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=r(s(7365));t.default=function(e){a.default.navigate(e)}},6578:function(e,t,s){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,s,r){void 0===r&&(r=s);var a=Object.getOwnPropertyDescriptor(t,s);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[s]}}),Object.defineProperty(e,r,a)}:function(e,t,s,r){void 0===r&&(r=s),e[r]=t[s]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var s in e)"default"!==s&&Object.prototype.hasOwnProperty.call(e,s)&&r(t,e,s);return a(t,e),t},n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.render404Page=t.renderBlogsPage=t.renderCatalogPage=t.renderRegisterPage=t.renderLoginPage=t.renderMainPage=void 0;const o=n(s(7722)),h=n(s(8424)),u=n(s(4878)),c=s(9400),p=n(s(1710)),g=n(s(2180)),d=n(s(9699)),l=i(s(3518)),y=new p.default;t.renderMainPage=function(){o.default.innerHTML="",o.default.append(u.default)},t.renderLoginPage=function(){o.default.innerHTML="",o.default.append(l.default,h.default),l.loginLink.classList.add("login__link--active"),l.registerLink.classList.remove("login__link--active")},t.renderRegisterPage=function(){o.default.innerHTML="",o.default.append(l.default,y.element),l.loginLink.classList.remove("login__link--active"),l.registerLink.classList.add("login__link--active")},t.renderCatalogPage=function(){o.default.innerHTML="",o.default.append(g.default)},t.renderBlogsPage=function(){o.default.innerHTML="",o.default.append(d.default)},t.render404Page=function(){o.default.innerHTML="",o.default.append(c.page404)}},7365:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=new(r(s(4623)).default)("/");t.default=a},4459:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=s(6578),i=r(s(7365));t.default=function(){i.default.on({"/":a.renderMainPage,"/main":a.renderMainPage,"/login":a.renderLoginPage,"/register":a.renderRegisterPage,"/catalog":a.renderCatalogPage,"/blogs":a.renderBlogsPage}).notFound(a.render404Page).resolve()}},4662:e=>{"use strict";e.exports='data:image/svg+xml;utf8, <svg xmlns="http://www.w3.org/2000/svg" height="329pt" viewBox="0 0 329.26933 329" width="329pt"><path d="m194.800781 164.769531 128.210938-128.214843c8.34375-8.339844 8.34375-21.824219 0-30.164063-8.339844-8.339844-21.824219-8.339844-30.164063 0l-128.214844 128.214844-128.210937-128.214844c-8.34375-8.339844-21.824219-8.339844-30.164063 0-8.34375 8.339844-8.34375 21.824219 0 30.164063l128.210938 128.214843-128.210938 128.214844c-8.34375 8.339844-8.34375 21.824219 0 30.164063 4.15625 4.160156 9.621094 6.25 15.082032 6.25 5.460937 0 10.921875-2.089844 15.082031-6.25l128.210937-128.214844 128.214844 128.214844c4.160156 4.160156 9.621094 6.25 15.082032 6.25 5.460937 0 10.921874-2.089844 15.082031-6.25 8.34375-8.339844 8.34375-21.824219 0-30.164063zm0 0"/></svg>'},2484:e=>{"use strict";e.exports="data:image/svg+xml;utf8,<svg width=%2718%27 height=%2716%27 viewBox=%270 0 18 16%27 fill=%27none%27 xmlns=%27http://www.w3.org/2000/svg%27><path d=%27M4.34984 12.7748C2.4915 11.5582 1.2915 9.72482 1.2915 8.11649C1.2915 5.38316 4.7415 2.03316 8.99984 2.03316C10.7415 2.03316 12.3582 2.59149 13.6582 3.45816%27 stroke=%27%23727272%27 stroke-width=%271.5%27 stroke-linecap=%27round%27 stroke-linejoin=%27round%27/><path d=%27M15.5414 5.17517C16.2839 6.11684 16.7164 7.1585 16.7164 8.11684C16.7164 10.8502 13.2581 14.2002 8.99977 14.2002C8.24144 14.2002 7.50061 14.0918 6.80811 13.9002%27 stroke=%27%23727272%27 stroke-width=%271.5%27 stroke-linecap=%27round%27 stroke-linejoin=%27round%27/><path d=%27M7.13804 9.97249C6.6422 9.48166 6.3647 8.81249 6.3672 8.11499C6.36387 6.66083 7.54054 5.47916 8.99554 5.47666C9.69554 5.47499 10.3672 5.75249 10.8622 6.24749%27 stroke=%27%23727272%27 stroke-width=%271.5%27 stroke-linecap=%27round%27 stroke-linejoin=%27round%27/><path d=%27M11.5912 8.58258C11.3962 9.65925 10.5537 10.5034 9.47705 10.7009%27 stroke=%27%23727272%27 stroke-width=%271.5%27 stroke-linecap=%27round%27 stroke-linejoin=%27round%27/><path d=%27M15.5762 1.54158L2.43115 14.6866%27 stroke=%27%23727272%27 stroke-width=%271.5%27 stroke-linecap=%27round%27 stroke-linejoin=%27round%27/></svg>"},1666:e=>{"use strict";e.exports="data:image/svg+xml;utf8,<svg xmlns=%27http://www.w3.org/2000/svg%27 width=%2718%27 height=%2716%27 viewBox=%270 0 18 16%27 fill=%27none%27><path d=%27M4.35 12.775C2.492 11.558 1.292 9.725 1.292 8.116C1.292 5.383 4.742 2.033 9 2.033C10.742 2.033 13.335 3.066 14.545 4.162%27 stroke=%27%23727272%27 stroke-width=%271.5%27 stroke-linecap=%27round%27 stroke-linejoin=%27round%27/><path d=%27M14.506 4.142C15.605 4.913 16.716 7.159 16.716 8.117C16.716 10.85 13.288 14.341 9 14.2C7.084 14.137 5.276 13.476 4.38 12.787%27 stroke=%27%23727272%27 stroke-width=%271.5%27 stroke-linecap=%27round%27 stroke-linejoin=%27round%27/><path d=%27M7.13804 9.97249C6.6422 9.48166 6.3647 8.81249 6.3672 8.11499C6.36387 6.66083 7.54054 5.47916 8.99554 5.47666C9.69554 5.47499 10.3672 5.75249 10.8622 6.24749%27 stroke=%27%23727272%27 stroke-width=%271.5%27 stroke-linecap=%27round%27 stroke-linejoin=%27round%27/><path d=%27M10.931 6.313C12.673 8.144 10.831 11.881 7.268 10.046%27 stroke=%27%23727272%27 stroke-width=%271.5%27 stroke-linecap=%27round%27 stroke-linejoin=%27round%27/></svg>"},8913:(e,t,s)=>{"use strict";e.exports=s.p+"d5b3ad75d9323b167595.woff"},6322:(e,t,s)=>{"use strict";e.exports=s.p+"98b5420ed7dadfd6bac8.woff"},2485:(e,t,s)=>{"use strict";e.exports=s.p+"f64d02acab54735d518f.woff"},458:(e,t,s)=>{"use strict";e.exports=s.p+"a81f68b2a1331c71b4e4.woff"},5494:(e,t,s)=>{"use strict";e.exports=s.p+"90465e701fd12c8eba99.gif"}},t={};function s(r){var a=t[r];if(void 0!==a)return a.exports;var i=t[r]={id:r,exports:{}};return e[r].call(i.exports,i,i.exports,s),i.exports}s.m=e,s.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return s.d(t,{a:t}),t},s.d=(e,t)=>{for(var r in t)s.o(t,r)&&!s.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.p="/",s.b=document.baseURI||self.location.href,s.nc=void 0,(()=>{"use strict";s(7852),s(8675),s(5105)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,